1b17a8da0db577ae27661214a9955a9b
/* istanbul ignore next */
function cov_1ys2a7b2gb() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/progressMonitor.ts";
  var hash = "0d743e36d290ef7171641ccb8da4d69629c9a569";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/progressMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 38
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "1": {
        start: {
          line: 38,
          column: 40
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "2": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 66,
          column: 38
        }
      },
      "3": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 29
        }
      },
      "4": {
        start: {
          line: 68,
          column: 22
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "5": {
        start: {
          line: 69,
          column: 25
        },
        end: {
          line: 69,
          column: 34
        }
      },
      "6": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 30
        }
      },
      "7": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 16
        }
      },
      "8": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 59
        }
      },
      "9": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 29
        }
      },
      "10": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 35
        }
      },
      "11": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 36
        }
      },
      "12": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 68
        }
      },
      "13": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 64
        }
      },
      "14": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 48
        }
      },
      "15": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "16": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 79
        }
      },
      "17": {
        start: {
          line: 96,
          column: 47
        },
        end: {
          line: 96,
          column: 77
        }
      },
      "18": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "19": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 46
        }
      },
      "20": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 24
        }
      },
      "21": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 61
        }
      },
      "22": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 63
        }
      },
      "23": {
        start: {
          line: 119,
          column: 25
        },
        end: {
          line: 119,
          column: 69
        }
      },
      "24": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "25": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 24
        }
      },
      "26": {
        start: {
          line: 123,
          column: 26
        },
        end: {
          line: 123,
          column: 74
        }
      },
      "27": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "28": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "29": {
        start: {
          line: 127,
          column: 28
        },
        end: {
          line: 127,
          column: 79
        }
      },
      "30": {
        start: {
          line: 128,
          column: 32
        },
        end: {
          line: 128,
          column: 62
        }
      },
      "31": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "32": {
        start: {
          line: 130,
          column: 39
        },
        end: {
          line: 130,
          column: 68
        }
      },
      "33": {
        start: {
          line: 131,
          column: 37
        },
        end: {
          line: 131,
          column: 106
        }
      },
      "34": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 36
        }
      },
      "35": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 20
        }
      },
      "36": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "37": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 56
        }
      },
      "38": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "39": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 58
        }
      },
      "40": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "41": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 77
        }
      },
      "42": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "43": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 79
        }
      },
      "44": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "45": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 54
        }
      },
      "46": {
        start: {
          line: 160,
          column: 25
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "47": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 73
        }
      },
      "48": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 88
        }
      },
      "49": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 179,
          column: 79
        }
      },
      "50": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 181,
          column: 19
        }
      },
      "51": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 19
        }
      },
      "52": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 39
        }
      },
      "53": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 88
        }
      },
      "54": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 51
        }
      },
      "55": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "56": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 117
        }
      },
      "57": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "58": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 55
        }
      },
      "59": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "60": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 52
        }
      },
      "61": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 38
        }
      },
      "62": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 56
        }
      },
      "63": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 66
        }
      },
      "64": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "65": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 106
        }
      },
      "66": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 90
        }
      },
      "67": {
        start: {
          line: 212,
          column: 25
        },
        end: {
          line: 212,
          column: 79
        }
      },
      "68": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 214,
          column: 19
        }
      },
      "69": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 19
        }
      },
      "70": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 44
        }
      },
      "71": {
        start: {
          line: 217,
          column: 27
        },
        end: {
          line: 217,
          column: 92
        }
      },
      "72": {
        start: {
          line: 217,
          column: 60
        },
        end: {
          line: 217,
          column: 91
        }
      },
      "73": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "74": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 225,
          column: 14
        }
      },
      "75": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 53
        }
      },
      "76": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 44
        }
      },
      "77": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 58
        }
      },
      "78": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 38
        }
      },
      "79": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 45
        }
      },
      "80": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "81": {
        start: {
          line: 244,
          column: 25
        },
        end: {
          line: 244,
          column: 79
        }
      },
      "82": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 246,
          column: 19
        }
      },
      "83": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 19
        }
      },
      "84": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 248,
          column: 94
        }
      },
      "85": {
        start: {
          line: 248,
          column: 62
        },
        end: {
          line: 248,
          column: 93
        }
      },
      "86": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "87": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 91
        }
      },
      "88": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 40
        }
      },
      "89": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 54
        }
      },
      "90": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 50
        }
      },
      "91": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "92": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 256,
          column: 61
        }
      },
      "93": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 45
        }
      },
      "94": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 45
        }
      },
      "95": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "96": {
        start: {
          line: 271,
          column: 25
        },
        end: {
          line: 271,
          column: 84
        }
      },
      "97": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 273,
          column: 19
        }
      },
      "98": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 19
        }
      },
      "99": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 59
        }
      },
      "100": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "101": {
        start: {
          line: 278,
          column: 34
        },
        end: {
          line: 278,
          column: 93
        }
      },
      "102": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "103": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 72
        }
      },
      "104": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 110
        }
      },
      "105": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 88
        }
      },
      "106": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "107": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 41
        }
      },
      "108": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 19
        }
      },
      "109": {
        start: {
          line: 294,
          column: 30
        },
        end: {
          line: 294,
          column: 97
        }
      },
      "110": {
        start: {
          line: 294,
          column: 74
        },
        end: {
          line: 294,
          column: 93
        }
      },
      "111": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 92
        }
      },
      "112": {
        start: {
          line: 297,
          column: 31
        },
        end: {
          line: 297,
          column: 125
        }
      },
      "113": {
        start: {
          line: 297,
          column: 66
        },
        end: {
          line: 297,
          column: 117
        }
      },
      "114": {
        start: {
          line: 298,
          column: 27
        },
        end: {
          line: 298,
          column: 55
        }
      },
      "115": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "116": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 51
        }
      },
      "117": {
        start: {
          line: 302,
          column: 13
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "118": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 49
        }
      },
      "119": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 48
        }
      },
      "120": {
        start: {
          line: 313,
          column: 31
        },
        end: {
          line: 315,
          column: 40
        }
      },
      "121": {
        start: {
          line: 314,
          column: 26
        },
        end: {
          line: 314,
          column: 56
        }
      },
      "122": {
        start: {
          line: 315,
          column: 23
        },
        end: {
          line: 315,
          column: 39
        }
      },
      "123": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "124": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 127
        }
      },
      "125": {
        start: {
          line: 317,
          column: 88
        },
        end: {
          line: 317,
          column: 98
        }
      },
      "126": {
        start: {
          line: 319,
          column: 34
        },
        end: {
          line: 319,
          column: 100
        }
      },
      "127": {
        start: {
          line: 319,
          column: 69
        },
        end: {
          line: 319,
          column: 99
        }
      },
      "128": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 330,
          column: 13
        }
      },
      "129": {
        start: {
          line: 321,
          column: 36
        },
        end: {
          line: 321,
          column: 145
        }
      },
      "130": {
        start: {
          line: 321,
          column: 79
        },
        end: {
          line: 321,
          column: 144
        }
      },
      "131": {
        start: {
          line: 322,
          column: 36
        },
        end: {
          line: 322,
          column: 145
        }
      },
      "132": {
        start: {
          line: 322,
          column: 79
        },
        end: {
          line: 322,
          column: 144
        }
      },
      "133": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 323,
          column: 72
        }
      },
      "134": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 72
        }
      },
      "135": {
        start: {
          line: 326,
          column: 32
        },
        end: {
          line: 326,
          column: 68
        }
      },
      "136": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 329,
          column: 44
        }
      },
      "137": {
        start: {
          line: 328,
          column: 34
        },
        end: {
          line: 328,
          column: 64
        }
      },
      "138": {
        start: {
          line: 329,
          column: 31
        },
        end: {
          line: 329,
          column: 42
        }
      },
      "139": {
        start: {
          line: 337,
          column: 35
        },
        end: {
          line: 337,
          column: 37
        }
      },
      "140": {
        start: {
          line: 338,
          column: 33
        },
        end: {
          line: 338,
          column: 34
        }
      },
      "141": {
        start: {
          line: 339,
          column: 25
        },
        end: {
          line: 339,
          column: 26
        }
      },
      "142": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "143": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "144": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 67
        }
      },
      "145": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 55
        }
      },
      "146": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "147": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 29
        }
      },
      "148": {
        start: {
          line: 349,
          column: 26
        },
        end: {
          line: 349,
          column: 74
        }
      },
      "149": {
        start: {
          line: 350,
          column: 24
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "150": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 64
        }
      },
      "151": {
        start: {
          line: 373,
          column: 27
        },
        end: {
          line: 373,
          column: 46
        }
      },
      "152": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 374,
          column: 63
        }
      },
      "153": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "154": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 385,
          column: 14
        }
      },
      "155": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "156": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 39
        }
      },
      "157": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 68
        }
      },
      "158": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 67
        }
      },
      "159": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 101
        }
      },
      "160": {
        start: {
          line: 393,
          column: 32
        },
        end: {
          line: 393,
          column: 83
        }
      },
      "161": {
        start: {
          line: 393,
          column: 77
        },
        end: {
          line: 393,
          column: 82
        }
      },
      "162": {
        start: {
          line: 394,
          column: 29
        },
        end: {
          line: 394,
          column: 66
        }
      },
      "163": {
        start: {
          line: 395,
          column: 29
        },
        end: {
          line: 395,
          column: 66
        }
      },
      "164": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 93
        }
      },
      "165": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 93
        }
      },
      "166": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 61
        }
      },
      "167": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 402,
          column: 13
        }
      },
      "168": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 80
        }
      },
      "169": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 63
        }
      },
      "170": {
        start: {
          line: 410,
          column: 23
        },
        end: {
          line: 410,
          column: 25
        }
      },
      "171": {
        start: {
          line: 411,
          column: 26
        },
        end: {
          line: 411,
          column: 74
        }
      },
      "172": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "173": {
        start: {
          line: 414,
          column: 34
        },
        end: {
          line: 414,
          column: 118
        }
      },
      "174": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 428,
          column: 13
        }
      },
      "175": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 427,
          column: 19
        }
      },
      "176": {
        start: {
          line: 431,
          column: 28
        },
        end: {
          line: 431,
          column: 93
        }
      },
      "177": {
        start: {
          line: 431,
          column: 63
        },
        end: {
          line: 431,
          column: 85
        }
      },
      "178": {
        start: {
          line: 432,
          column: 28
        },
        end: {
          line: 432,
          column: 83
        }
      },
      "179": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "180": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 442,
          column: 15
        }
      },
      "181": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 447,
          column: 11
        }
      },
      "182": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 38
        }
      },
      "183": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 466,
          column: 47
        }
      },
      "184": {
        start: {
          line: 454,
          column: 37
        },
        end: {
          line: 454,
          column: 85
        }
      },
      "185": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 465,
          column: 15
        }
      },
      "186": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 463,
          column: 17
        }
      },
      "187": {
        start: {
          line: 458,
          column: 42
        },
        end: {
          line: 458,
          column: 95
        }
      },
      "188": {
        start: {
          line: 459,
          column: 20
        },
        end: {
          line: 462,
          column: 21
        }
      },
      "189": {
        start: {
          line: 460,
          column: 24
        },
        end: {
          line: 460,
          column: 80
        }
      },
      "190": {
        start: {
          line: 461,
          column: 24
        },
        end: {
          line: 461,
          column: 118
        }
      },
      "191": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 93
        }
      },
      "192": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "193": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 52
        }
      },
      "194": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 44
        }
      },
      "195": {
        start: {
          line: 482,
          column: 19
        },
        end: {
          line: 494,
          column: 5
        }
      },
      "196": {
        start: {
          line: 495,
          column: 4
        },
        end: {
          line: 495,
          column: 62
        }
      },
      "197": {
        start: {
          line: 500,
          column: 39
        },
        end: {
          line: 511,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 47
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 71
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 38
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 81
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 87
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 47
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 93
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 96,
            column: 39
          },
          end: {
            line: 96,
            column: 40
          }
        },
        loc: {
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 77
          }
        },
        line: 96
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 39
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 106
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 38
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 112
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 44
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 118
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 26
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 139
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 140,
            column: 58
          },
          end: {
            line: 140,
            column: 59
          }
        },
        loc: {
          start: {
            line: 140,
            column: 68
          },
          end: {
            line: 142,
            column: 9
          }
        },
        line: 140
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 143,
            column: 60
          },
          end: {
            line: 143,
            column: 61
          }
        },
        loc: {
          start: {
            line: 143,
            column: 70
          },
          end: {
            line: 145,
            column: 9
          }
        },
        line: 143
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 146,
            column: 62
          },
          end: {
            line: 146,
            column: 63
          }
        },
        loc: {
          start: {
            line: 146,
            column: 72
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 146
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 149,
            column: 64
          },
          end: {
            line: 149,
            column: 65
          }
        },
        loc: {
          start: {
            line: 149,
            column: 74
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 149
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 152,
            column: 56
          },
          end: {
            line: 152,
            column: 57
          }
        },
        loc: {
          start: {
            line: 152,
            column: 76
          },
          end: {
            line: 154,
            column: 9
          }
        },
        line: 152
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 38
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 159
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 40
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 178
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 54
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 211
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 217,
            column: 54
          },
          end: {
            line: 217,
            column: 55
          }
        },
        loc: {
          start: {
            line: 217,
            column: 60
          },
          end: {
            line: 217,
            column: 91
          }
        },
        line: 217
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 56
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 243
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 248,
            column: 56
          },
          end: {
            line: 248,
            column: 57
          }
        },
        loc: {
          start: {
            line: 248,
            column: 62
          },
          end: {
            line: 248,
            column: 93
          }
        },
        line: 248
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 41
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 270
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 36
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 289
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 294,
            column: 59
          },
          end: {
            line: 294,
            column: 60
          }
        },
        loc: {
          start: {
            line: 294,
            column: 74
          },
          end: {
            line: 294,
            column: 93
          }
        },
        line: 294
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 297,
            column: 60
          },
          end: {
            line: 297,
            column: 61
          }
        },
        loc: {
          start: {
            line: 297,
            column: 66
          },
          end: {
            line: 297,
            column: 117
          }
        },
        line: 297
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 36
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 312
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 314,
            column: 20
          },
          end: {
            line: 314,
            column: 21
          }
        },
        loc: {
          start: {
            line: 314,
            column: 26
          },
          end: {
            line: 314,
            column: 56
          }
        },
        line: 314
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 315,
            column: 17
          },
          end: {
            line: 315,
            column: 18
          }
        },
        loc: {
          start: {
            line: 315,
            column: 23
          },
          end: {
            line: 315,
            column: 39
          }
        },
        line: 315
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 317,
            column: 73
          },
          end: {
            line: 317,
            column: 74
          }
        },
        loc: {
          start: {
            line: 317,
            column: 88
          },
          end: {
            line: 317,
            column: 98
          }
        },
        line: 317
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 319,
            column: 63
          },
          end: {
            line: 319,
            column: 64
          }
        },
        loc: {
          start: {
            line: 319,
            column: 69
          },
          end: {
            line: 319,
            column: 99
          }
        },
        line: 319
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 321,
            column: 57
          },
          end: {
            line: 321,
            column: 58
          }
        },
        loc: {
          start: {
            line: 321,
            column: 79
          },
          end: {
            line: 321,
            column: 144
          }
        },
        line: 321
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 322,
            column: 57
          },
          end: {
            line: 322,
            column: 58
          }
        },
        loc: {
          start: {
            line: 322,
            column: 79
          },
          end: {
            line: 322,
            column: 144
          }
        },
        line: 322
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 328,
            column: 28
          },
          end: {
            line: 328,
            column: 29
          }
        },
        loc: {
          start: {
            line: 328,
            column: 34
          },
          end: {
            line: 328,
            column: 64
          }
        },
        line: 328
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 329,
            column: 25
          },
          end: {
            line: 329,
            column: 26
          }
        },
        loc: {
          start: {
            line: 329,
            column: 31
          },
          end: {
            line: 329,
            column: 42
          }
        },
        line: 329
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 42
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 336
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 340,
            column: 38
          },
          end: {
            line: 340,
            column: 39
          }
        },
        loc: {
          start: {
            line: 340,
            column: 44
          },
          end: {
            line: 348,
            column: 9
          }
        },
        line: 340
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 39
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 372
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 393,
            column: 67
          },
          end: {
            line: 393,
            column: 68
          }
        },
        loc: {
          start: {
            line: 393,
            column: 77
          },
          end: {
            line: 393,
            column: 82
          }
        },
        line: 393
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 29
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 409
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 431,
            column: 57
          },
          end: {
            line: 431,
            column: 58
          }
        },
        loc: {
          start: {
            line: 431,
            column: 63
          },
          end: {
            line: 431,
            column: 85
          }
        },
        line: 431
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 445,
            column: 23
          },
          end: {
            line: 445,
            column: 24
          }
        },
        loc: {
          start: {
            line: 445,
            column: 32
          },
          end: {
            line: 447,
            column: 9
          }
        },
        line: 445
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 27
          },
          end: {
            line: 467,
            column: 5
          }
        },
        line: 452
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 453,
            column: 47
          },
          end: {
            line: 453,
            column: 48
          }
        },
        loc: {
          start: {
            line: 453,
            column: 53
          },
          end: {
            line: 466,
            column: 9
          }
        },
        line: 453
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 455,
            column: 37
          },
          end: {
            line: 455,
            column: 38
          }
        },
        loc: {
          start: {
            line: 455,
            column: 49
          },
          end: {
            line: 465,
            column: 13
          }
        },
        line: 455
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        loc: {
          start: {
            line: 471,
            column: 11
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 471
      },
      "44": {
        name: "createProgressMonitor",
        decl: {
          start: {
            line: 481,
            column: 16
          },
          end: {
            line: 481,
            column: 37
          }
        },
        loc: {
          start: {
            line: 481,
            column: 75
          },
          end: {
            line: 496,
            column: 1
          }
        },
        line: 481
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 59
          }
        }, {
          start: {
            line: 82,
            column: 63
          },
          end: {
            line: 82,
            column: 67
          }
        }],
        line: 82
      },
      "1": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "2": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "3": {
        loc: {
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 107,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 107,
            column: 52
          }
        }, {
          start: {
            line: 107,
            column: 56
          },
          end: {
            line: 107,
            column: 60
          }
        }],
        line: 107
      },
      "4": {
        loc: {
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 113,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 113,
            column: 54
          }
        }, {
          start: {
            line: 113,
            column: 58
          },
          end: {
            line: 113,
            column: 62
          }
        }],
        line: 113
      },
      "5": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "6": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 21
          }
        }, {
          start: {
            line: 120,
            column: 25
          },
          end: {
            line: 120,
            column: 63
          }
        }],
        line: 120
      },
      "7": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "8": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "9": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 181,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 181,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "10": {
        loc: {
          start: {
            line: 184,
            column: 32
          },
          end: {
            line: 184,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 65
          },
          end: {
            line: 184,
            column: 76
          }
        }, {
          start: {
            line: 184,
            column: 79
          },
          end: {
            line: 184,
            column: 87
          }
        }],
        line: 184
      },
      "11": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "12": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "13": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "14": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "15": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 214,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 214,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "16": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: 228,
            column: 13
          },
          end: {
            line: 232,
            column: 9
          }
        }],
        line: 218
      },
      "17": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 246,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 246,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "18": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "19": {
        loc: {
          start: {
            line: 250,
            column: 34
          },
          end: {
            line: 250,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 250,
            column: 68
          },
          end: {
            line: 250,
            column: 79
          }
        }, {
          start: {
            line: 250,
            column: 82
          },
          end: {
            line: 250,
            column: 90
          }
        }],
        line: 250
      },
      "20": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "21": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 36
          }
        }, {
          start: {
            line: 254,
            column: 40
          },
          end: {
            line: 254,
            column: 58
          }
        }],
        line: 254
      },
      "22": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 273,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 273,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "23": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "24": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "25": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "26": {
        loc: {
          start: {
            line: 297,
            column: 66
          },
          end: {
            line: 297,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 66
          },
          end: {
            line: 297,
            column: 91
          }
        }, {
          start: {
            line: 297,
            column: 95
          },
          end: {
            line: 297,
            column: 117
          }
        }],
        line: 297
      },
      "27": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: 302,
            column: 13
          },
          end: {
            line: 307,
            column: 9
          }
        }],
        line: 299
      },
      "28": {
        loc: {
          start: {
            line: 302,
            column: 13
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 13
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: 305,
            column: 13
          },
          end: {
            line: 307,
            column: 9
          }
        }],
        line: 302
      },
      "29": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "30": {
        loc: {
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 330,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 330,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "31": {
        loc: {
          start: {
            line: 321,
            column: 79
          },
          end: {
            line: 321,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 321,
            column: 127
          },
          end: {
            line: 321,
            column: 134
          }
        }, {
          start: {
            line: 321,
            column: 137
          },
          end: {
            line: 321,
            column: 144
          }
        }],
        line: 321
      },
      "32": {
        loc: {
          start: {
            line: 322,
            column: 79
          },
          end: {
            line: 322,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 127
          },
          end: {
            line: 322,
            column: 134
          }
        }, {
          start: {
            line: 322,
            column: 137
          },
          end: {
            line: 322,
            column: 144
          }
        }],
        line: 322
      },
      "33": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "34": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "35": {
        loc: {
          start: {
            line: 354,
            column: 36
          },
          end: {
            line: 354,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 36
          },
          end: {
            line: 354,
            column: 59
          }
        }, {
          start: {
            line: 354,
            column: 63
          },
          end: {
            line: 354,
            column: 81
          }
        }],
        line: 354
      },
      "36": {
        loc: {
          start: {
            line: 360,
            column: 38
          },
          end: {
            line: 360,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 38
          },
          end: {
            line: 360,
            column: 69
          }
        }, {
          start: {
            line: 360,
            column: 73
          },
          end: {
            line: 360,
            column: 91
          }
        }],
        line: 360
      },
      "37": {
        loc: {
          start: {
            line: 361,
            column: 30
          },
          end: {
            line: 361,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 30
          },
          end: {
            line: 361,
            column: 53
          }
        }, {
          start: {
            line: 361,
            column: 57
          },
          end: {
            line: 361,
            column: 75
          }
        }],
        line: 361
      },
      "38": {
        loc: {
          start: {
            line: 362,
            column: 30
          },
          end: {
            line: 362,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 30
          },
          end: {
            line: 362,
            column: 53
          }
        }, {
          start: {
            line: 362,
            column: 57
          },
          end: {
            line: 362,
            column: 75
          }
        }],
        line: 362
      },
      "39": {
        loc: {
          start: {
            line: 363,
            column: 35
          },
          end: {
            line: 364,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 364,
            column: 21
          },
          end: {
            line: 364,
            column: 72
          }
        }, {
          start: {
            line: 364,
            column: 76
          },
          end: {
            line: 364,
            column: 77
          }
        }],
        line: 363
      },
      "40": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "41": {
        loc: {
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      },
      "42": {
        loc: {
          start: {
            line: 396,
            column: 37
          },
          end: {
            line: 396,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 37
          },
          end: {
            line: 396,
            column: 58
          }
        }, {
          start: {
            line: 396,
            column: 62
          },
          end: {
            line: 396,
            column: 92
          }
        }],
        line: 396
      },
      "43": {
        loc: {
          start: {
            line: 397,
            column: 37
          },
          end: {
            line: 397,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 397,
            column: 37
          },
          end: {
            line: 397,
            column: 58
          }
        }, {
          start: {
            line: 397,
            column: 62
          },
          end: {
            line: 397,
            column: 92
          }
        }],
        line: 397
      },
      "44": {
        loc: {
          start: {
            line: 400,
            column: 12
          },
          end: {
            line: 402,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 12
          },
          end: {
            line: 402,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "45": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "46": {
        loc: {
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 413,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 413,
            column: 21
          }
        }, {
          start: {
            line: 413,
            column: 25
          },
          end: {
            line: 413,
            column: 48
          }
        }],
        line: 413
      },
      "47": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 428,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 428,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "48": {
        loc: {
          start: {
            line: 421,
            column: 30
          },
          end: {
            line: 421,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 421,
            column: 76
          },
          end: {
            line: 421,
            column: 82
          }
        }, {
          start: {
            line: 421,
            column: 85
          },
          end: {
            line: 421,
            column: 93
          }
        }],
        line: 421
      },
      "49": {
        loc: {
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 433
      },
      "50": {
        loc: {
          start: {
            line: 439,
            column: 26
          },
          end: {
            line: 439,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 439,
            column: 46
          },
          end: {
            line: 439,
            column: 56
          }
        }, {
          start: {
            line: 439,
            column: 59
          },
          end: {
            line: 439,
            column: 65
          }
        }],
        line: 439
      },
      "51": {
        loc: {
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 463,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 463,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "52": {
        loc: {
          start: {
            line: 457,
            column: 20
          },
          end: {
            line: 457,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 457,
            column: 20
          },
          end: {
            line: 457,
            column: 57
          }
        }, {
          start: {
            line: 457,
            column: 61
          },
          end: {
            line: 457,
            column: 98
          }
        }],
        line: 457
      },
      "53": {
        loc: {
          start: {
            line: 459,
            column: 20
          },
          end: {
            line: 462,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 20
          },
          end: {
            line: 462,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "54": {
        loc: {
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "55": {
        loc: {
          start: {
            line: 481,
            column: 61
          },
          end: {
            line: 481,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 481,
            column: 71
          },
          end: {
            line: 481,
            column: 73
          }
        }],
        line: 481
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/progressMonitor.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/progressMonitor.ts"],
      sourcesContent: ["/**\n * Progress Monitor for n8n Fork Workflow Executions\n *\n * Provides detailed progress tracking, performance monitoring, and real-time\n * status updates for workflow executions with predictive analytics.\n */\n\nimport { EventEmitter } from 'events';\nimport { EventStreamingManager, WorkflowExecutionStatus, NodeExecutionUpdate, ProgressUpdate } from './eventStreamingManager.js';\nimport { z } from 'zod';\n\n// Progress monitoring schemas\nexport const WorkflowProgressSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  workflowName: z.string().optional(),\n  overallProgress: z.number().min(0).max(100),\n  currentPhase: z.enum(['initializing', 'executing', 'completing', 'completed', 'failed']),\n  nodeProgress: z.array(z.object({\n    nodeId: z.string(),\n    nodeName: z.string(),\n    status: z.enum(['pending', 'running', 'completed', 'failed', 'skipped']),\n    progress: z.number().min(0).max(100),\n    startTime: z.string().optional(),\n    endTime: z.string().optional(),\n    executionTime: z.number().optional(),\n    error: z.string().optional(),\n  })),\n  startTime: z.string(),\n  estimatedEndTime: z.string().optional(),\n  actualEndTime: z.string().optional(),\n  estimatedDuration: z.number().optional(),\n  actualDuration: z.number().optional(),\n  performance: z.object({\n    averageNodeTime: z.number(),\n    slowestNode: z.string().optional(),\n    fastestNode: z.string().optional(),\n    bottlenecks: z.array(z.string()),\n  }),\n});\n\nexport const PerformanceMetricsSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  metrics: z.object({\n    totalExecutionTime: z.number(),\n    nodeExecutionTimes: z.record(z.number()),\n    memoryUsage: z.number().optional(),\n    cpuUsage: z.number().optional(),\n    networkRequests: z.number().optional(),\n    errorCount: z.number(),\n    retryCount: z.number(),\n  }),\n  benchmarks: z.object({\n    averageExecutionTime: z.number(),\n    percentile95: z.number(),\n    percentile99: z.number(),\n    comparedToAverage: z.number(),\n  }),\n});\n\nexport type WorkflowProgress = z.infer<typeof WorkflowProgressSchema>;\nexport type PerformanceMetrics = z.infer<typeof PerformanceMetricsSchema>;\n\nexport interface ProgressMonitorConfig {\n  enablePredictiveAnalytics: boolean;\n  enablePerformanceTracking: boolean;\n  historicalDataLimit: number;\n  progressUpdateInterval: number;\n  benchmarkingEnabled: boolean;\n  alertThresholds: {\n    slowExecutionMultiplier: number;\n    highFailureRate: number;\n    maxExecutionTime: number;\n  };\n}\n\nexport interface ExecutionAlert {\n  type: 'slow_execution' | 'high_failure_rate' | 'node_timeout' | 'resource_limit';\n  executionId: string;\n  workflowId: string;\n  message: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  timestamp: string;\n  data: any;\n}\n\n/**\n * Progress Monitor\n *\n * Monitors workflow execution progress with predictive analytics,\n * performance tracking, and intelligent alerting.\n */\nexport class ProgressMonitor extends EventEmitter {\n  private eventStreamingManager: EventStreamingManager;\n  private config: ProgressMonitorConfig;\n  private activeProgressTracking: Map<string, WorkflowProgress> = new Map();\n  private historicalExecutions: WorkflowProgress[] = [];\n  private performanceData: Map<string, PerformanceMetrics> = new Map();\n  private workflowBenchmarks: Map<string, any> = new Map();\n  private progressUpdateTimer: NodeJS.Timeout | null = null;\n\n  constructor(eventStreamingManager: EventStreamingManager, config: ProgressMonitorConfig) {\n    super();\n    this.eventStreamingManager = eventStreamingManager;\n    this.config = config;\n    this.setupEventListeners();\n    this.startProgressUpdates();\n  }\n\n  /**\n   * Get current progress for an execution\n   */\n  public getExecutionProgress(executionId: string): WorkflowProgress | null {\n    return this.activeProgressTracking.get(executionId) || null;\n  }\n\n  /**\n   * Get all active execution progress\n   */\n  public getAllActiveProgress(): WorkflowProgress[] {\n    return Array.from(this.activeProgressTracking.values());\n  }\n\n  /**\n   * Get historical execution data\n   */\n  public getHistoricalExecutions(workflowId?: string, limit?: number): WorkflowProgress[] {\n    let filtered = this.historicalExecutions;\n    \n    if (workflowId) {\n      filtered = filtered.filter(exec => exec.workflowId === workflowId);\n    }\n    \n    if (limit) {\n      filtered = filtered.slice(-limit);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * Get performance metrics for an execution\n   */\n  public getPerformanceMetrics(executionId: string): PerformanceMetrics | null {\n    return this.performanceData.get(executionId) || null;\n  }\n\n  /**\n   * Get workflow benchmarks\n   */\n  public getWorkflowBenchmarks(workflowId: string): any {\n    return this.workflowBenchmarks.get(workflowId) || null;\n  }\n\n  /**\n   * Get predicted completion time\n   */\n  public getPredictedCompletionTime(executionId: string): Date | null {\n    const progress = this.activeProgressTracking.get(executionId);\n    if (!progress || !this.config.enablePredictiveAnalytics) {\n      return null;\n    }\n\n    const benchmark = this.workflowBenchmarks.get(progress.workflowId);\n    if (!benchmark) {\n      return null;\n    }\n\n    const elapsedTime = Date.now() - new Date(progress.startTime).getTime();\n    const completionRatio = progress.overallProgress / 100;\n    \n    if (completionRatio > 0) {\n      const estimatedTotalTime = elapsedTime / completionRatio;\n      const estimatedEndTime = new Date(new Date(progress.startTime).getTime() + estimatedTotalTime);\n      return estimatedEndTime;\n    }\n\n    return null;\n  }\n\n  /**\n   * Setup event listeners for streaming manager\n   */\n  private setupEventListeners(): void {\n    this.eventStreamingManager.on('executionStarted', (data) => {\n      this.handleExecutionStarted(data.execution);\n    });\n\n    this.eventStreamingManager.on('executionCompleted', (data) => {\n      this.handleExecutionCompleted(data.execution);\n    });\n\n    this.eventStreamingManager.on('nodeExecutionStarted', (data) => {\n      this.handleNodeExecutionStarted(data.nodeUpdate, data.execution);\n    });\n\n    this.eventStreamingManager.on('nodeExecutionCompleted', (data) => {\n      this.handleNodeExecutionCompleted(data.nodeUpdate, data.execution);\n    });\n\n    this.eventStreamingManager.on('progressUpdate', (progressUpdate: ProgressUpdate) => {\n      this.handleProgressUpdate(progressUpdate);\n    });\n  }\n\n  /**\n   * Handle execution started\n   */\n  private handleExecutionStarted(execution: WorkflowExecutionStatus): void {\n    const progress: WorkflowProgress = {\n      executionId: execution.executionId,\n      workflowId: execution.workflowId,\n      overallProgress: 0,\n      currentPhase: 'initializing',\n      nodeProgress: [],\n      startTime: execution.startTime,\n      performance: {\n        averageNodeTime: 0,\n        bottlenecks: [],\n      },\n    };\n\n    this.activeProgressTracking.set(execution.executionId, progress);\n    this.emit('progressStarted', { progress, timestamp: new Date().toISOString() });\n  }\n\n  /**\n   * Handle execution completed\n   */\n  private handleExecutionCompleted(execution: WorkflowExecutionStatus): void {\n    const progress = this.activeProgressTracking.get(execution.executionId);\n    if (!progress) return;\n\n    // Update progress with completion data\n    progress.overallProgress = 100;\n    progress.currentPhase = execution.status === 'success' ? 'completed' : 'failed';\n    progress.actualEndTime = execution.endTime;\n    \n    if (execution.endTime) {\n      progress.actualDuration = new Date(execution.endTime).getTime() - new Date(progress.startTime).getTime();\n    }\n\n    // Calculate performance metrics\n    if (this.config.enablePerformanceTracking) {\n      this.calculatePerformanceMetrics(progress);\n    }\n\n    // Update benchmarks\n    if (this.config.benchmarkingEnabled) {\n      this.updateWorkflowBenchmarks(progress);\n    }\n\n    // Check for alerts\n    this.checkForAlerts(progress);\n\n    // Move to historical data\n    this.historicalExecutions.push({ ...progress });\n    this.activeProgressTracking.delete(execution.executionId);\n\n    // Trim historical data if needed\n    if (this.historicalExecutions.length > this.config.historicalDataLimit) {\n      this.historicalExecutions = this.historicalExecutions.slice(-this.config.historicalDataLimit);\n    }\n\n    this.emit('progressCompleted', { progress, timestamp: new Date().toISOString() });\n  }\n\n  /**\n   * Handle node execution started\n   */\n  private handleNodeExecutionStarted(nodeUpdate: NodeExecutionUpdate, execution: WorkflowExecutionStatus): void {\n    const progress = this.activeProgressTracking.get(execution.executionId);\n    if (!progress) return;\n\n    progress.currentPhase = 'executing';\n\n    // Find or create node progress entry\n    let nodeProgress = progress.nodeProgress.find(np => np.nodeId === nodeUpdate.nodeId);\n    if (!nodeProgress) {\n      nodeProgress = {\n        nodeId: nodeUpdate.nodeId,\n        nodeName: nodeUpdate.nodeName,\n        status: 'running',\n        progress: 0,\n        startTime: nodeUpdate.startTime,\n      };\n      progress.nodeProgress.push(nodeProgress);\n    } else {\n      nodeProgress.status = 'running';\n      nodeProgress.startTime = nodeUpdate.startTime;\n      nodeProgress.progress = 0;\n    }\n\n    this.updateOverallProgress(progress);\n    this.emit('nodeProgressStarted', { \n      progress, \n      nodeProgress, \n      timestamp: new Date().toISOString() \n    });\n  }\n\n  /**\n   * Handle node execution completed\n   */\n  private handleNodeExecutionCompleted(nodeUpdate: NodeExecutionUpdate, execution: WorkflowExecutionStatus): void {\n    const progress = this.activeProgressTracking.get(execution.executionId);\n    if (!progress) return;\n\n    // Update node progress\n    const nodeProgress = progress.nodeProgress.find(np => np.nodeId === nodeUpdate.nodeId);\n    if (nodeProgress) {\n      nodeProgress.status = nodeUpdate.status === 'success' ? 'completed' : 'failed';\n      nodeProgress.progress = 100;\n      nodeProgress.endTime = nodeUpdate.endTime;\n      nodeProgress.error = nodeUpdate.error;\n\n      if (nodeUpdate.startTime && nodeUpdate.endTime) {\n        nodeProgress.executionTime = new Date(nodeUpdate.endTime).getTime() - \n                                   new Date(nodeUpdate.startTime).getTime();\n      }\n    }\n\n    this.updateOverallProgress(progress);\n    this.updatePerformanceData(progress);\n\n    this.emit('nodeProgressCompleted', { \n      progress, \n      nodeProgress, \n      timestamp: new Date().toISOString() \n    });\n  }\n\n  /**\n   * Handle progress update\n   */\n  private handleProgressUpdate(progressUpdate: ProgressUpdate): void {\n    const progress = this.activeProgressTracking.get(progressUpdate.executionId);\n    if (!progress) return;\n\n    // Update with new progress information\n    progress.overallProgress = progressUpdate.progress;\n    \n    // Update estimated completion time if predictive analytics enabled\n    if (this.config.enablePredictiveAnalytics) {\n      const predictedTime = this.getPredictedCompletionTime(progressUpdate.executionId);\n      if (predictedTime) {\n        progress.estimatedEndTime = predictedTime.toISOString();\n        progress.estimatedDuration = predictedTime.getTime() - new Date(progress.startTime).getTime();\n      }\n    }\n\n    this.emit('progressUpdated', { progress, timestamp: new Date().toISOString() });\n  }\n\n  /**\n   * Update overall progress based on node completion\n   */\n  private updateOverallProgress(progress: WorkflowProgress): void {\n    if (progress.nodeProgress.length === 0) {\n      progress.overallProgress = 0;\n      return;\n    }\n\n    const totalProgress = progress.nodeProgress.reduce((sum, node) => sum + node.progress, 0);\n    progress.overallProgress = Math.round(totalProgress / progress.nodeProgress.length);\n\n    // Update current phase\n    const completedNodes = progress.nodeProgress.filter(np => np.status === 'completed' || np.status === 'failed').length;\n    const totalNodes = progress.nodeProgress.length;\n\n    if (completedNodes === 0) {\n      progress.currentPhase = 'initializing';\n    } else if (completedNodes === totalNodes) {\n      progress.currentPhase = 'completing';\n    } else {\n      progress.currentPhase = 'executing';\n    }\n  }\n\n  /**\n   * Update performance data\n   */\n  private updatePerformanceData(progress: WorkflowProgress): void {\n    const executionTimes = progress.nodeProgress\n      .filter(np => np.executionTime !== undefined)\n      .map(np => np.executionTime!);\n\n    if (executionTimes.length > 0) {\n      progress.performance.averageNodeTime = executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length;\n\n      // Find slowest and fastest nodes\n      const nodeWithTimes = progress.nodeProgress.filter(np => np.executionTime !== undefined);\n      if (nodeWithTimes.length > 0) {\n        const slowestNode = nodeWithTimes.reduce((slowest, current) => \n          current.executionTime! > slowest.executionTime! ? current : slowest\n        );\n        const fastestNode = nodeWithTimes.reduce((fastest, current) => \n          current.executionTime! < fastest.executionTime! ? current : fastest\n        );\n\n        progress.performance.slowestNode = slowestNode.nodeName;\n        progress.performance.fastestNode = fastestNode.nodeName;\n\n        // Identify bottlenecks (nodes taking >2x average time)\n        const avgTime = progress.performance.averageNodeTime;\n        progress.performance.bottlenecks = nodeWithTimes\n          .filter(np => np.executionTime! > avgTime * 2)\n          .map(np => np.nodeName);\n      }\n    }\n  }\n\n  /**\n   * Calculate performance metrics\n   */\n  private calculatePerformanceMetrics(progress: WorkflowProgress): void {\n    const nodeExecutionTimes: Record<string, number> = {};\n    let totalExecutionTime = 0;\n    let errorCount = 0;\n\n    progress.nodeProgress.forEach(np => {\n      if (np.executionTime) {\n        nodeExecutionTimes[np.nodeName] = np.executionTime;\n        totalExecutionTime += np.executionTime;\n      }\n      if (np.status === 'failed') {\n        errorCount++;\n      }\n    });\n\n    const benchmark = this.workflowBenchmarks.get(progress.workflowId);\n    const metrics: PerformanceMetrics = {\n      executionId: progress.executionId,\n      workflowId: progress.workflowId,\n      metrics: {\n        totalExecutionTime: progress.actualDuration || totalExecutionTime,\n        nodeExecutionTimes,\n        errorCount,\n        retryCount: 0, // TODO: Track retries\n      },\n      benchmarks: {\n        averageExecutionTime: benchmark?.averageExecutionTime || totalExecutionTime,\n        percentile95: benchmark?.percentile95 || totalExecutionTime,\n        percentile99: benchmark?.percentile99 || totalExecutionTime,\n        comparedToAverage: benchmark ? \n          (totalExecutionTime / benchmark.averageExecutionTime) : 1,\n      },\n    };\n\n    this.performanceData.set(progress.executionId, metrics);\n  }\n\n  /**\n   * Update workflow benchmarks\n   */\n  private updateWorkflowBenchmarks(progress: WorkflowProgress): void {\n    const workflowId = progress.workflowId;\n    let benchmark = this.workflowBenchmarks.get(workflowId);\n\n    if (!benchmark) {\n      benchmark = {\n        workflowId,\n        executionCount: 0,\n        totalExecutionTime: 0,\n        executionTimes: [],\n        averageExecutionTime: 0,\n        percentile95: 0,\n        percentile99: 0,\n        lastUpdated: new Date().toISOString(),\n      };\n    }\n\n    if (progress.actualDuration) {\n      benchmark.executionCount++;\n      benchmark.totalExecutionTime += progress.actualDuration;\n      benchmark.executionTimes.push(progress.actualDuration);\n      benchmark.averageExecutionTime = benchmark.totalExecutionTime / benchmark.executionCount;\n\n      // Calculate percentiles\n      const sortedTimes = [...benchmark.executionTimes].sort((a, b) => a - b);\n      const p95Index = Math.floor(sortedTimes.length * 0.95);\n      const p99Index = Math.floor(sortedTimes.length * 0.99);\n      \n      benchmark.percentile95 = sortedTimes[p95Index] || benchmark.averageExecutionTime;\n      benchmark.percentile99 = sortedTimes[p99Index] || benchmark.averageExecutionTime;\n      benchmark.lastUpdated = new Date().toISOString();\n\n      // Keep only recent execution times (last 100)\n      if (benchmark.executionTimes.length > 100) {\n        benchmark.executionTimes = benchmark.executionTimes.slice(-100);\n      }\n\n      this.workflowBenchmarks.set(workflowId, benchmark);\n    }\n  }\n\n  /**\n   * Check for alerts\n   */\n  private checkForAlerts(progress: WorkflowProgress): void {\n    const alerts: ExecutionAlert[] = [];\n    const benchmark = this.workflowBenchmarks.get(progress.workflowId);\n\n    // Check for slow execution\n    if (benchmark && progress.actualDuration) {\n      const slowThreshold = benchmark.averageExecutionTime * this.config.alertThresholds.slowExecutionMultiplier;\n      if (progress.actualDuration > slowThreshold) {\n        alerts.push({\n          type: 'slow_execution',\n          executionId: progress.executionId,\n          workflowId: progress.workflowId,\n          message: `Execution took ${Math.round(progress.actualDuration / 1000)}s, ${Math.round(progress.actualDuration / benchmark.averageExecutionTime * 100)}% of average`,\n          severity: progress.actualDuration > slowThreshold * 2 ? 'high' : 'medium',\n          timestamp: new Date().toISOString(),\n          data: { \n            actualDuration: progress.actualDuration, \n            averageDuration: benchmark.averageExecutionTime \n          },\n        });\n      }\n    }\n\n    // Check for high failure rate\n    const failedNodes = progress.nodeProgress.filter(np => np.status === 'failed').length;\n    const failureRate = failedNodes / Math.max(progress.nodeProgress.length, 1);\n    if (failureRate > this.config.alertThresholds.highFailureRate) {\n      alerts.push({\n        type: 'high_failure_rate',\n        executionId: progress.executionId,\n        workflowId: progress.workflowId,\n        message: `High failure rate: ${Math.round(failureRate * 100)}% of nodes failed`,\n        severity: failureRate > 0.5 ? 'critical' : 'high',\n        timestamp: new Date().toISOString(),\n        data: { failureRate, failedNodes, totalNodes: progress.nodeProgress.length },\n      });\n    }\n\n    // Emit alerts\n    alerts.forEach(alert => {\n      this.emit('alert', alert);\n    });\n  }\n\n  /**\n   * Start periodic progress updates\n   */\n  private startProgressUpdates(): void {\n    this.progressUpdateTimer = setInterval(() => {\n      const activeExecutions = Array.from(this.activeProgressTracking.values());\n      \n      activeExecutions.forEach(progress => {\n        // Update estimated times for predictive analytics\n        if (this.config.enablePredictiveAnalytics && progress.currentPhase === 'executing') {\n          const predictedTime = this.getPredictedCompletionTime(progress.executionId);\n          if (predictedTime) {\n            progress.estimatedEndTime = predictedTime.toISOString();\n            progress.estimatedDuration = predictedTime.getTime() - new Date(progress.startTime).getTime();\n          }\n        }\n\n        this.emit('progressTick', { progress, timestamp: new Date().toISOString() });\n      });\n    }, this.config.progressUpdateInterval);\n  }\n\n  /**\n   * Stop progress monitor\n   */\n  public stop(): void {\n    if (this.progressUpdateTimer) {\n      clearInterval(this.progressUpdateTimer);\n      this.progressUpdateTimer = null;\n    }\n  }\n}\n\n/**\n * Create progress monitor with default configuration\n */\nexport function createProgressMonitor(\n  eventStreamingManager: EventStreamingManager,\n  options: Partial<ProgressMonitorConfig> = {}\n): ProgressMonitor {\n  const config: ProgressMonitorConfig = {\n    enablePredictiveAnalytics: true,\n    enablePerformanceTracking: true,\n    historicalDataLimit: 1000,\n    progressUpdateInterval: 1000,\n    benchmarkingEnabled: true,\n    alertThresholds: {\n      slowExecutionMultiplier: 2.0,\n      highFailureRate: 0.3,\n      maxExecutionTime: 300000, // 5 minutes\n    },\n    ...options,\n  };\n\n  return new ProgressMonitor(eventStreamingManager, config);\n}\n\n/**\n * Default progress monitor configuration\n */\nexport const DEFAULT_PROGRESS_CONFIG: ProgressMonitorConfig = {\n  enablePredictiveAnalytics: true,\n  enablePerformanceTracking: true,\n  historicalDataLimit: 1000,\n  progressUpdateInterval: 1000,\n  benchmarkingEnabled: true,\n  alertThresholds: {\n    slowExecutionMultiplier: 2.0,\n    highFailureRate: 0.3,\n    maxExecutionTime: 300000,\n  },\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0d743e36d290ef7171641ccb8da4d69629c9a569"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ys2a7b2gb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ys2a7b2gb();
/**
 * Progress Monitor for n8n Fork Workflow Executions
 *
 * Provides detailed progress tracking, performance monitoring, and real-time
 * status updates for workflow executions with predictive analytics.
 */
import { EventEmitter } from 'events';
import { z } from 'zod';
// Progress monitoring schemas
export const WorkflowProgressSchema =
/* istanbul ignore next */
(cov_1ys2a7b2gb().s[0]++, z.object({
  executionId: z.string(),
  workflowId: z.string(),
  workflowName: z.string().optional(),
  overallProgress: z.number().min(0).max(100),
  currentPhase: z.enum(['initializing', 'executing', 'completing', 'completed', 'failed']),
  nodeProgress: z.array(z.object({
    nodeId: z.string(),
    nodeName: z.string(),
    status: z.enum(['pending', 'running', 'completed', 'failed', 'skipped']),
    progress: z.number().min(0).max(100),
    startTime: z.string().optional(),
    endTime: z.string().optional(),
    executionTime: z.number().optional(),
    error: z.string().optional()
  })),
  startTime: z.string(),
  estimatedEndTime: z.string().optional(),
  actualEndTime: z.string().optional(),
  estimatedDuration: z.number().optional(),
  actualDuration: z.number().optional(),
  performance: z.object({
    averageNodeTime: z.number(),
    slowestNode: z.string().optional(),
    fastestNode: z.string().optional(),
    bottlenecks: z.array(z.string())
  })
}));
export const PerformanceMetricsSchema =
/* istanbul ignore next */
(cov_1ys2a7b2gb().s[1]++, z.object({
  executionId: z.string(),
  workflowId: z.string(),
  metrics: z.object({
    totalExecutionTime: z.number(),
    nodeExecutionTimes: z.record(z.number()),
    memoryUsage: z.number().optional(),
    cpuUsage: z.number().optional(),
    networkRequests: z.number().optional(),
    errorCount: z.number(),
    retryCount: z.number()
  }),
  benchmarks: z.object({
    averageExecutionTime: z.number(),
    percentile95: z.number(),
    percentile99: z.number(),
    comparedToAverage: z.number()
  })
}));
/**
 * Progress Monitor
 *
 * Monitors workflow execution progress with predictive analytics,
 * performance tracking, and intelligent alerting.
 */
export class ProgressMonitor extends EventEmitter {
  eventStreamingManager;
  config;
  activeProgressTracking =
  /* istanbul ignore next */
  (cov_1ys2a7b2gb().s[2]++, new Map());
  historicalExecutions =
  /* istanbul ignore next */
  (cov_1ys2a7b2gb().s[3]++, []);
  performanceData =
  /* istanbul ignore next */
  (cov_1ys2a7b2gb().s[4]++, new Map());
  workflowBenchmarks =
  /* istanbul ignore next */
  (cov_1ys2a7b2gb().s[5]++, new Map());
  progressUpdateTimer =
  /* istanbul ignore next */
  (cov_1ys2a7b2gb().s[6]++, null);
  constructor(eventStreamingManager, config) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[0]++;
    cov_1ys2a7b2gb().s[7]++;
    super();
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[8]++;
    this.eventStreamingManager = eventStreamingManager;
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[9]++;
    this.config = config;
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[10]++;
    this.setupEventListeners();
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[11]++;
    this.startProgressUpdates();
  }
  /**
   * Get current progress for an execution
   */
  getExecutionProgress(executionId) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[1]++;
    cov_1ys2a7b2gb().s[12]++;
    return /* istanbul ignore next */(cov_1ys2a7b2gb().b[0][0]++, this.activeProgressTracking.get(executionId)) ||
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[0][1]++, null);
  }
  /**
   * Get all active execution progress
   */
  getAllActiveProgress() {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[2]++;
    cov_1ys2a7b2gb().s[13]++;
    return Array.from(this.activeProgressTracking.values());
  }
  /**
   * Get historical execution data
   */
  getHistoricalExecutions(workflowId, limit) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[3]++;
    let filtered =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[14]++, this.historicalExecutions);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[15]++;
    if (workflowId) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[1][0]++;
      cov_1ys2a7b2gb().s[16]++;
      filtered = filtered.filter(exec => {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().f[4]++;
        cov_1ys2a7b2gb().s[17]++;
        return exec.workflowId === workflowId;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[1][1]++;
    }
    cov_1ys2a7b2gb().s[18]++;
    if (limit) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[2][0]++;
      cov_1ys2a7b2gb().s[19]++;
      filtered = filtered.slice(-limit);
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[2][1]++;
    }
    cov_1ys2a7b2gb().s[20]++;
    return filtered;
  }
  /**
   * Get performance metrics for an execution
   */
  getPerformanceMetrics(executionId) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[5]++;
    cov_1ys2a7b2gb().s[21]++;
    return /* istanbul ignore next */(cov_1ys2a7b2gb().b[3][0]++, this.performanceData.get(executionId)) ||
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[3][1]++, null);
  }
  /**
   * Get workflow benchmarks
   */
  getWorkflowBenchmarks(workflowId) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[6]++;
    cov_1ys2a7b2gb().s[22]++;
    return /* istanbul ignore next */(cov_1ys2a7b2gb().b[4][0]++, this.workflowBenchmarks.get(workflowId)) ||
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[4][1]++, null);
  }
  /**
   * Get predicted completion time
   */
  getPredictedCompletionTime(executionId) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[7]++;
    const progress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[23]++, this.activeProgressTracking.get(executionId));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[6][0]++, !progress) ||
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[6][1]++, !this.config.enablePredictiveAnalytics)) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[5][0]++;
      cov_1ys2a7b2gb().s[25]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[5][1]++;
    }
    const benchmark =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[26]++, this.workflowBenchmarks.get(progress.workflowId));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[27]++;
    if (!benchmark) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[7][0]++;
      cov_1ys2a7b2gb().s[28]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[7][1]++;
    }
    const elapsedTime =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[29]++, Date.now() - new Date(progress.startTime).getTime());
    const completionRatio =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[30]++, progress.overallProgress / 100);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[31]++;
    if (completionRatio > 0) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[8][0]++;
      const estimatedTotalTime =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[32]++, elapsedTime / completionRatio);
      const estimatedEndTime =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[33]++, new Date(new Date(progress.startTime).getTime() + estimatedTotalTime));
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[34]++;
      return estimatedEndTime;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[8][1]++;
    }
    cov_1ys2a7b2gb().s[35]++;
    return null;
  }
  /**
   * Setup event listeners for streaming manager
   */
  setupEventListeners() {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[8]++;
    cov_1ys2a7b2gb().s[36]++;
    this.eventStreamingManager.on('executionStarted', data => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[9]++;
      cov_1ys2a7b2gb().s[37]++;
      this.handleExecutionStarted(data.execution);
    });
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[38]++;
    this.eventStreamingManager.on('executionCompleted', data => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[10]++;
      cov_1ys2a7b2gb().s[39]++;
      this.handleExecutionCompleted(data.execution);
    });
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[40]++;
    this.eventStreamingManager.on('nodeExecutionStarted', data => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[11]++;
      cov_1ys2a7b2gb().s[41]++;
      this.handleNodeExecutionStarted(data.nodeUpdate, data.execution);
    });
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[42]++;
    this.eventStreamingManager.on('nodeExecutionCompleted', data => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[12]++;
      cov_1ys2a7b2gb().s[43]++;
      this.handleNodeExecutionCompleted(data.nodeUpdate, data.execution);
    });
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[44]++;
    this.eventStreamingManager.on('progressUpdate', progressUpdate => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[13]++;
      cov_1ys2a7b2gb().s[45]++;
      this.handleProgressUpdate(progressUpdate);
    });
  }
  /**
   * Handle execution started
   */
  handleExecutionStarted(execution) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[14]++;
    const progress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[46]++, {
      executionId: execution.executionId,
      workflowId: execution.workflowId,
      overallProgress: 0,
      currentPhase: 'initializing',
      nodeProgress: [],
      startTime: execution.startTime,
      performance: {
        averageNodeTime: 0,
        bottlenecks: []
      }
    });
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[47]++;
    this.activeProgressTracking.set(execution.executionId, progress);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[48]++;
    this.emit('progressStarted', {
      progress,
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Handle execution completed
   */
  handleExecutionCompleted(execution) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[15]++;
    const progress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[49]++, this.activeProgressTracking.get(execution.executionId));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[50]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[9][0]++;
      cov_1ys2a7b2gb().s[51]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[9][1]++;
    }
    // Update progress with completion data
    cov_1ys2a7b2gb().s[52]++;
    progress.overallProgress = 100;
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[53]++;
    progress.currentPhase = execution.status === 'success' ?
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[10][0]++, 'completed') :
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[10][1]++, 'failed');
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[54]++;
    progress.actualEndTime = execution.endTime;
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[55]++;
    if (execution.endTime) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[11][0]++;
      cov_1ys2a7b2gb().s[56]++;
      progress.actualDuration = new Date(execution.endTime).getTime() - new Date(progress.startTime).getTime();
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[11][1]++;
    }
    // Calculate performance metrics
    cov_1ys2a7b2gb().s[57]++;
    if (this.config.enablePerformanceTracking) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[12][0]++;
      cov_1ys2a7b2gb().s[58]++;
      this.calculatePerformanceMetrics(progress);
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[12][1]++;
    }
    // Update benchmarks
    cov_1ys2a7b2gb().s[59]++;
    if (this.config.benchmarkingEnabled) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[13][0]++;
      cov_1ys2a7b2gb().s[60]++;
      this.updateWorkflowBenchmarks(progress);
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[13][1]++;
    }
    // Check for alerts
    cov_1ys2a7b2gb().s[61]++;
    this.checkForAlerts(progress);
    // Move to historical data
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[62]++;
    this.historicalExecutions.push({
      ...progress
    });
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[63]++;
    this.activeProgressTracking.delete(execution.executionId);
    // Trim historical data if needed
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[64]++;
    if (this.historicalExecutions.length > this.config.historicalDataLimit) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[14][0]++;
      cov_1ys2a7b2gb().s[65]++;
      this.historicalExecutions = this.historicalExecutions.slice(-this.config.historicalDataLimit);
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[14][1]++;
    }
    cov_1ys2a7b2gb().s[66]++;
    this.emit('progressCompleted', {
      progress,
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Handle node execution started
   */
  handleNodeExecutionStarted(nodeUpdate, execution) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[16]++;
    const progress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[67]++, this.activeProgressTracking.get(execution.executionId));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[68]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[15][0]++;
      cov_1ys2a7b2gb().s[69]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[15][1]++;
    }
    cov_1ys2a7b2gb().s[70]++;
    progress.currentPhase = 'executing';
    // Find or create node progress entry
    let nodeProgress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[71]++, progress.nodeProgress.find(np => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[17]++;
      cov_1ys2a7b2gb().s[72]++;
      return np.nodeId === nodeUpdate.nodeId;
    }));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[73]++;
    if (!nodeProgress) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[16][0]++;
      cov_1ys2a7b2gb().s[74]++;
      nodeProgress = {
        nodeId: nodeUpdate.nodeId,
        nodeName: nodeUpdate.nodeName,
        status: 'running',
        progress: 0,
        startTime: nodeUpdate.startTime
      };
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[75]++;
      progress.nodeProgress.push(nodeProgress);
    } else {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[16][1]++;
      cov_1ys2a7b2gb().s[76]++;
      nodeProgress.status = 'running';
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[77]++;
      nodeProgress.startTime = nodeUpdate.startTime;
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[78]++;
      nodeProgress.progress = 0;
    }
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[79]++;
    this.updateOverallProgress(progress);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[80]++;
    this.emit('nodeProgressStarted', {
      progress,
      nodeProgress,
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Handle node execution completed
   */
  handleNodeExecutionCompleted(nodeUpdate, execution) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[18]++;
    const progress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[81]++, this.activeProgressTracking.get(execution.executionId));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[82]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[17][0]++;
      cov_1ys2a7b2gb().s[83]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[17][1]++;
    }
    // Update node progress
    const nodeProgress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[84]++, progress.nodeProgress.find(np => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[19]++;
      cov_1ys2a7b2gb().s[85]++;
      return np.nodeId === nodeUpdate.nodeId;
    }));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[86]++;
    if (nodeProgress) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[18][0]++;
      cov_1ys2a7b2gb().s[87]++;
      nodeProgress.status = nodeUpdate.status === 'success' ?
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[19][0]++, 'completed') :
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[19][1]++, 'failed');
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[88]++;
      nodeProgress.progress = 100;
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[89]++;
      nodeProgress.endTime = nodeUpdate.endTime;
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[90]++;
      nodeProgress.error = nodeUpdate.error;
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[91]++;
      if (
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[21][0]++, nodeUpdate.startTime) &&
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[21][1]++, nodeUpdate.endTime)) {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[20][0]++;
        cov_1ys2a7b2gb().s[92]++;
        nodeProgress.executionTime = new Date(nodeUpdate.endTime).getTime() - new Date(nodeUpdate.startTime).getTime();
      } else
      /* istanbul ignore next */
      {
        cov_1ys2a7b2gb().b[20][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[18][1]++;
    }
    cov_1ys2a7b2gb().s[93]++;
    this.updateOverallProgress(progress);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[94]++;
    this.updatePerformanceData(progress);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[95]++;
    this.emit('nodeProgressCompleted', {
      progress,
      nodeProgress,
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Handle progress update
   */
  handleProgressUpdate(progressUpdate) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[20]++;
    const progress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[96]++, this.activeProgressTracking.get(progressUpdate.executionId));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[97]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[22][0]++;
      cov_1ys2a7b2gb().s[98]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[22][1]++;
    }
    // Update with new progress information
    cov_1ys2a7b2gb().s[99]++;
    progress.overallProgress = progressUpdate.progress;
    // Update estimated completion time if predictive analytics enabled
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[100]++;
    if (this.config.enablePredictiveAnalytics) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[23][0]++;
      const predictedTime =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[101]++, this.getPredictedCompletionTime(progressUpdate.executionId));
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[102]++;
      if (predictedTime) {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[24][0]++;
        cov_1ys2a7b2gb().s[103]++;
        progress.estimatedEndTime = predictedTime.toISOString();
        /* istanbul ignore next */
        cov_1ys2a7b2gb().s[104]++;
        progress.estimatedDuration = predictedTime.getTime() - new Date(progress.startTime).getTime();
      } else
      /* istanbul ignore next */
      {
        cov_1ys2a7b2gb().b[24][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[23][1]++;
    }
    cov_1ys2a7b2gb().s[105]++;
    this.emit('progressUpdated', {
      progress,
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Update overall progress based on node completion
   */
  updateOverallProgress(progress) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[21]++;
    cov_1ys2a7b2gb().s[106]++;
    if (progress.nodeProgress.length === 0) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[25][0]++;
      cov_1ys2a7b2gb().s[107]++;
      progress.overallProgress = 0;
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[108]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[25][1]++;
    }
    const totalProgress =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[109]++, progress.nodeProgress.reduce((sum, node) => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[22]++;
      cov_1ys2a7b2gb().s[110]++;
      return sum + node.progress;
    }, 0));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[111]++;
    progress.overallProgress = Math.round(totalProgress / progress.nodeProgress.length);
    // Update current phase
    const completedNodes =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[112]++, progress.nodeProgress.filter(np => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[23]++;
      cov_1ys2a7b2gb().s[113]++;
      return /* istanbul ignore next */(cov_1ys2a7b2gb().b[26][0]++, np.status === 'completed') ||
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[26][1]++, np.status === 'failed');
    }).length);
    const totalNodes =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[114]++, progress.nodeProgress.length);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[115]++;
    if (completedNodes === 0) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[27][0]++;
      cov_1ys2a7b2gb().s[116]++;
      progress.currentPhase = 'initializing';
    } else {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[27][1]++;
      cov_1ys2a7b2gb().s[117]++;
      if (completedNodes === totalNodes) {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[28][0]++;
        cov_1ys2a7b2gb().s[118]++;
        progress.currentPhase = 'completing';
      } else {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[28][1]++;
        cov_1ys2a7b2gb().s[119]++;
        progress.currentPhase = 'executing';
      }
    }
  }
  /**
   * Update performance data
   */
  updatePerformanceData(progress) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[24]++;
    const executionTimes =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[120]++, progress.nodeProgress.filter(np => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[25]++;
      cov_1ys2a7b2gb().s[121]++;
      return np.executionTime !== undefined;
    }).map(np => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[26]++;
      cov_1ys2a7b2gb().s[122]++;
      return np.executionTime;
    }));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[123]++;
    if (executionTimes.length > 0) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[29][0]++;
      cov_1ys2a7b2gb().s[124]++;
      progress.performance.averageNodeTime = executionTimes.reduce((sum, time) => {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().f[27]++;
        cov_1ys2a7b2gb().s[125]++;
        return sum + time;
      }, 0) / executionTimes.length;
      // Find slowest and fastest nodes
      const nodeWithTimes =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[126]++, progress.nodeProgress.filter(np => {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().f[28]++;
        cov_1ys2a7b2gb().s[127]++;
        return np.executionTime !== undefined;
      }));
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[128]++;
      if (nodeWithTimes.length > 0) {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[30][0]++;
        const slowestNode =
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().s[129]++, nodeWithTimes.reduce((slowest, current) => {
          /* istanbul ignore next */
          cov_1ys2a7b2gb().f[29]++;
          cov_1ys2a7b2gb().s[130]++;
          return current.executionTime > slowest.executionTime ?
          /* istanbul ignore next */
          (cov_1ys2a7b2gb().b[31][0]++, current) :
          /* istanbul ignore next */
          (cov_1ys2a7b2gb().b[31][1]++, slowest);
        }));
        const fastestNode =
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().s[131]++, nodeWithTimes.reduce((fastest, current) => {
          /* istanbul ignore next */
          cov_1ys2a7b2gb().f[30]++;
          cov_1ys2a7b2gb().s[132]++;
          return current.executionTime < fastest.executionTime ?
          /* istanbul ignore next */
          (cov_1ys2a7b2gb().b[32][0]++, current) :
          /* istanbul ignore next */
          (cov_1ys2a7b2gb().b[32][1]++, fastest);
        }));
        /* istanbul ignore next */
        cov_1ys2a7b2gb().s[133]++;
        progress.performance.slowestNode = slowestNode.nodeName;
        /* istanbul ignore next */
        cov_1ys2a7b2gb().s[134]++;
        progress.performance.fastestNode = fastestNode.nodeName;
        // Identify bottlenecks (nodes taking >2x average time)
        const avgTime =
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().s[135]++, progress.performance.averageNodeTime);
        /* istanbul ignore next */
        cov_1ys2a7b2gb().s[136]++;
        progress.performance.bottlenecks = nodeWithTimes.filter(np => {
          /* istanbul ignore next */
          cov_1ys2a7b2gb().f[31]++;
          cov_1ys2a7b2gb().s[137]++;
          return np.executionTime > avgTime * 2;
        }).map(np => {
          /* istanbul ignore next */
          cov_1ys2a7b2gb().f[32]++;
          cov_1ys2a7b2gb().s[138]++;
          return np.nodeName;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ys2a7b2gb().b[30][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[29][1]++;
    }
  }
  /**
   * Calculate performance metrics
   */
  calculatePerformanceMetrics(progress) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[33]++;
    const nodeExecutionTimes =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[139]++, {});
    let totalExecutionTime =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[140]++, 0);
    let errorCount =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[141]++, 0);
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[142]++;
    progress.nodeProgress.forEach(np => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[34]++;
      cov_1ys2a7b2gb().s[143]++;
      if (np.executionTime) {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[33][0]++;
        cov_1ys2a7b2gb().s[144]++;
        nodeExecutionTimes[np.nodeName] = np.executionTime;
        /* istanbul ignore next */
        cov_1ys2a7b2gb().s[145]++;
        totalExecutionTime += np.executionTime;
      } else
      /* istanbul ignore next */
      {
        cov_1ys2a7b2gb().b[33][1]++;
      }
      cov_1ys2a7b2gb().s[146]++;
      if (np.status === 'failed') {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[34][0]++;
        cov_1ys2a7b2gb().s[147]++;
        errorCount++;
      } else
      /* istanbul ignore next */
      {
        cov_1ys2a7b2gb().b[34][1]++;
      }
    });
    const benchmark =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[148]++, this.workflowBenchmarks.get(progress.workflowId));
    const metrics =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[149]++, {
      executionId: progress.executionId,
      workflowId: progress.workflowId,
      metrics: {
        totalExecutionTime:
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[35][0]++, progress.actualDuration) ||
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[35][1]++, totalExecutionTime),
        nodeExecutionTimes,
        errorCount,
        retryCount: 0 // TODO: Track retries
      },
      benchmarks: {
        averageExecutionTime:
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[36][0]++, benchmark?.averageExecutionTime) ||
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[36][1]++, totalExecutionTime),
        percentile95:
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[37][0]++, benchmark?.percentile95) ||
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[37][1]++, totalExecutionTime),
        percentile99:
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[38][0]++, benchmark?.percentile99) ||
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[38][1]++, totalExecutionTime),
        comparedToAverage: benchmark ?
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[39][0]++, totalExecutionTime / benchmark.averageExecutionTime) :
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[39][1]++, 1)
      }
    });
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[150]++;
    this.performanceData.set(progress.executionId, metrics);
  }
  /**
   * Update workflow benchmarks
   */
  updateWorkflowBenchmarks(progress) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[35]++;
    const workflowId =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[151]++, progress.workflowId);
    let benchmark =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[152]++, this.workflowBenchmarks.get(workflowId));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[153]++;
    if (!benchmark) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[40][0]++;
      cov_1ys2a7b2gb().s[154]++;
      benchmark = {
        workflowId,
        executionCount: 0,
        totalExecutionTime: 0,
        executionTimes: [],
        averageExecutionTime: 0,
        percentile95: 0,
        percentile99: 0,
        lastUpdated: new Date().toISOString()
      };
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[40][1]++;
    }
    cov_1ys2a7b2gb().s[155]++;
    if (progress.actualDuration) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[41][0]++;
      cov_1ys2a7b2gb().s[156]++;
      benchmark.executionCount++;
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[157]++;
      benchmark.totalExecutionTime += progress.actualDuration;
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[158]++;
      benchmark.executionTimes.push(progress.actualDuration);
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[159]++;
      benchmark.averageExecutionTime = benchmark.totalExecutionTime / benchmark.executionCount;
      // Calculate percentiles
      const sortedTimes =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[160]++, [...benchmark.executionTimes].sort((a, b) => {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().f[36]++;
        cov_1ys2a7b2gb().s[161]++;
        return a - b;
      }));
      const p95Index =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[162]++, Math.floor(sortedTimes.length * 0.95));
      const p99Index =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[163]++, Math.floor(sortedTimes.length * 0.99));
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[164]++;
      benchmark.percentile95 =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[42][0]++, sortedTimes[p95Index]) ||
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[42][1]++, benchmark.averageExecutionTime);
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[165]++;
      benchmark.percentile99 =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[43][0]++, sortedTimes[p99Index]) ||
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().b[43][1]++, benchmark.averageExecutionTime);
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[166]++;
      benchmark.lastUpdated = new Date().toISOString();
      // Keep only recent execution times (last 100)
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[167]++;
      if (benchmark.executionTimes.length > 100) {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[44][0]++;
        cov_1ys2a7b2gb().s[168]++;
        benchmark.executionTimes = benchmark.executionTimes.slice(-100);
      } else
      /* istanbul ignore next */
      {
        cov_1ys2a7b2gb().b[44][1]++;
      }
      cov_1ys2a7b2gb().s[169]++;
      this.workflowBenchmarks.set(workflowId, benchmark);
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[41][1]++;
    }
  }
  /**
   * Check for alerts
   */
  checkForAlerts(progress) {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[37]++;
    const alerts =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[170]++, []);
    const benchmark =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[171]++, this.workflowBenchmarks.get(progress.workflowId));
    // Check for slow execution
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[172]++;
    if (
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[46][0]++, benchmark) &&
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().b[46][1]++, progress.actualDuration)) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[45][0]++;
      const slowThreshold =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[173]++, benchmark.averageExecutionTime * this.config.alertThresholds.slowExecutionMultiplier);
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[174]++;
      if (progress.actualDuration > slowThreshold) {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().b[47][0]++;
        cov_1ys2a7b2gb().s[175]++;
        alerts.push({
          type: 'slow_execution',
          executionId: progress.executionId,
          workflowId: progress.workflowId,
          message: `Execution took ${Math.round(progress.actualDuration / 1000)}s, ${Math.round(progress.actualDuration / benchmark.averageExecutionTime * 100)}% of average`,
          severity: progress.actualDuration > slowThreshold * 2 ?
          /* istanbul ignore next */
          (cov_1ys2a7b2gb().b[48][0]++, 'high') :
          /* istanbul ignore next */
          (cov_1ys2a7b2gb().b[48][1]++, 'medium'),
          timestamp: new Date().toISOString(),
          data: {
            actualDuration: progress.actualDuration,
            averageDuration: benchmark.averageExecutionTime
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ys2a7b2gb().b[47][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[45][1]++;
    }
    // Check for high failure rate
    const failedNodes =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[176]++, progress.nodeProgress.filter(np => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[38]++;
      cov_1ys2a7b2gb().s[177]++;
      return np.status === 'failed';
    }).length);
    const failureRate =
    /* istanbul ignore next */
    (cov_1ys2a7b2gb().s[178]++, failedNodes / Math.max(progress.nodeProgress.length, 1));
    /* istanbul ignore next */
    cov_1ys2a7b2gb().s[179]++;
    if (failureRate > this.config.alertThresholds.highFailureRate) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[49][0]++;
      cov_1ys2a7b2gb().s[180]++;
      alerts.push({
        type: 'high_failure_rate',
        executionId: progress.executionId,
        workflowId: progress.workflowId,
        message: `High failure rate: ${Math.round(failureRate * 100)}% of nodes failed`,
        severity: failureRate > 0.5 ?
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[50][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[50][1]++, 'high'),
        timestamp: new Date().toISOString(),
        data: {
          failureRate,
          failedNodes,
          totalNodes: progress.nodeProgress.length
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[49][1]++;
    }
    // Emit alerts
    cov_1ys2a7b2gb().s[181]++;
    alerts.forEach(alert => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[39]++;
      cov_1ys2a7b2gb().s[182]++;
      this.emit('alert', alert);
    });
  }
  /**
   * Start periodic progress updates
   */
  startProgressUpdates() {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[40]++;
    cov_1ys2a7b2gb().s[183]++;
    this.progressUpdateTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().f[41]++;
      const activeExecutions =
      /* istanbul ignore next */
      (cov_1ys2a7b2gb().s[184]++, Array.from(this.activeProgressTracking.values()));
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[185]++;
      activeExecutions.forEach(progress => {
        /* istanbul ignore next */
        cov_1ys2a7b2gb().f[42]++;
        cov_1ys2a7b2gb().s[186]++;
        // Update estimated times for predictive analytics
        if (
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[52][0]++, this.config.enablePredictiveAnalytics) &&
        /* istanbul ignore next */
        (cov_1ys2a7b2gb().b[52][1]++, progress.currentPhase === 'executing')) {
          /* istanbul ignore next */
          cov_1ys2a7b2gb().b[51][0]++;
          const predictedTime =
          /* istanbul ignore next */
          (cov_1ys2a7b2gb().s[187]++, this.getPredictedCompletionTime(progress.executionId));
          /* istanbul ignore next */
          cov_1ys2a7b2gb().s[188]++;
          if (predictedTime) {
            /* istanbul ignore next */
            cov_1ys2a7b2gb().b[53][0]++;
            cov_1ys2a7b2gb().s[189]++;
            progress.estimatedEndTime = predictedTime.toISOString();
            /* istanbul ignore next */
            cov_1ys2a7b2gb().s[190]++;
            progress.estimatedDuration = predictedTime.getTime() - new Date(progress.startTime).getTime();
          } else
          /* istanbul ignore next */
          {
            cov_1ys2a7b2gb().b[53][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1ys2a7b2gb().b[51][1]++;
        }
        cov_1ys2a7b2gb().s[191]++;
        this.emit('progressTick', {
          progress,
          timestamp: new Date().toISOString()
        });
      });
    }, this.config.progressUpdateInterval);
  }
  /**
   * Stop progress monitor
   */
  stop() {
    /* istanbul ignore next */
    cov_1ys2a7b2gb().f[43]++;
    cov_1ys2a7b2gb().s[192]++;
    if (this.progressUpdateTimer) {
      /* istanbul ignore next */
      cov_1ys2a7b2gb().b[54][0]++;
      cov_1ys2a7b2gb().s[193]++;
      clearInterval(this.progressUpdateTimer);
      /* istanbul ignore next */
      cov_1ys2a7b2gb().s[194]++;
      this.progressUpdateTimer = null;
    } else
    /* istanbul ignore next */
    {
      cov_1ys2a7b2gb().b[54][1]++;
    }
  }
}
/**
 * Create progress monitor with default configuration
 */
export function createProgressMonitor(eventStreamingManager, options =
/* istanbul ignore next */
(cov_1ys2a7b2gb().b[55][0]++, {})) {
  /* istanbul ignore next */
  cov_1ys2a7b2gb().f[44]++;
  const config =
  /* istanbul ignore next */
  (cov_1ys2a7b2gb().s[195]++, {
    enablePredictiveAnalytics: true,
    enablePerformanceTracking: true,
    historicalDataLimit: 1000,
    progressUpdateInterval: 1000,
    benchmarkingEnabled: true,
    alertThresholds: {
      slowExecutionMultiplier: 2.0,
      highFailureRate: 0.3,
      maxExecutionTime: 300000 // 5 minutes
    },
    ...options
  });
  /* istanbul ignore next */
  cov_1ys2a7b2gb().s[196]++;
  return new ProgressMonitor(eventStreamingManager, config);
}
/**
 * Default progress monitor configuration
 */
export const DEFAULT_PROGRESS_CONFIG =
/* istanbul ignore next */
(cov_1ys2a7b2gb().s[197]++, {
  enablePredictiveAnalytics: true,
  enablePerformanceTracking: true,
  historicalDataLimit: 1000,
  progressUpdateInterval: 1000,
  benchmarkingEnabled: true,
  alertThresholds: {
    slowExecutionMultiplier: 2.0,
    highFailureRate: 0.3,
    maxExecutionTime: 300000
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,