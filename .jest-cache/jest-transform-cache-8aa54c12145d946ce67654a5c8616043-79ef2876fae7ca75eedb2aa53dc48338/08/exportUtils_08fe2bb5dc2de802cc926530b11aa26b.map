{"version":3,"names":["cov_2ps4yyv4hd","actualCoverage","s","ExportUtils","client","constructor","f","exportWorkflow","workflowId","_options","b","workflow","getWorkflow","workflowExport","id","name","active","nodes","connections","settings","staticData","tags","pinData","meta","exportedAt","Date","toISOString","credentials","extractCredentialIds","exportWorkflows","workflowIds","options","exports","push","error","console","warn","exportCredential","credentialId","credential","getCredential","credentialExport","type","homeProject","scopes","sanitized","includeSecrets","data","exportCredentials","credentialIds","exportProject","projectId","project","getProject","workflowsResponse","getWorkflows","workflows","map","w","includeCredentials","credentialsResponse","getCredentials","c","variablesResponse","getVariables","projectVariables","filter","v","key","startsWith","projectExport","undefined","variables","exportInstance","exportTime","projectsResponse","getProjects","projects","allWorkflowsResponse","projectWorkflowIds","Set","flatMap","p","globalWorkflowIds","has","globalWorkflows","globalCredentials","allCredentialsResponse","projectCredentialIds","globalCredentialIds","projectVariableKeys","globalVariables","fullExport","metadata","sourceInstance","projectCount","length","workflowCount","reduce","acc","credentialCount","exportWorkflowsByTags","filteredWorkflows","some","tag","includes","generateExportSummary","exportData","Array","isArray","size","node","credentialType","add","from"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/exportUtils.ts"],"sourcesContent":["import { N8nClient } from '../client/n8nClient.js';\nimport { N8nVariable } from '../types/n8n.js';\n\nexport interface ExportOptions {\n  includeCredentials?: boolean;\n  includeSecrets?: boolean;\n  projectId?: string;\n  tagFilter?: string[];\n}\n\nexport interface WorkflowExport {\n  id: string;\n  name: string;\n  active: boolean;\n  nodes: any[];\n  connections: Record<string, unknown>;\n  settings?: Record<string, unknown>;\n  staticData?: Record<string, unknown>;\n  tags?: string[];\n  pinData?: Record<string, unknown>;\n  meta?: Record<string, unknown>;\n  exportedAt: string;\n  credentials?: string[]; // Array of credential IDs referenced\n}\n\nexport interface CredentialExport {\n  id: string;\n  name: string;\n  type: string;\n  data?: Record<string, unknown>; // Only included if includeSecrets is true\n  homeProject?: {\n    id: string;\n    name: string;\n    type: string;\n  };\n  scopes?: string[];\n  exportedAt: string;\n  sanitized: boolean; // Indicates if sensitive data was removed\n}\n\nexport interface ProjectExport {\n  id: string;\n  name: string;\n  type: string;\n  exportedAt: string;\n  workflows?: WorkflowExport[];\n  credentials?: CredentialExport[];\n  variables?: N8nVariable[];\n}\n\nexport interface FullExport {\n  metadata: {\n    exportedAt: string;\n    sourceInstance: string;\n    n8nVersion?: string;\n    includeSecrets: boolean;\n    projectCount: number;\n    workflowCount: number;\n    credentialCount: number;\n  };\n  projects: ProjectExport[];\n  globalWorkflows: WorkflowExport[]; // Workflows not in any project\n  globalCredentials: CredentialExport[]; // Credentials not in any project\n  variables: N8nVariable[];\n}\n\nexport class ExportUtils {\n  constructor(private client: N8nClient) {}\n\n  /**\n   * Export a single workflow with its dependencies\n   */\n  async exportWorkflow(workflowId: string, _options: ExportOptions = {}): Promise<WorkflowExport> {\n    const workflow = await this.client.getWorkflow(workflowId);\n\n    const workflowExport: WorkflowExport = {\n      id: workflow.id,\n      name: workflow.name,\n      active: workflow.active,\n      nodes: workflow.nodes || [],\n      connections: workflow.connections,\n      settings: workflow.settings,\n      staticData: workflow.staticData,\n      tags: workflow.tags,\n      pinData: workflow.pinData,\n      meta: workflow.meta,\n      exportedAt: new Date().toISOString(),\n      credentials: this.extractCredentialIds(workflow.nodes || []),\n    };\n\n    return workflowExport;\n  }\n\n  /**\n   * Export multiple workflows\n   */\n  async exportWorkflows(\n    workflowIds: string[],\n    options: ExportOptions = {}\n  ): Promise<WorkflowExport[]> {\n    const exports: WorkflowExport[] = [];\n\n    for (const workflowId of workflowIds) {\n      try {\n        const workflowExport = await this.exportWorkflow(workflowId, options);\n        exports.push(workflowExport);\n      } catch (error) {\n        console.warn(`Failed to export workflow ${workflowId}:`, error);\n      }\n    }\n\n    return exports;\n  }\n\n  /**\n   * Export a credential (with security considerations)\n   */\n  async exportCredential(\n    credentialId: string,\n    options: ExportOptions = {}\n  ): Promise<CredentialExport> {\n    const credential = await this.client.getCredential(credentialId);\n\n    const credentialExport: CredentialExport = {\n      id: credential.id,\n      name: credential.name,\n      type: credential.type,\n      homeProject: credential.homeProject,\n      scopes: credential.scopes,\n      exportedAt: new Date().toISOString(),\n      sanitized: !options.includeSecrets,\n    };\n\n    // Only include sensitive data if explicitly requested\n    if (options.includeSecrets && credential.data) {\n      credentialExport.data = credential.data;\n    }\n\n    return credentialExport;\n  }\n\n  /**\n   * Export multiple credentials\n   */\n  async exportCredentials(\n    credentialIds: string[],\n    options: ExportOptions = {}\n  ): Promise<CredentialExport[]> {\n    const exports: CredentialExport[] = [];\n\n    for (const credentialId of credentialIds) {\n      try {\n        const credentialExport = await this.exportCredential(credentialId, options);\n        exports.push(credentialExport);\n      } catch (error) {\n        console.warn(`Failed to export credential ${credentialId}:`, error);\n      }\n    }\n\n    return exports;\n  }\n\n  /**\n   * Export a complete project with all its resources\n   */\n  async exportProject(projectId: string, options: ExportOptions = {}): Promise<ProjectExport> {\n    const project = await this.client.getProject(projectId);\n\n    // Get all workflows in the project\n    const workflowsResponse = await this.client.getWorkflows({ projectId });\n    const workflows = await this.exportWorkflows(\n      workflowsResponse.data.map(w => w.id),\n      options\n    );\n\n    let credentials: CredentialExport[] = [];\n    if (options.includeCredentials) {\n      // Get all credentials in the project\n      const credentialsResponse = await this.client.getCredentials({ projectId });\n      credentials = await this.exportCredentials(\n        credentialsResponse.data.map(c => c.id),\n        options\n      );\n    }\n\n    // Get project variables\n    const variablesResponse = await this.client.getVariables();\n    const projectVariables = variablesResponse.data.filter(\n      v => v.key.startsWith(`project_${projectId}_`) // Assuming project-scoped variables have this prefix\n    );\n\n    const projectExport: ProjectExport = {\n      id: project.id,\n      name: project.name,\n      type: project.type,\n      exportedAt: new Date().toISOString(),\n      workflows,\n      credentials: options.includeCredentials ? credentials : undefined,\n      variables: projectVariables,\n    };\n\n    return projectExport;\n  }\n\n  /**\n   * Export the entire n8n instance\n   */\n  async exportInstance(options: ExportOptions = {}): Promise<FullExport> {\n    const exportTime = new Date().toISOString();\n\n    // Get all projects\n    const projectsResponse = await this.client.getProjects();\n    const projects: ProjectExport[] = [];\n\n    for (const project of projectsResponse.data) {\n      try {\n        const projectExport = await this.exportProject(project.id, options);\n        projects.push(projectExport);\n      } catch (error) {\n        console.warn(`Failed to export project ${project.id}:`, error);\n      }\n    }\n\n    // Get workflows not in any project (global workflows)\n    const allWorkflowsResponse = await this.client.getWorkflows();\n    const projectWorkflowIds = new Set(projects.flatMap(p => p.workflows?.map(w => w.id) || []));\n    const globalWorkflowIds = allWorkflowsResponse.data\n      .filter(w => !projectWorkflowIds.has(w.id))\n      .map(w => w.id);\n\n    const globalWorkflows = await this.exportWorkflows(globalWorkflowIds, options);\n\n    // Get credentials not in any project (global credentials)\n    let globalCredentials: CredentialExport[] = [];\n    if (options.includeCredentials) {\n      const allCredentialsResponse = await this.client.getCredentials();\n      const projectCredentialIds = new Set(\n        projects.flatMap(p => p.credentials?.map(c => c.id) || [])\n      );\n      const globalCredentialIds = allCredentialsResponse.data\n        .filter(c => !projectCredentialIds.has(c.id))\n        .map(c => c.id);\n\n      globalCredentials = await this.exportCredentials(globalCredentialIds, options);\n    }\n\n    // Get all variables\n    const variablesResponse = await this.client.getVariables();\n    const projectVariableKeys = new Set(projects.flatMap(p => p.variables?.map(v => v.key) || []));\n    const globalVariables = variablesResponse.data.filter(v => !projectVariableKeys.has(v.key));\n\n    const fullExport: FullExport = {\n      metadata: {\n        exportedAt: exportTime,\n        sourceInstance: 'n8n-instance', // Could be made configurable\n        includeSecrets: options.includeSecrets || false,\n        projectCount: projects.length,\n        workflowCount:\n          projects.reduce((acc, p) => acc + (p.workflows?.length || 0), 0) + globalWorkflows.length,\n        credentialCount: options.includeCredentials\n          ? projects.reduce((acc, p) => acc + (p.credentials?.length || 0), 0) +\n            globalCredentials.length\n          : 0,\n      },\n      projects,\n      globalWorkflows,\n      globalCredentials,\n      variables: globalVariables,\n    };\n\n    return fullExport;\n  }\n\n  /**\n   * Export workflows by tag filter\n   */\n  async exportWorkflowsByTags(\n    tags: string[],\n    options: ExportOptions = {}\n  ): Promise<WorkflowExport[]> {\n    const workflowsResponse = await this.client.getWorkflows();\n    const filteredWorkflows = workflowsResponse.data.filter(\n      workflow => workflow.tags && workflow.tags.some(tag => tags.includes(tag))\n    );\n\n    return this.exportWorkflows(\n      filteredWorkflows.map(w => w.id),\n      options\n    );\n  }\n\n  /**\n   * Generate export summary\n   */\n  generateExportSummary(exportData: FullExport | ProjectExport | WorkflowExport[]): string {\n    if ('metadata' in exportData) {\n      // Full instance export\n      const metadata = exportData.metadata;\n      return `Export Summary:\n- Exported at: ${metadata.exportedAt}\n- Projects: ${metadata.projectCount}\n- Workflows: ${metadata.workflowCount}\n- Credentials: ${metadata.credentialCount}\n- Secrets included: ${metadata.includeSecrets ? 'Yes' : 'No'}`;\n    } else if ('workflows' in exportData) {\n      // Project export\n      return `Project Export Summary:\n- Project: ${exportData.name} (${exportData.type})\n- Workflows: ${exportData.workflows?.length || 0}\n- Credentials: ${exportData.credentials?.length || 0}\n- Variables: ${exportData.variables?.length || 0}\n- Exported at: ${exportData.exportedAt}`;\n    } else if (Array.isArray(exportData)) {\n      // Workflow array export\n      const workflowCount = exportData.length;\n      const credentialIds = new Set(exportData.flatMap(w => w.credentials || []));\n      return `Workflow Export Summary:\n- Workflows: ${workflowCount}\n- Referenced credentials: ${credentialIds.size}\n- Exported at: ${exportData.length > 0 ? exportData[0]?.exportedAt || new Date().toISOString() : new Date().toISOString()}`;\n    } else {\n      return 'Unknown export data format';\n    }\n  }\n\n  /**\n   * Extract credential IDs from workflow nodes\n   */\n  private extractCredentialIds(nodes: any[]): string[] {\n    const credentialIds = new Set<string>();\n\n    for (const node of nodes) {\n      if (node.credentials) {\n        for (const credentialType in node.credentials) {\n          const credential = node.credentials[credentialType];\n          if (credential && credential.id) {\n            credentialIds.add(credential.id);\n          }\n        }\n      }\n    }\n\n    return Array.from(credentialIds);\n  }\n}\n"],"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","ignoreList":[]}