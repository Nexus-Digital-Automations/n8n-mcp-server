{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/test/monitoring.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/test/monitoring.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, jest } from '@jest/globals';\nimport { MonitoringClient } from '../src/client/monitoringClient.js';\nimport { N8nClient } from '../src/client/n8nClient.js';\nimport {\n  SystemResourceUsage,\n  SystemDiagnostics,\n  HealthCheckResponse,\n  MetricsResponse,\n} from '../src/types/monitoringTypes.js';\n\n// Create a proper mock for N8nClient with explicit typing\nconst mockGetWorkflows = jest.fn() as jest.MockedFunction<any>;\nconst mockGetWorkflow = jest.fn() as jest.MockedFunction<any>;\nconst mockGetExecutions = jest.fn() as jest.MockedFunction<any>;\n\nconst mockN8nClient = {\n  getWorkflows: mockGetWorkflows,\n  getWorkflow: mockGetWorkflow,\n  getExecutions: mockGetExecutions,\n} as unknown as N8nClient;\n\ndescribe('Monitoring Client', () => {\n  let monitoringClient: MonitoringClient;\n  const baseUrl = 'http://localhost:5678';\n  const apiKey = 'test-api-key';\n\n  beforeAll(() => {\n    monitoringClient = new MonitoringClient(mockN8nClient, baseUrl, apiKey);\n  });\n\n  describe('System Resource Usage', () => {\n    it('should return current system resource usage', () => {\n      const usage = monitoringClient.getSystemResourceUsage();\n      \n      expect(usage).toBeDefined();\n      expect(usage.timestamp).toBeDefined();\n      expect(usage.cpu).toBeDefined();\n      expect(usage.memory).toBeDefined();\n      expect(usage.disk).toBeDefined();\n      expect(usage.network).toBeDefined();\n      expect(usage.uptime).toBeGreaterThan(0);\n      \n      // CPU checks\n      expect(usage.cpu.totalUsage).toBeGreaterThanOrEqual(0);\n      expect(usage.cpu.totalUsage).toBeLessThanOrEqual(100);\n      expect(usage.cpu.coreCount).toBeGreaterThan(0);\n      expect(Array.isArray(usage.cpu.loadAverage)).toBe(true);\n      \n      // Memory checks\n      expect(usage.memory.totalMemory).toBeGreaterThan(0);\n      expect(usage.memory.freeMemory).toBeGreaterThanOrEqual(0);\n      expect(usage.memory.usedMemory).toBeGreaterThan(0);\n      expect(usage.memory.utilization).toBeGreaterThanOrEqual(0);\n      expect(usage.memory.utilization).toBeLessThanOrEqual(100);\n      expect(usage.memory.processMemory.heapUsed).toBeGreaterThan(0);\n      expect(usage.memory.processMemory.heapTotal).toBeGreaterThan(0);\n      expect(usage.memory.processMemory.rss).toBeGreaterThan(0);\n    });\n\n    it('should have consistent memory calculations', () => {\n      const usage = monitoringClient.getSystemResourceUsage();\n      \n      // Total memory should equal used + free\n      expect(usage.memory.totalMemory).toBeCloseTo(\n        usage.memory.usedMemory + usage.memory.freeMemory,\n        -3 // Allow for some variance in bytes\n      );\n      \n      // Utilization should match calculated percentage\n      const calculatedUtilization = (usage.memory.usedMemory / usage.memory.totalMemory) * 100;\n      expect(usage.memory.utilization).toBeCloseTo(calculatedUtilization, 1);\n    });\n  });\n\n  describe('Health Check Functions', () => {\n    it('should perform manual health check when API unavailable', async () => {\n      // Mock getWorkflows to simulate database connectivity\n      mockGetWorkflows.mockResolvedValue({ data: [] });\n      \n      const healthCheck = await monitoringClient.getHealthCheck();\n      \n      expect(healthCheck).toBeDefined();\n      expect(healthCheck.status).toBeDefined();\n      expect(['healthy', 'warning', 'critical', 'degraded']).toContain(healthCheck.status);\n      expect(healthCheck.database).toBeDefined();\n      expect(healthCheck.database.status).toBeDefined();\n      expect(healthCheck.database.responseTime).toBeGreaterThanOrEqual(0);\n      expect(healthCheck.filesystem).toBeDefined();\n      expect(healthCheck.uptime).toBeGreaterThan(0);\n    });\n\n    it('should handle database connection errors', async () => {\n      // Mock getWorkflows to throw an error\n      mockGetWorkflows.mockRejectedValue(new Error('Connection failed'));\n      \n      const healthCheck = await monitoringClient.getHealthCheck();\n      \n      expect(healthCheck.status).toBe('critical');\n      expect(healthCheck.database.status).toBe('error');\n      expect(healthCheck.filesystem.status).toBe('error');\n    });\n  });\n\n  describe('Connectivity Testing', () => {\n    it('should test connectivity successfully', async () => {\n      mockGetWorkflows.mockResolvedValue({ data: [] });\n      \n      const result = await monitoringClient.testConnectivity();\n      \n      expect(result).toBeDefined();\n      expect(result.success).toBe(true);\n      expect(result.responseTime).toBeGreaterThan(0);\n      expect(result.error).toBeUndefined();\n    });\n\n    it('should handle connectivity failures', async () => {\n      mockGetWorkflows.mockRejectedValue(new Error('Network error'));\n      \n      const result = await monitoringClient.testConnectivity();\n      \n      expect(result.success).toBe(false);\n      expect(result.responseTime).toBeGreaterThan(0);\n      expect(result.error).toBeDefined();\n      expect(result.error).toContain('Network error');\n    });\n  });\n\n  describe('System Diagnostics', () => {\n    it('should generate comprehensive system diagnostics', async () => {\n      mockGetWorkflows.mockResolvedValue({ data: [] });\n      \n      const diagnostics = await monitoringClient.getSystemDiagnostics();\n      \n      expect(diagnostics).toBeDefined();\n      expect(diagnostics.timestamp).toBeDefined();\n      expect(diagnostics.overall).toBeDefined();\n      expect(diagnostics.overall.status).toBeDefined();\n      expect(Array.isArray(diagnostics.overall.issues)).toBe(true);\n      expect(Array.isArray(diagnostics.overall.recommendations)).toBe(true);\n      \n      expect(diagnostics.connectivity).toBeDefined();\n      expect(typeof diagnostics.connectivity.apiConnectivity).toBe('boolean');\n      expect(diagnostics.connectivity.responseTime).toBeGreaterThanOrEqual(0);\n      \n      expect(diagnostics.resources).toBeDefined();\n      expect(diagnostics.environment).toBeDefined();\n      expect(diagnostics.environment.nodeVersion).toBeDefined();\n      expect(diagnostics.environment.platform).toBeDefined();\n      expect(diagnostics.environment.architecture).toBeDefined();\n      expect(diagnostics.environment.uptime).toBeGreaterThan(0);\n    });\n\n    it('should provide recommendations based on resource usage', async () => {\n      mockGetWorkflows.mockResolvedValue({ data: [] });\n      \n      // Mock high resource usage by modifying the method temporarily\n      const originalMethod = monitoringClient.getSystemResourceUsage;\n      monitoringClient.getSystemResourceUsage = () => ({\n        ...originalMethod.call(monitoringClient),\n        memory: {\n          ...originalMethod.call(monitoringClient).memory,\n          utilization: 90, // High memory usage\n        },\n        cpu: {\n          ...originalMethod.call(monitoringClient).cpu,\n          totalUsage: 85, // High CPU usage\n        },\n      });\n      \n      const diagnostics = await monitoringClient.getSystemDiagnostics();\n      \n      expect(diagnostics.overall.issues.length).toBeGreaterThan(0);\n      expect(diagnostics.overall.recommendations.length).toBeGreaterThan(0);\n      \n      // Restore original method\n      monitoringClient.getSystemResourceUsage = originalMethod;\n    });\n  });\n\n  describe('Metrics Collection', () => {\n    it('should collect comprehensive metrics', async () => {\n      // Mock workflow and execution data\n      const mockWorkflows = [\n        { id: '1', name: 'Workflow 1', active: true, nodes: [{ id: 'node1', type: 'test' }] },\n        { id: '2', name: 'Workflow 2', active: false, nodes: [] },\n      ];\n      \n      const mockExecutions = [\n        { \n          id: '1', \n          workflowId: '1', \n          finished: true, \n          startedAt: new Date(Date.now() - 1000).toISOString(),\n          stoppedAt: undefined \n        },\n        { \n          id: '2', \n          workflowId: '1', \n          finished: true, \n          startedAt: new Date(Date.now() - 2000).toISOString(),\n          stoppedAt: new Date(Date.now() - 1500).toISOString()\n        },\n      ];\n      \n      mockGetWorkflows.mockResolvedValue({ data: mockWorkflows });\n      mockGetExecutions.mockResolvedValue({ data: mockExecutions });\n      \n      const metrics = await monitoringClient.getMetrics();\n      \n      expect(metrics).toBeDefined();\n      expect(metrics.timestamp).toBeDefined();\n      \n      // Check execution metrics\n      expect(metrics.executions).toBeDefined();\n      expect(metrics.executions.total).toBe(2);\n      expect(metrics.executions.successful).toBe(1);\n      expect(metrics.executions.failed).toBe(1);\n      \n      // Check workflow metrics\n      expect(metrics.workflows).toBeDefined();\n      expect(metrics.workflows.total).toBe(2);\n      expect(metrics.workflows.active).toBe(1);\n      expect(metrics.workflows.inactive).toBe(1);\n      expect(metrics.workflows.withIssues).toBe(1); // Workflow with no nodes\n      \n      // Check performance metrics\n      expect(metrics.performance).toBeDefined();\n      expect(metrics.performance.averageExecutionTime).toBeGreaterThanOrEqual(0);\n      expect(metrics.performance.throughput).toBeGreaterThanOrEqual(0);\n      expect(metrics.performance.errorRate).toBeGreaterThanOrEqual(0);\n      expect(metrics.performance.errorRate).toBeLessThanOrEqual(100);\n      \n      // Check system metrics\n      expect(metrics.system).toBeDefined();\n    });\n  });\n\n  describe('Workflow Diagnostics', () => {\n    it('should analyze workflow health', async () => {\n      const mockWorkflow = {\n        id: 'test-workflow',\n        name: 'Test Workflow',\n        active: true,\n        nodes: [\n          { id: 'node1', name: 'Start', type: 'manual', disabled: false },\n          { id: 'node2', name: 'Process', type: 'function', disabled: false },\n        ],\n      };\n      \n      const mockExecutions = [\n        {\n          id: '1',\n          workflowId: 'test-workflow',\n          finished: true,\n          startedAt: new Date(Date.now() - 5000).toISOString(),\n          stoppedAt: undefined, // Success\n        },\n        {\n          id: '2',\n          workflowId: 'test-workflow',\n          finished: true,\n          startedAt: new Date(Date.now() - 10000).toISOString(),\n          stoppedAt: new Date(Date.now() - 8000).toISOString(), // Failed\n        },\n      ];\n      \n      mockGetWorkflow.mockResolvedValue(mockWorkflow);\n      mockGetExecutions.mockResolvedValue({ data: mockExecutions });\n      \n      const diagnostics = await monitoringClient.getWorkflowDiagnostics('test-workflow');\n      \n      expect(diagnostics).toBeDefined();\n      expect(diagnostics.workflowId).toBe('test-workflow');\n      expect(diagnostics.workflowName).toBe('Test Workflow');\n      \n      expect(diagnostics.health).toBeDefined();\n      expect(['healthy', 'warning', 'critical']).toContain(diagnostics.health.status);\n      expect(Array.isArray(diagnostics.health.issues)).toBe(true);\n      expect(Array.isArray(diagnostics.health.recommendations)).toBe(true);\n      \n      expect(diagnostics.performance).toBeDefined();\n      expect(diagnostics.performance.successRate).toBe(50); // 1 success out of 2\n      expect(Array.isArray(diagnostics.performance.recentExecutions)).toBe(true);\n      expect(diagnostics.performance.recentExecutions).toHaveLength(2);\n      \n      expect(diagnostics.nodes).toBeDefined();\n      expect(diagnostics.nodes).toHaveLength(2);\n      expect(diagnostics.nodes[0].id).toBe('node1');\n      expect(diagnostics.nodes[1].id).toBe('node2');\n    });\n  });\n});\n\ndescribe('Monitoring Utility Functions', () => {\n  describe('Data Validation', () => {\n    it('should validate system resource usage structure', () => {\n      const mockClient = new MonitoringClient(mockN8nClient, 'http://test', 'key');\n      const usage = mockClient.getSystemResourceUsage();\n      \n      // Required properties\n      const requiredProps = [\n        'cpu', 'memory', 'disk', 'network', 'uptime', 'timestamp'\n      ];\n      \n      requiredProps.forEach(prop => {\n        expect(usage).toHaveProperty(prop);\n      });\n      \n      // CPU structure\n      expect(usage.cpu).toHaveProperty('totalUsage');\n      expect(usage.cpu).toHaveProperty('processUsage');\n      expect(usage.cpu).toHaveProperty('loadAverage');\n      expect(usage.cpu).toHaveProperty('coreCount');\n      \n      // Memory structure\n      expect(usage.memory).toHaveProperty('totalMemory');\n      expect(usage.memory).toHaveProperty('freeMemory');\n      expect(usage.memory).toHaveProperty('usedMemory');\n      expect(usage.memory).toHaveProperty('processMemory');\n      expect(usage.memory).toHaveProperty('utilization');\n      \n      expect(usage.memory.processMemory).toHaveProperty('heapUsed');\n      expect(usage.memory.processMemory).toHaveProperty('heapTotal');\n      expect(usage.memory.processMemory).toHaveProperty('external');\n      expect(usage.memory.processMemory).toHaveProperty('rss');\n    });\n\n    it('should produce valid timestamp format', () => {\n      const mockClient = new MonitoringClient(mockN8nClient, 'http://test', 'key');\n      const usage = mockClient.getSystemResourceUsage();\n      \n      expect(() => new Date(usage.timestamp)).not.toThrow();\n      expect(new Date(usage.timestamp).getTime()).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle missing required parameters gracefully', () => {\n      // Test client creation with invalid parameters\n      expect(() => {\n        new MonitoringClient(null as any, '', '');\n      }).not.toThrow();\n    });\n\n    it('should handle network timeouts appropriately', async () => {\n      mockGetWorkflows.mockImplementation(() => {\n        return new Promise((_, reject) => {\n          setTimeout(() => reject(new Error('Timeout')), 1000);\n        });\n      });\n      \n      const mockClient = new MonitoringClient(mockN8nClient, 'http://test', 'key');\n      \n      const result = await mockClient.testConnectivity();\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Timeout');\n    });\n  });\n\n  describe('Performance Calculations', () => {\n    it('should calculate percentages correctly', () => {\n      // Test percentage calculations used in monitoring\n      const total = 100;\n      const used = 75;\n      const percentage = (used / total) * 100;\n      \n      expect(percentage).toBe(75);\n      expect(percentage).toBeGreaterThanOrEqual(0);\n      expect(percentage).toBeLessThanOrEqual(100);\n    });\n\n    it('should handle division by zero in calculations', () => {\n      // Test safe division\n      const safeDivision = (numerator: number, denominator: number) => {\n        return denominator === 0 ? 0 : numerator / denominator;\n      };\n      \n      expect(safeDivision(100, 0)).toBe(0);\n      expect(safeDivision(100, 10)).toBe(10);\n      expect(safeDivision(0, 10)).toBe(0);\n    });\n  });\n});\n\nafterAll(() => {\n  jest.restoreAllMocks();\n});"],"version":3}