7c7940fe509b90833abcda0b18738d18
/* istanbul ignore next */
function cov_1mruj6r9v4() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionBridge.ts";
  var hash = "aef170acf85991a0fb26cab1db2f140fe3b773a7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionBridge.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 30
        }
      },
      "1": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "2": {
        start: {
          line: 8,
          column: 25
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 27
        }
      },
      "4": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 53
        }
      },
      "5": {
        start: {
          line: 17,
          column: 26
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "6": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "7": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 60
        }
      },
      "8": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 22,
          column: 130
        }
      },
      "9": {
        start: {
          line: 24,
          column: 32
        },
        end: {
          line: 24,
          column: 89
        }
      },
      "10": {
        start: {
          line: 26,
          column: 31
        },
        end: {
          line: 26,
          column: 93
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 31,
          column: 14
        }
      },
      "12": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 34,
          column: 58
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 50,
          column: 14
        }
      },
      "14": {
        start: {
          line: 57,
          column: 35
        },
        end: {
          line: 57,
          column: 79
        }
      },
      "15": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "16": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "17": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 23
        }
      },
      "18": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 51
        }
      },
      "19": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 72,
          column: 25
        }
      },
      "20": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 25
        }
      },
      "21": {
        start: {
          line: 73,
          column: 39
        },
        end: {
          line: 73,
          column: 86
        }
      },
      "22": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 64
        }
      },
      "23": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "24": {
        start: {
          line: 82,
          column: 35
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "25": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "26": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 92
        }
      },
      "27": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 42
        }
      },
      "28": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 50
        }
      },
      "29": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 69
        }
      },
      "30": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 61
        }
      },
      "31": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 43
        }
      },
      "32": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 124
        }
      },
      "33": {
        start: {
          line: 106,
          column: 32
        },
        end: {
          line: 106,
          column: 69
        }
      },
      "34": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "35": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 42
        }
      },
      "36": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 118,
          column: 35
        }
      },
      "37": {
        start: {
          line: 112,
          column: 31
        },
        end: {
          line: 112,
          column: 64
        }
      },
      "38": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "39": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 47
        }
      },
      "40": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 53
        }
      },
      "41": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 53
        }
      },
      "42": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 55
        }
      },
      "43": {
        start: {
          line: 125,
          column: 28
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "44": {
        start: {
          line: 134,
          column: 25
        },
        end: {
          line: 141,
          column: 10
        }
      },
      "45": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "46": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 100
        }
      },
      "47": {
        start: {
          line: 145,
          column: 29
        },
        end: {
          line: 145,
          column: 50
        }
      },
      "48": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "49": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 58
        }
      },
      "50": {
        start: {
          line: 150,
          column: 21
        },
        end: {
          line: 150,
          column: 65
        }
      },
      "51": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "52": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 44
        }
      },
      "53": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 35
        }
      },
      "54": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 160,
          column: 26
        }
      },
      "55": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "56": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 165,
          column: 17
        }
      },
      "57": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 82
        }
      },
      "58": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 22
        }
      },
      "59": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 170,
          column: 17
        }
      },
      "60": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 67
        }
      },
      "61": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 22
        }
      },
      "62": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "63": {
        start: {
          line: 174,
          column: 36
        },
        end: {
          line: 174,
          column: 127
        }
      },
      "64": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 66
        }
      },
      "65": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 22
        }
      },
      "66": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 23
        }
      },
      "67": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 78
        }
      },
      "68": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "69": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 25
        }
      },
      "70": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "71": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "72": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 200,
          column: 18
        }
      },
      "73": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "74": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 206,
          column: 18
        }
      },
      "75": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "76": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 212,
          column: 18
        }
      },
      "77": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "78": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 218,
          column: 18
        }
      },
      "79": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "80": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 229,
          column: 10
        }
      },
      "81": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 239,
          column: 10
        }
      },
      "82": {
        start: {
          line: 245,
          column: 24
        },
        end: {
          line: 245,
          column: 107
        }
      },
      "83": {
        start: {
          line: 245,
          column: 73
        },
        end: {
          line: 245,
          column: 105
        }
      },
      "84": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "85": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 266,
          column: 13
        }
      },
      "86": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 36
        }
      },
      "87": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 265,
          column: 18
        }
      },
      "88": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "89": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 55
        }
      },
      "90": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 24
        }
      },
      "91": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 25
        }
      },
      "92": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 48
        }
      },
      "93": {
        start: {
          line: 286,
          column: 28
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "94": {
        start: {
          line: 299,
          column: 25
        },
        end: {
          line: 306,
          column: 10
        }
      },
      "95": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "96": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 85
        }
      },
      "97": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 310,
          column: 50
        }
      },
      "98": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "99": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 58
        }
      },
      "100": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 35
        }
      },
      "101": {
        start: {
          line: 320,
          column: 27
        },
        end: {
          line: 320,
          column: 60
        }
      },
      "102": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "103": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 43
        }
      },
      "104": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 49
        }
      },
      "105": {
        start: {
          line: 325,
          column: 24
        },
        end: {
          line: 325,
          column: 61
        }
      },
      "106": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "107": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 34
        }
      },
      "108": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 53
        }
      },
      "109": {
        start: {
          line: 335,
          column: 26
        },
        end: {
          line: 335,
          column: 64
        }
      },
      "110": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 73
        }
      },
      "111": {
        start: {
          line: 336,
          column: 46
        },
        end: {
          line: 336,
          column: 70
        }
      },
      "112": {
        start: {
          line: 342,
          column: 27
        },
        end: {
          line: 342,
          column: 60
        }
      },
      "113": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 346,
          column: 10
        }
      },
      "114": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 96
        }
      },
      "115": {
        start: {
          line: 352,
          column: 71
        },
        end: {
          line: 352,
          column: 87
        }
      },
      "116": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 363,
          column: 10
        }
      },
      "117": {
        start: {
          line: 369,
          column: 23
        },
        end: {
          line: 369,
          column: 25
        }
      },
      "118": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "119": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 59
        }
      },
      "120": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "121": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 60
        }
      },
      "122": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "123": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 45
        }
      },
      "124": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "125": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 53
        }
      },
      "126": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "127": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 53
        }
      },
      "128": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 388,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 38
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 39
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 70
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 42
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 79
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 37
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 104
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 35
          },
          end: {
            line: 111,
            column: 36
          }
        },
        loc: {
          start: {
            line: 111,
            column: 41
          },
          end: {
            line: 118,
            column: 9
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 46
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 124
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 27
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 159
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 24
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 184
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 190
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 30
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 234
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 33
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 244
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 245,
            column: 62
          },
          end: {
            line: 245,
            column: 63
          }
        },
        loc: {
          start: {
            line: 245,
            column: 73
          },
          end: {
            line: 245,
            column: 105
          }
        },
        line: 245
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 246,
            column: 27
          },
          end: {
            line: 246,
            column: 28
          }
        },
        loc: {
          start: {
            line: 246,
            column: 46
          },
          end: {
            line: 267,
            column: 9
          }
        },
        line: 246
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 37
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 272
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 44
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 284
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 36
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 319
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 20
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 334
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 336,
            column: 40
          },
          end: {
            line: 336,
            column: 41
          }
        },
        loc: {
          start: {
            line: 336,
            column: 46
          },
          end: {
            line: 336,
            column: 70
          }
        },
        line: 336
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 34
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 341
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 32
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 351
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 352,
            column: 63
          },
          end: {
            line: 352,
            column: 64
          }
        },
        loc: {
          start: {
            line: 352,
            column: 71
          },
          end: {
            line: 352,
            column: 87
          }
        },
        line: 352
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 357,
            column: 72
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 357
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 38
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 368
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 30
          }
        }, {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 58,
            column: 64
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 72,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 72,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 64
          },
          end: {
            line: 98,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 89
          },
          end: {
            line: 98,
            column: 102
          }
        }, {
          start: {
            line: 98,
            column: 105
          },
          end: {
            line: 98,
            column: 120
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "9": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "10": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "11": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 166,
            column: 22
          }
        }, {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 171,
            column: 22
          }
        }, {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 177,
            column: 22
          }
        }],
        line: 161
      },
      "12": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "13": {
        loc: {
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 170,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 170,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "14": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "15": {
        loc: {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 46
          }
        }, {
          start: {
            line: 173,
            column: 50
          },
          end: {
            line: 173,
            column: 76
          }
        }],
        line: 173
      },
      "16": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "17": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 17
          }
        }, {
          start: {
            line: 191,
            column: 21
          },
          end: {
            line: 191,
            column: 46
          }
        }, {
          start: {
            line: 191,
            column: 50
          },
          end: {
            line: 191,
            column: 65
          }
        }, {
          start: {
            line: 191,
            column: 69
          },
          end: {
            line: 191,
            column: 87
          }
        }],
        line: 191
      },
      "18": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "19": {
        loc: {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "20": {
        loc: {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 196,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 196,
            column: 51
          }
        }, {
          start: {
            line: 196,
            column: 55
          },
          end: {
            line: 196,
            column: 84
          }
        }],
        line: 196
      },
      "21": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "22": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 56
          }
        }, {
          start: {
            line: 202,
            column: 60
          },
          end: {
            line: 202,
            column: 89
          }
        }],
        line: 202
      },
      "23": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "24": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 208,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 208,
            column: 55
          }
        }, {
          start: {
            line: 208,
            column: 59
          },
          end: {
            line: 208,
            column: 88
          }
        }],
        line: 208
      },
      "25": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "26": {
        loc: {
          start: {
            line: 214,
            column: 16
          },
          end: {
            line: 214,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 16
          },
          end: {
            line: 214,
            column: 49
          }
        }, {
          start: {
            line: 214,
            column: 53
          },
          end: {
            line: 214,
            column: 82
          }
        }],
        line: 214
      },
      "27": {
        loc: {
          start: {
            line: 236,
            column: 18
          },
          end: {
            line: 236,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 18
          },
          end: {
            line: 236,
            column: 32
          }
        }, {
          start: {
            line: 236,
            column: 36
          },
          end: {
            line: 236,
            column: 63
          }
        }],
        line: 236
      },
      "28": {
        loc: {
          start: {
            line: 237,
            column: 21
          },
          end: {
            line: 237,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 21
          },
          end: {
            line: 237,
            column: 38
          }
        }, {
          start: {
            line: 237,
            column: 42
          },
          end: {
            line: 237,
            column: 60
          }
        }],
        line: 237
      },
      "29": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        }, {
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 266,
            column: 13
          }
        }],
        line: 247
      },
      "30": {
        loc: {
          start: {
            line: 256,
            column: 41
          },
          end: {
            line: 256,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 41
          },
          end: {
            line: 256,
            column: 63
          }
        }, {
          start: {
            line: 256,
            column: 67
          },
          end: {
            line: 256,
            column: 91
          }
        }],
        line: 256
      },
      "31": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "32": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "33": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "34": {
        loc: {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "35": {
        loc: {
          start: {
            line: 344,
            column: 25
          },
          end: {
            line: 344,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 25
          },
          end: {
            line: 344,
            column: 48
          }
        }, {
          start: {
            line: 344,
            column: 52
          },
          end: {
            line: 344,
            column: 57
          }
        }],
        line: 344
      },
      "36": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "37": {
        loc: {
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "38": {
        loc: {
          start: {
            line: 376,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 376,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 376
      },
      "39": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "40": {
        loc: {
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "41": {
        loc: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 382,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 382,
            column: 30
          }
        }, {
          start: {
            line: 382,
            column: 34
          },
          end: {
            line: 382,
            column: 67
          }
        }],
        line: 382
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionBridge.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionBridge.ts"],
      sourcesContent: ["import {\n  MCPServer,\n  MCPTool,\n  MCPToolRequest,\n  MCPToolResponse,\n  MCPError,\n  MCPErrorCode,\n  MCPConnection,\n  MCPExecutionContext,\n  MCPExecutionResult,\n  N8nExecutionData,\n} from '../types/mcpTypes.js';\nimport { ParameterMapper } from './parameterMapper.js';\nimport fetch from 'node-fetch';\n\nexport class MCPExecutionBridge {\n  private parameterMapper: ParameterMapper;\n  private connectionPool: Map<string, MCPConnection> = new Map();\n  private connectionTimeouts: Map<string, NodeJS.Timeout> = new Map();\n  private readonly CONNECTION_TIMEOUT = 30000; // 30 seconds\n  private readonly REQUEST_TIMEOUT = 60000; // 60 seconds\n\n  constructor() {\n    this.parameterMapper = new ParameterMapper();\n  }\n\n  /**\n   * Execute MCP tool with n8n context\n   */\n  async executeWithContext(context: MCPExecutionContext): Promise<MCPExecutionResult> {\n    const startTime = Date.now();\n\n    try {\n      // Ensure connection is established\n      await this.ensureConnection(context.connection);\n\n      // Map n8n parameters to MCP request\n      const mcpRequest = this.parameterMapper.mapN8nParametersToMCP(\n        context.nodeParameters,\n        context.inputData,\n        context.tool\n      );\n\n      // Execute MCP tool\n      const mcpResponse = await this.executeMCPTool(context.connection, mcpRequest);\n\n      // Map MCP response back to n8n format\n      const outputData = this.parameterMapper.mapMCPResponseToN8n(mcpResponse, context);\n\n      return {\n        outputData,\n        executionTime: Date.now() - startTime,\n        success: true,\n      };\n    } catch (error) {\n      const mcpError = this.convertToMCPError(error);\n\n      return {\n        outputData: [\n          {\n            json: {\n              error: true,\n              message: mcpError.message,\n              code: mcpError.code,\n              executionTime: Date.now() - startTime,\n            },\n            pairedItem: { item: 0 },\n          },\n        ],\n        executionTime: Date.now() - startTime,\n        success: false,\n        error: mcpError,\n      };\n    }\n  }\n\n  /**\n   * Ensure MCP server connection is active\n   */\n  private async ensureConnection(connection: MCPConnection): Promise<void> {\n    const existingConnection = this.connectionPool.get(connection.serverId);\n\n    if (existingConnection && existingConnection.isConnected) {\n      // Check if connection is still valid\n      if (this.isConnectionHealthy(existingConnection)) {\n        return;\n      }\n    }\n\n    // Establish new connection\n    await this.establishConnection(connection);\n  }\n\n  /**\n   * Check if connection is healthy\n   */\n  private isConnectionHealthy(connection: MCPConnection): boolean {\n    if (!connection.lastHeartbeat) return false;\n\n    const timeSinceLastHeartbeat = Date.now() - connection.lastHeartbeat.getTime();\n    return timeSinceLastHeartbeat < this.CONNECTION_TIMEOUT;\n  }\n\n  /**\n   * Establish connection to MCP server\n   */\n  private async establishConnection(connection: MCPConnection): Promise<void> {\n    try {\n      // Test connection with a simple request\n      const healthResponse = await fetch(`${connection.url}/health`, {\n        method: 'GET',\n        headers: this.buildAuthHeaders(connection.authentication),\n      });\n\n      if (!healthResponse.ok) {\n        throw new Error(`MCP server health check failed: ${healthResponse.status}`);\n      }\n\n      // Update connection status\n      connection.isConnected = true;\n      connection.lastHeartbeat = new Date();\n\n      this.connectionPool.set(connection.serverId, connection);\n\n      // Set up connection timeout\n      this.setupConnectionTimeout(connection.serverId);\n    } catch (error) {\n      connection.isConnected = false;\n      throw new Error(\n        `Failed to connect to MCP server: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Set up connection timeout monitoring\n   */\n  private setupConnectionTimeout(serverId: string): void {\n    // Clear existing timeout\n    const existingTimeout = this.connectionTimeouts.get(serverId);\n    if (existingTimeout) {\n      clearTimeout(existingTimeout);\n    }\n\n    // Set new timeout\n    const timeout = setTimeout(() => {\n      const connection = this.connectionPool.get(serverId);\n      if (connection) {\n        connection.isConnected = false;\n        this.connectionPool.delete(serverId);\n      }\n      this.connectionTimeouts.delete(serverId);\n    }, this.CONNECTION_TIMEOUT);\n\n    this.connectionTimeouts.set(serverId, timeout);\n  }\n\n  /**\n   * Execute MCP tool via HTTP request\n   */\n  private async executeMCPTool(\n    connection: MCPConnection,\n    request: MCPToolRequest\n  ): Promise<MCPToolResponse> {\n    const requestBody = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'tools/call',\n      params: {\n        name: request.name,\n        arguments: request.arguments,\n      },\n    };\n\n    const response = await fetch(`${connection.url}/mcp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.buildAuthHeaders(connection.authentication),\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error(`MCP server request failed: ${response.status} ${response.statusText}`);\n    }\n\n    const responseData = await response.json() as any;\n\n    if (responseData.error) {\n      throw this.createMCPError(responseData.error);\n    }\n\n    // Update connection heartbeat\n    const conn = this.connectionPool.get(connection.serverId);\n    if (conn) {\n      conn.lastHeartbeat = new Date();\n    }\n\n    return responseData.result;\n  }\n\n  /**\n   * Build authentication headers\n   */\n  private buildAuthHeaders(auth: any): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    switch (auth?.type) {\n      case 'bearer':\n        if (auth.credentials?.token) {\n          headers['Authorization'] = `Bearer ${auth.credentials.token}`;\n        }\n        break;\n\n      case 'api-key':\n        if (auth.credentials?.apiKey) {\n          headers['X-API-Key'] = auth.credentials.apiKey;\n        }\n        break;\n\n      case 'basic':\n        if (auth.credentials?.username && auth.credentials?.password) {\n          const encoded = Buffer.from(\n            `${auth.credentials.username}:${auth.credentials.password}`\n          ).toString('base64');\n          headers['Authorization'] = `Basic ${encoded}`;\n        }\n        break;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `mcp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Convert error to MCP error format\n   */\n  private convertToMCPError(error: unknown): MCPError {\n    if (error && typeof error === 'object' && 'code' in error && 'message' in error) {\n      return error as MCPError;\n    }\n\n    if (error instanceof Error) {\n      // Map common errors to MCP error codes\n      if (error.message.includes('not found') || error.message.includes('404')) {\n        return {\n          code: MCPErrorCode.TOOL_NOT_FOUND,\n          message: error.message,\n        };\n      }\n\n      if (error.message.includes('authentication') || error.message.includes('401')) {\n        return {\n          code: MCPErrorCode.AUTHENTICATION_FAILED,\n          message: error.message,\n        };\n      }\n\n      if (error.message.includes('authorization') || error.message.includes('403')) {\n        return {\n          code: MCPErrorCode.AUTHORIZATION_FAILED,\n          message: error.message,\n        };\n      }\n\n      if (error.message.includes('invalid') || error.message.includes('400')) {\n        return {\n          code: MCPErrorCode.INVALID_PARAMS,\n          message: error.message,\n        };\n      }\n\n      return {\n        code: MCPErrorCode.INTERNAL_ERROR,\n        message: error.message,\n      };\n    }\n\n    return {\n      code: MCPErrorCode.INTERNAL_ERROR,\n      message: 'Unknown error occurred',\n      data: error,\n    };\n  }\n\n  /**\n   * Create MCP error from server response\n   */\n  private createMCPError(errorData: any): MCPError {\n    return {\n      code: errorData.code || MCPErrorCode.INTERNAL_ERROR,\n      message: errorData.message || 'MCP server error',\n      data: errorData.data,\n    };\n  }\n\n  /**\n   * Execute multiple tools in batch\n   */\n  async executeBatch(contexts: MCPExecutionContext[]): Promise<MCPExecutionResult[]> {\n    const results = await Promise.allSettled(\n      contexts.map(context => this.executeWithContext(context))\n    );\n\n    return results.map((result, index) => {\n      if (result.status === 'fulfilled') {\n        return result.value;\n      } else {\n        return {\n          outputData: [\n            {\n              json: {\n                error: true,\n                message: result.reason?.message || 'Batch execution failed',\n                batchIndex: index,\n              },\n              pairedItem: { item: 0 },\n            },\n          ],\n          executionTime: 0,\n          success: false,\n          error: this.convertToMCPError(result.reason),\n        };\n      }\n    });\n  }\n\n  /**\n   * Test MCP server connection\n   */\n  async testConnection(connection: MCPConnection): Promise<boolean> {\n    try {\n      await this.establishConnection(connection);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get MCP server capabilities\n   */\n  async getServerCapabilities(connection: MCPConnection): Promise<any> {\n    await this.ensureConnection(connection);\n\n    const requestBody = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'initialize',\n      params: {\n        protocolVersion: '2024-11-05',\n        capabilities: {},\n        clientInfo: {\n          name: 'n8n-mcp-client',\n          version: '1.0.0',\n        },\n      },\n    };\n\n    const response = await fetch(`${connection.url}/mcp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.buildAuthHeaders(connection.authentication),\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get server capabilities: ${response.status}`);\n    }\n\n    const responseData = await response.json() as any;\n\n    if (responseData.error) {\n      throw this.createMCPError(responseData.error);\n    }\n\n    return responseData.result;\n  }\n\n  /**\n   * Close connection to MCP server\n   */\n  async closeConnection(serverId: string): Promise<void> {\n    const connection = this.connectionPool.get(serverId);\n    if (connection) {\n      connection.isConnected = false;\n      this.connectionPool.delete(serverId);\n    }\n\n    const timeout = this.connectionTimeouts.get(serverId);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.connectionTimeouts.delete(serverId);\n    }\n  }\n\n  /**\n   * Clean up all connections\n   */\n  async cleanup(): Promise<void> {\n    const serverIds = Array.from(this.connectionPool.keys());\n    await Promise.all(serverIds.map(id => this.closeConnection(id)));\n  }\n\n  /**\n   * Get connection status\n   */\n  getConnectionStatus(serverId: string): { isConnected: boolean; lastHeartbeat?: Date } {\n    const connection = this.connectionPool.get(serverId);\n    return {\n      isConnected: connection?.isConnected || false,\n      lastHeartbeat: connection?.lastHeartbeat,\n    };\n  }\n\n  /**\n   * Get active connections count\n   */\n  getActiveConnectionsCount(): number {\n    return Array.from(this.connectionPool.values()).filter(conn => conn.isConnected).length;\n  }\n\n  /**\n   * Create execution context from n8n node data\n   */\n  createExecutionContext(\n    connection: MCPConnection,\n    tool: MCPTool,\n    nodeParameters: Record<string, unknown>,\n    inputData: N8nExecutionData[]\n  ): MCPExecutionContext {\n    return {\n      connection,\n      tool,\n      nodeParameters,\n      inputData,\n    };\n  }\n\n  /**\n   * Validate execution context\n   */\n  validateExecutionContext(context: MCPExecutionContext): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!context.connection?.serverId) {\n      errors.push('Missing server ID in connection');\n    }\n\n    if (!context.connection?.url) {\n      errors.push('Missing server URL in connection');\n    }\n\n    if (!context.tool?.name) {\n      errors.push('Missing tool name');\n    }\n\n    if (!context.tool?.inputSchema) {\n      errors.push('Missing tool input schema');\n    }\n\n    if (!context.inputData || !Array.isArray(context.inputData)) {\n      errors.push('Invalid input data format');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aef170acf85991a0fb26cab1db2f140fe3b773a7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mruj6r9v4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mruj6r9v4();
import { MCPErrorCode } from '../types/mcpTypes.js';
import { ParameterMapper } from './parameterMapper.js';
import fetch from 'node-fetch';
export class MCPExecutionBridge {
  parameterMapper;
  connectionPool =
  /* istanbul ignore next */
  (cov_1mruj6r9v4().s[0]++, new Map());
  connectionTimeouts =
  /* istanbul ignore next */
  (cov_1mruj6r9v4().s[1]++, new Map());
  CONNECTION_TIMEOUT =
  /* istanbul ignore next */
  (cov_1mruj6r9v4().s[2]++, 30000); // 30 seconds
  REQUEST_TIMEOUT =
  /* istanbul ignore next */
  (cov_1mruj6r9v4().s[3]++, 60000); // 60 seconds
  constructor() {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[0]++;
    cov_1mruj6r9v4().s[4]++;
    this.parameterMapper = new ParameterMapper();
  }
  /**
   * Execute MCP tool with n8n context
   */
  async executeWithContext(context) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[5]++, Date.now());
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[6]++;
    try {
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[7]++;
      // Ensure connection is established
      await this.ensureConnection(context.connection);
      // Map n8n parameters to MCP request
      const mcpRequest =
      /* istanbul ignore next */
      (cov_1mruj6r9v4().s[8]++, this.parameterMapper.mapN8nParametersToMCP(context.nodeParameters, context.inputData, context.tool));
      // Execute MCP tool
      const mcpResponse =
      /* istanbul ignore next */
      (cov_1mruj6r9v4().s[9]++, await this.executeMCPTool(context.connection, mcpRequest));
      // Map MCP response back to n8n format
      const outputData =
      /* istanbul ignore next */
      (cov_1mruj6r9v4().s[10]++, this.parameterMapper.mapMCPResponseToN8n(mcpResponse, context));
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[11]++;
      return {
        outputData,
        executionTime: Date.now() - startTime,
        success: true
      };
    } catch (error) {
      const mcpError =
      /* istanbul ignore next */
      (cov_1mruj6r9v4().s[12]++, this.convertToMCPError(error));
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[13]++;
      return {
        outputData: [{
          json: {
            error: true,
            message: mcpError.message,
            code: mcpError.code,
            executionTime: Date.now() - startTime
          },
          pairedItem: {
            item: 0
          }
        }],
        executionTime: Date.now() - startTime,
        success: false,
        error: mcpError
      };
    }
  }
  /**
   * Ensure MCP server connection is active
   */
  async ensureConnection(connection) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[2]++;
    const existingConnection =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[14]++, this.connectionPool.get(connection.serverId));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[1][0]++, existingConnection) &&
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[1][1]++, existingConnection.isConnected)) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[0][0]++;
      cov_1mruj6r9v4().s[16]++;
      // Check if connection is still valid
      if (this.isConnectionHealthy(existingConnection)) {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[2][0]++;
        cov_1mruj6r9v4().s[17]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1mruj6r9v4().b[2][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[0][1]++;
    }
    // Establish new connection
    cov_1mruj6r9v4().s[18]++;
    await this.establishConnection(connection);
  }
  /**
   * Check if connection is healthy
   */
  isConnectionHealthy(connection) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[3]++;
    cov_1mruj6r9v4().s[19]++;
    if (!connection.lastHeartbeat) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[3][0]++;
      cov_1mruj6r9v4().s[20]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[3][1]++;
    }
    const timeSinceLastHeartbeat =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[21]++, Date.now() - connection.lastHeartbeat.getTime());
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[22]++;
    return timeSinceLastHeartbeat < this.CONNECTION_TIMEOUT;
  }
  /**
   * Establish connection to MCP server
   */
  async establishConnection(connection) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[4]++;
    cov_1mruj6r9v4().s[23]++;
    try {
      // Test connection with a simple request
      const healthResponse =
      /* istanbul ignore next */
      (cov_1mruj6r9v4().s[24]++, await fetch(`${connection.url}/health`, {
        method: 'GET',
        headers: this.buildAuthHeaders(connection.authentication)
      }));
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[25]++;
      if (!healthResponse.ok) {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[4][0]++;
        cov_1mruj6r9v4().s[26]++;
        throw new Error(`MCP server health check failed: ${healthResponse.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_1mruj6r9v4().b[4][1]++;
      }
      // Update connection status
      cov_1mruj6r9v4().s[27]++;
      connection.isConnected = true;
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[28]++;
      connection.lastHeartbeat = new Date();
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[29]++;
      this.connectionPool.set(connection.serverId, connection);
      // Set up connection timeout
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[30]++;
      this.setupConnectionTimeout(connection.serverId);
    } catch (error) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[31]++;
      connection.isConnected = false;
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[32]++;
      throw new Error(`Failed to connect to MCP server: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[5][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Set up connection timeout monitoring
   */
  setupConnectionTimeout(serverId) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[5]++;
    // Clear existing timeout
    const existingTimeout =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[33]++, this.connectionTimeouts.get(serverId));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[34]++;
    if (existingTimeout) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[6][0]++;
      cov_1mruj6r9v4().s[35]++;
      clearTimeout(existingTimeout);
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[6][1]++;
    }
    // Set new timeout
    const timeout =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[36]++, setTimeout(() => {
      /* istanbul ignore next */
      cov_1mruj6r9v4().f[6]++;
      const connection =
      /* istanbul ignore next */
      (cov_1mruj6r9v4().s[37]++, this.connectionPool.get(serverId));
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[38]++;
      if (connection) {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[7][0]++;
        cov_1mruj6r9v4().s[39]++;
        connection.isConnected = false;
        /* istanbul ignore next */
        cov_1mruj6r9v4().s[40]++;
        this.connectionPool.delete(serverId);
      } else
      /* istanbul ignore next */
      {
        cov_1mruj6r9v4().b[7][1]++;
      }
      cov_1mruj6r9v4().s[41]++;
      this.connectionTimeouts.delete(serverId);
    }, this.CONNECTION_TIMEOUT));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[42]++;
    this.connectionTimeouts.set(serverId, timeout);
  }
  /**
   * Execute MCP tool via HTTP request
   */
  async executeMCPTool(connection, request) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[7]++;
    const requestBody =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[43]++, {
      jsonrpc: '2.0',
      id: this.generateRequestId(),
      method: 'tools/call',
      params: {
        name: request.name,
        arguments: request.arguments
      }
    });
    const response =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[44]++, await fetch(`${connection.url}/mcp`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...this.buildAuthHeaders(connection.authentication)
      },
      body: JSON.stringify(requestBody)
    }));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[45]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[8][0]++;
      cov_1mruj6r9v4().s[46]++;
      throw new Error(`MCP server request failed: ${response.status} ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[8][1]++;
    }
    const responseData =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[47]++, await response.json());
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[48]++;
    if (responseData.error) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[9][0]++;
      cov_1mruj6r9v4().s[49]++;
      throw this.createMCPError(responseData.error);
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[9][1]++;
    }
    // Update connection heartbeat
    const conn =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[50]++, this.connectionPool.get(connection.serverId));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[51]++;
    if (conn) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[10][0]++;
      cov_1mruj6r9v4().s[52]++;
      conn.lastHeartbeat = new Date();
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[10][1]++;
    }
    cov_1mruj6r9v4().s[53]++;
    return responseData.result;
  }
  /**
   * Build authentication headers
   */
  buildAuthHeaders(auth) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[8]++;
    const headers =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[54]++, {});
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[55]++;
    switch (auth?.type) {
      case 'bearer':
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[11][0]++;
        cov_1mruj6r9v4().s[56]++;
        if (auth.credentials?.token) {
          /* istanbul ignore next */
          cov_1mruj6r9v4().b[12][0]++;
          cov_1mruj6r9v4().s[57]++;
          headers['Authorization'] = `Bearer ${auth.credentials.token}`;
        } else
        /* istanbul ignore next */
        {
          cov_1mruj6r9v4().b[12][1]++;
        }
        cov_1mruj6r9v4().s[58]++;
        break;
      case 'api-key':
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[11][1]++;
        cov_1mruj6r9v4().s[59]++;
        if (auth.credentials?.apiKey) {
          /* istanbul ignore next */
          cov_1mruj6r9v4().b[13][0]++;
          cov_1mruj6r9v4().s[60]++;
          headers['X-API-Key'] = auth.credentials.apiKey;
        } else
        /* istanbul ignore next */
        {
          cov_1mruj6r9v4().b[13][1]++;
        }
        cov_1mruj6r9v4().s[61]++;
        break;
      case 'basic':
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[11][2]++;
        cov_1mruj6r9v4().s[62]++;
        if (
        /* istanbul ignore next */
        (cov_1mruj6r9v4().b[15][0]++, auth.credentials?.username) &&
        /* istanbul ignore next */
        (cov_1mruj6r9v4().b[15][1]++, auth.credentials?.password)) {
          /* istanbul ignore next */
          cov_1mruj6r9v4().b[14][0]++;
          const encoded =
          /* istanbul ignore next */
          (cov_1mruj6r9v4().s[63]++, Buffer.from(`${auth.credentials.username}:${auth.credentials.password}`).toString('base64'));
          /* istanbul ignore next */
          cov_1mruj6r9v4().s[64]++;
          headers['Authorization'] = `Basic ${encoded}`;
        } else
        /* istanbul ignore next */
        {
          cov_1mruj6r9v4().b[14][1]++;
        }
        cov_1mruj6r9v4().s[65]++;
        break;
    }
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[66]++;
    return headers;
  }
  /**
   * Generate unique request ID
   */
  generateRequestId() {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[9]++;
    cov_1mruj6r9v4().s[67]++;
    return `mcp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Convert error to MCP error format
   */
  convertToMCPError(error) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[10]++;
    cov_1mruj6r9v4().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[17][0]++, error) &&
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[17][1]++, typeof error === 'object') &&
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[17][2]++, 'code' in error) &&
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[17][3]++, 'message' in error)) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[16][0]++;
      cov_1mruj6r9v4().s[69]++;
      return error;
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[16][1]++;
    }
    cov_1mruj6r9v4().s[70]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[18][0]++;
      cov_1mruj6r9v4().s[71]++;
      // Map common errors to MCP error codes
      if (
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[20][0]++, error.message.includes('not found')) ||
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[20][1]++, error.message.includes('404'))) {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[19][0]++;
        cov_1mruj6r9v4().s[72]++;
        return {
          code: MCPErrorCode.TOOL_NOT_FOUND,
          message: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_1mruj6r9v4().b[19][1]++;
      }
      cov_1mruj6r9v4().s[73]++;
      if (
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[22][0]++, error.message.includes('authentication')) ||
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[22][1]++, error.message.includes('401'))) {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[21][0]++;
        cov_1mruj6r9v4().s[74]++;
        return {
          code: MCPErrorCode.AUTHENTICATION_FAILED,
          message: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_1mruj6r9v4().b[21][1]++;
      }
      cov_1mruj6r9v4().s[75]++;
      if (
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[24][0]++, error.message.includes('authorization')) ||
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[24][1]++, error.message.includes('403'))) {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[23][0]++;
        cov_1mruj6r9v4().s[76]++;
        return {
          code: MCPErrorCode.AUTHORIZATION_FAILED,
          message: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_1mruj6r9v4().b[23][1]++;
      }
      cov_1mruj6r9v4().s[77]++;
      if (
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[26][0]++, error.message.includes('invalid')) ||
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[26][1]++, error.message.includes('400'))) {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[25][0]++;
        cov_1mruj6r9v4().s[78]++;
        return {
          code: MCPErrorCode.INVALID_PARAMS,
          message: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_1mruj6r9v4().b[25][1]++;
      }
      cov_1mruj6r9v4().s[79]++;
      return {
        code: MCPErrorCode.INTERNAL_ERROR,
        message: error.message
      };
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[18][1]++;
    }
    cov_1mruj6r9v4().s[80]++;
    return {
      code: MCPErrorCode.INTERNAL_ERROR,
      message: 'Unknown error occurred',
      data: error
    };
  }
  /**
   * Create MCP error from server response
   */
  createMCPError(errorData) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[11]++;
    cov_1mruj6r9v4().s[81]++;
    return {
      code:
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[27][0]++, errorData.code) ||
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[27][1]++, MCPErrorCode.INTERNAL_ERROR),
      message:
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[28][0]++, errorData.message) ||
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[28][1]++, 'MCP server error'),
      data: errorData.data
    };
  }
  /**
   * Execute multiple tools in batch
   */
  async executeBatch(contexts) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[12]++;
    const results =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[82]++, await Promise.allSettled(contexts.map(context => {
      /* istanbul ignore next */
      cov_1mruj6r9v4().f[13]++;
      cov_1mruj6r9v4().s[83]++;
      return this.executeWithContext(context);
    })));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[84]++;
    return results.map((result, index) => {
      /* istanbul ignore next */
      cov_1mruj6r9v4().f[14]++;
      cov_1mruj6r9v4().s[85]++;
      if (result.status === 'fulfilled') {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[29][0]++;
        cov_1mruj6r9v4().s[86]++;
        return result.value;
      } else {
        /* istanbul ignore next */
        cov_1mruj6r9v4().b[29][1]++;
        cov_1mruj6r9v4().s[87]++;
        return {
          outputData: [{
            json: {
              error: true,
              message:
              /* istanbul ignore next */
              (cov_1mruj6r9v4().b[30][0]++, result.reason?.message) ||
              /* istanbul ignore next */
              (cov_1mruj6r9v4().b[30][1]++, 'Batch execution failed'),
              batchIndex: index
            },
            pairedItem: {
              item: 0
            }
          }],
          executionTime: 0,
          success: false,
          error: this.convertToMCPError(result.reason)
        };
      }
    });
  }
  /**
   * Test MCP server connection
   */
  async testConnection(connection) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[15]++;
    cov_1mruj6r9v4().s[88]++;
    try {
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[89]++;
      await this.establishConnection(connection);
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[90]++;
      return true;
    } catch {
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[91]++;
      return false;
    }
  }
  /**
   * Get MCP server capabilities
   */
  async getServerCapabilities(connection) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[16]++;
    cov_1mruj6r9v4().s[92]++;
    await this.ensureConnection(connection);
    const requestBody =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[93]++, {
      jsonrpc: '2.0',
      id: this.generateRequestId(),
      method: 'initialize',
      params: {
        protocolVersion: '2024-11-05',
        capabilities: {},
        clientInfo: {
          name: 'n8n-mcp-client',
          version: '1.0.0'
        }
      }
    });
    const response =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[94]++, await fetch(`${connection.url}/mcp`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...this.buildAuthHeaders(connection.authentication)
      },
      body: JSON.stringify(requestBody)
    }));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[95]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[31][0]++;
      cov_1mruj6r9v4().s[96]++;
      throw new Error(`Failed to get server capabilities: ${response.status}`);
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[31][1]++;
    }
    const responseData =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[97]++, await response.json());
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[98]++;
    if (responseData.error) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[32][0]++;
      cov_1mruj6r9v4().s[99]++;
      throw this.createMCPError(responseData.error);
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[32][1]++;
    }
    cov_1mruj6r9v4().s[100]++;
    return responseData.result;
  }
  /**
   * Close connection to MCP server
   */
  async closeConnection(serverId) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[17]++;
    const connection =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[101]++, this.connectionPool.get(serverId));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[102]++;
    if (connection) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[33][0]++;
      cov_1mruj6r9v4().s[103]++;
      connection.isConnected = false;
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[104]++;
      this.connectionPool.delete(serverId);
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[33][1]++;
    }
    const timeout =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[105]++, this.connectionTimeouts.get(serverId));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[106]++;
    if (timeout) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[34][0]++;
      cov_1mruj6r9v4().s[107]++;
      clearTimeout(timeout);
      /* istanbul ignore next */
      cov_1mruj6r9v4().s[108]++;
      this.connectionTimeouts.delete(serverId);
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[34][1]++;
    }
  }
  /**
   * Clean up all connections
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[18]++;
    const serverIds =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[109]++, Array.from(this.connectionPool.keys()));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[110]++;
    await Promise.all(serverIds.map(id => {
      /* istanbul ignore next */
      cov_1mruj6r9v4().f[19]++;
      cov_1mruj6r9v4().s[111]++;
      return this.closeConnection(id);
    }));
  }
  /**
   * Get connection status
   */
  getConnectionStatus(serverId) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[20]++;
    const connection =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[112]++, this.connectionPool.get(serverId));
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[113]++;
    return {
      isConnected:
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[35][0]++, connection?.isConnected) ||
      /* istanbul ignore next */
      (cov_1mruj6r9v4().b[35][1]++, false),
      lastHeartbeat: connection?.lastHeartbeat
    };
  }
  /**
   * Get active connections count
   */
  getActiveConnectionsCount() {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[21]++;
    cov_1mruj6r9v4().s[114]++;
    return Array.from(this.connectionPool.values()).filter(conn => {
      /* istanbul ignore next */
      cov_1mruj6r9v4().f[22]++;
      cov_1mruj6r9v4().s[115]++;
      return conn.isConnected;
    }).length;
  }
  /**
   * Create execution context from n8n node data
   */
  createExecutionContext(connection, tool, nodeParameters, inputData) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[23]++;
    cov_1mruj6r9v4().s[116]++;
    return {
      connection,
      tool,
      nodeParameters,
      inputData
    };
  }
  /**
   * Validate execution context
   */
  validateExecutionContext(context) {
    /* istanbul ignore next */
    cov_1mruj6r9v4().f[24]++;
    const errors =
    /* istanbul ignore next */
    (cov_1mruj6r9v4().s[117]++, []);
    /* istanbul ignore next */
    cov_1mruj6r9v4().s[118]++;
    if (!context.connection?.serverId) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[36][0]++;
      cov_1mruj6r9v4().s[119]++;
      errors.push('Missing server ID in connection');
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[36][1]++;
    }
    cov_1mruj6r9v4().s[120]++;
    if (!context.connection?.url) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[37][0]++;
      cov_1mruj6r9v4().s[121]++;
      errors.push('Missing server URL in connection');
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[37][1]++;
    }
    cov_1mruj6r9v4().s[122]++;
    if (!context.tool?.name) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[38][0]++;
      cov_1mruj6r9v4().s[123]++;
      errors.push('Missing tool name');
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[38][1]++;
    }
    cov_1mruj6r9v4().s[124]++;
    if (!context.tool?.inputSchema) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[39][0]++;
      cov_1mruj6r9v4().s[125]++;
      errors.push('Missing tool input schema');
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[39][1]++;
    }
    cov_1mruj6r9v4().s[126]++;
    if (
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[41][0]++, !context.inputData) ||
    /* istanbul ignore next */
    (cov_1mruj6r9v4().b[41][1]++, !Array.isArray(context.inputData))) {
      /* istanbul ignore next */
      cov_1mruj6r9v4().b[40][0]++;
      cov_1mruj6r9v4().s[127]++;
      errors.push('Invalid input data format');
    } else
    /* istanbul ignore next */
    {
      cov_1mruj6r9v4().b[40][1]++;
    }
    cov_1mruj6r9v4().s[128]++;
    return {
      valid: errors.length === 0,
      errors
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,