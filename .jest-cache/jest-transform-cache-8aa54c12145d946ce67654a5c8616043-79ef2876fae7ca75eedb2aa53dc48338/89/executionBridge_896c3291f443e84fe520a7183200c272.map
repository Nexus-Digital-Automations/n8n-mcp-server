{"version":3,"names":["cov_1mruj6r9v4","actualCoverage","MCPErrorCode","ParameterMapper","fetch","MCPExecutionBridge","parameterMapper","connectionPool","s","Map","connectionTimeouts","CONNECTION_TIMEOUT","REQUEST_TIMEOUT","constructor","f","executeWithContext","context","startTime","Date","now","ensureConnection","connection","mcpRequest","mapN8nParametersToMCP","nodeParameters","inputData","tool","mcpResponse","executeMCPTool","outputData","mapMCPResponseToN8n","executionTime","success","error","mcpError","convertToMCPError","json","message","code","pairedItem","item","existingConnection","get","serverId","b","isConnected","isConnectionHealthy","establishConnection","lastHeartbeat","timeSinceLastHeartbeat","getTime","healthResponse","url","method","headers","buildAuthHeaders","authentication","ok","Error","status","set","setupConnectionTimeout","existingTimeout","clearTimeout","timeout","setTimeout","delete","request","requestBody","jsonrpc","id","generateRequestId","params","name","arguments","response","body","JSON","stringify","statusText","responseData","createMCPError","conn","result","auth","type","credentials","token","apiKey","username","password","encoded","Buffer","from","toString","Math","random","substr","includes","TOOL_NOT_FOUND","AUTHENTICATION_FAILED","AUTHORIZATION_FAILED","INVALID_PARAMS","INTERNAL_ERROR","data","errorData","executeBatch","contexts","results","Promise","allSettled","map","index","value","reason","batchIndex","testConnection","getServerCapabilities","protocolVersion","capabilities","clientInfo","version","closeConnection","cleanup","serverIds","Array","keys","all","getConnectionStatus","getActiveConnectionsCount","values","filter","length","createExecutionContext","validateExecutionContext","errors","push","inputSchema","isArray","valid"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionBridge.ts"],"sourcesContent":["import {\n  MCPServer,\n  MCPTool,\n  MCPToolRequest,\n  MCPToolResponse,\n  MCPError,\n  MCPErrorCode,\n  MCPConnection,\n  MCPExecutionContext,\n  MCPExecutionResult,\n  N8nExecutionData,\n} from '../types/mcpTypes.js';\nimport { ParameterMapper } from './parameterMapper.js';\nimport fetch from 'node-fetch';\n\nexport class MCPExecutionBridge {\n  private parameterMapper: ParameterMapper;\n  private connectionPool: Map<string, MCPConnection> = new Map();\n  private connectionTimeouts: Map<string, NodeJS.Timeout> = new Map();\n  private readonly CONNECTION_TIMEOUT = 30000; // 30 seconds\n  private readonly REQUEST_TIMEOUT = 60000; // 60 seconds\n\n  constructor() {\n    this.parameterMapper = new ParameterMapper();\n  }\n\n  /**\n   * Execute MCP tool with n8n context\n   */\n  async executeWithContext(context: MCPExecutionContext): Promise<MCPExecutionResult> {\n    const startTime = Date.now();\n\n    try {\n      // Ensure connection is established\n      await this.ensureConnection(context.connection);\n\n      // Map n8n parameters to MCP request\n      const mcpRequest = this.parameterMapper.mapN8nParametersToMCP(\n        context.nodeParameters,\n        context.inputData,\n        context.tool\n      );\n\n      // Execute MCP tool\n      const mcpResponse = await this.executeMCPTool(context.connection, mcpRequest);\n\n      // Map MCP response back to n8n format\n      const outputData = this.parameterMapper.mapMCPResponseToN8n(mcpResponse, context);\n\n      return {\n        outputData,\n        executionTime: Date.now() - startTime,\n        success: true,\n      };\n    } catch (error) {\n      const mcpError = this.convertToMCPError(error);\n\n      return {\n        outputData: [\n          {\n            json: {\n              error: true,\n              message: mcpError.message,\n              code: mcpError.code,\n              executionTime: Date.now() - startTime,\n            },\n            pairedItem: { item: 0 },\n          },\n        ],\n        executionTime: Date.now() - startTime,\n        success: false,\n        error: mcpError,\n      };\n    }\n  }\n\n  /**\n   * Ensure MCP server connection is active\n   */\n  private async ensureConnection(connection: MCPConnection): Promise<void> {\n    const existingConnection = this.connectionPool.get(connection.serverId);\n\n    if (existingConnection && existingConnection.isConnected) {\n      // Check if connection is still valid\n      if (this.isConnectionHealthy(existingConnection)) {\n        return;\n      }\n    }\n\n    // Establish new connection\n    await this.establishConnection(connection);\n  }\n\n  /**\n   * Check if connection is healthy\n   */\n  private isConnectionHealthy(connection: MCPConnection): boolean {\n    if (!connection.lastHeartbeat) return false;\n\n    const timeSinceLastHeartbeat = Date.now() - connection.lastHeartbeat.getTime();\n    return timeSinceLastHeartbeat < this.CONNECTION_TIMEOUT;\n  }\n\n  /**\n   * Establish connection to MCP server\n   */\n  private async establishConnection(connection: MCPConnection): Promise<void> {\n    try {\n      // Test connection with a simple request\n      const healthResponse = await fetch(`${connection.url}/health`, {\n        method: 'GET',\n        headers: this.buildAuthHeaders(connection.authentication),\n      });\n\n      if (!healthResponse.ok) {\n        throw new Error(`MCP server health check failed: ${healthResponse.status}`);\n      }\n\n      // Update connection status\n      connection.isConnected = true;\n      connection.lastHeartbeat = new Date();\n\n      this.connectionPool.set(connection.serverId, connection);\n\n      // Set up connection timeout\n      this.setupConnectionTimeout(connection.serverId);\n    } catch (error) {\n      connection.isConnected = false;\n      throw new Error(\n        `Failed to connect to MCP server: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Set up connection timeout monitoring\n   */\n  private setupConnectionTimeout(serverId: string): void {\n    // Clear existing timeout\n    const existingTimeout = this.connectionTimeouts.get(serverId);\n    if (existingTimeout) {\n      clearTimeout(existingTimeout);\n    }\n\n    // Set new timeout\n    const timeout = setTimeout(() => {\n      const connection = this.connectionPool.get(serverId);\n      if (connection) {\n        connection.isConnected = false;\n        this.connectionPool.delete(serverId);\n      }\n      this.connectionTimeouts.delete(serverId);\n    }, this.CONNECTION_TIMEOUT);\n\n    this.connectionTimeouts.set(serverId, timeout);\n  }\n\n  /**\n   * Execute MCP tool via HTTP request\n   */\n  private async executeMCPTool(\n    connection: MCPConnection,\n    request: MCPToolRequest\n  ): Promise<MCPToolResponse> {\n    const requestBody = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'tools/call',\n      params: {\n        name: request.name,\n        arguments: request.arguments,\n      },\n    };\n\n    const response = await fetch(`${connection.url}/mcp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.buildAuthHeaders(connection.authentication),\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error(`MCP server request failed: ${response.status} ${response.statusText}`);\n    }\n\n    const responseData = await response.json() as any;\n\n    if (responseData.error) {\n      throw this.createMCPError(responseData.error);\n    }\n\n    // Update connection heartbeat\n    const conn = this.connectionPool.get(connection.serverId);\n    if (conn) {\n      conn.lastHeartbeat = new Date();\n    }\n\n    return responseData.result;\n  }\n\n  /**\n   * Build authentication headers\n   */\n  private buildAuthHeaders(auth: any): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    switch (auth?.type) {\n      case 'bearer':\n        if (auth.credentials?.token) {\n          headers['Authorization'] = `Bearer ${auth.credentials.token}`;\n        }\n        break;\n\n      case 'api-key':\n        if (auth.credentials?.apiKey) {\n          headers['X-API-Key'] = auth.credentials.apiKey;\n        }\n        break;\n\n      case 'basic':\n        if (auth.credentials?.username && auth.credentials?.password) {\n          const encoded = Buffer.from(\n            `${auth.credentials.username}:${auth.credentials.password}`\n          ).toString('base64');\n          headers['Authorization'] = `Basic ${encoded}`;\n        }\n        break;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `mcp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Convert error to MCP error format\n   */\n  private convertToMCPError(error: unknown): MCPError {\n    if (error && typeof error === 'object' && 'code' in error && 'message' in error) {\n      return error as MCPError;\n    }\n\n    if (error instanceof Error) {\n      // Map common errors to MCP error codes\n      if (error.message.includes('not found') || error.message.includes('404')) {\n        return {\n          code: MCPErrorCode.TOOL_NOT_FOUND,\n          message: error.message,\n        };\n      }\n\n      if (error.message.includes('authentication') || error.message.includes('401')) {\n        return {\n          code: MCPErrorCode.AUTHENTICATION_FAILED,\n          message: error.message,\n        };\n      }\n\n      if (error.message.includes('authorization') || error.message.includes('403')) {\n        return {\n          code: MCPErrorCode.AUTHORIZATION_FAILED,\n          message: error.message,\n        };\n      }\n\n      if (error.message.includes('invalid') || error.message.includes('400')) {\n        return {\n          code: MCPErrorCode.INVALID_PARAMS,\n          message: error.message,\n        };\n      }\n\n      return {\n        code: MCPErrorCode.INTERNAL_ERROR,\n        message: error.message,\n      };\n    }\n\n    return {\n      code: MCPErrorCode.INTERNAL_ERROR,\n      message: 'Unknown error occurred',\n      data: error,\n    };\n  }\n\n  /**\n   * Create MCP error from server response\n   */\n  private createMCPError(errorData: any): MCPError {\n    return {\n      code: errorData.code || MCPErrorCode.INTERNAL_ERROR,\n      message: errorData.message || 'MCP server error',\n      data: errorData.data,\n    };\n  }\n\n  /**\n   * Execute multiple tools in batch\n   */\n  async executeBatch(contexts: MCPExecutionContext[]): Promise<MCPExecutionResult[]> {\n    const results = await Promise.allSettled(\n      contexts.map(context => this.executeWithContext(context))\n    );\n\n    return results.map((result, index) => {\n      if (result.status === 'fulfilled') {\n        return result.value;\n      } else {\n        return {\n          outputData: [\n            {\n              json: {\n                error: true,\n                message: result.reason?.message || 'Batch execution failed',\n                batchIndex: index,\n              },\n              pairedItem: { item: 0 },\n            },\n          ],\n          executionTime: 0,\n          success: false,\n          error: this.convertToMCPError(result.reason),\n        };\n      }\n    });\n  }\n\n  /**\n   * Test MCP server connection\n   */\n  async testConnection(connection: MCPConnection): Promise<boolean> {\n    try {\n      await this.establishConnection(connection);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get MCP server capabilities\n   */\n  async getServerCapabilities(connection: MCPConnection): Promise<any> {\n    await this.ensureConnection(connection);\n\n    const requestBody = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'initialize',\n      params: {\n        protocolVersion: '2024-11-05',\n        capabilities: {},\n        clientInfo: {\n          name: 'n8n-mcp-client',\n          version: '1.0.0',\n        },\n      },\n    };\n\n    const response = await fetch(`${connection.url}/mcp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.buildAuthHeaders(connection.authentication),\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get server capabilities: ${response.status}`);\n    }\n\n    const responseData = await response.json() as any;\n\n    if (responseData.error) {\n      throw this.createMCPError(responseData.error);\n    }\n\n    return responseData.result;\n  }\n\n  /**\n   * Close connection to MCP server\n   */\n  async closeConnection(serverId: string): Promise<void> {\n    const connection = this.connectionPool.get(serverId);\n    if (connection) {\n      connection.isConnected = false;\n      this.connectionPool.delete(serverId);\n    }\n\n    const timeout = this.connectionTimeouts.get(serverId);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.connectionTimeouts.delete(serverId);\n    }\n  }\n\n  /**\n   * Clean up all connections\n   */\n  async cleanup(): Promise<void> {\n    const serverIds = Array.from(this.connectionPool.keys());\n    await Promise.all(serverIds.map(id => this.closeConnection(id)));\n  }\n\n  /**\n   * Get connection status\n   */\n  getConnectionStatus(serverId: string): { isConnected: boolean; lastHeartbeat?: Date } {\n    const connection = this.connectionPool.get(serverId);\n    return {\n      isConnected: connection?.isConnected || false,\n      lastHeartbeat: connection?.lastHeartbeat,\n    };\n  }\n\n  /**\n   * Get active connections count\n   */\n  getActiveConnectionsCount(): number {\n    return Array.from(this.connectionPool.values()).filter(conn => conn.isConnected).length;\n  }\n\n  /**\n   * Create execution context from n8n node data\n   */\n  createExecutionContext(\n    connection: MCPConnection,\n    tool: MCPTool,\n    nodeParameters: Record<string, unknown>,\n    inputData: N8nExecutionData[]\n  ): MCPExecutionContext {\n    return {\n      connection,\n      tool,\n      nodeParameters,\n      inputData,\n    };\n  }\n\n  /**\n   * Validate execution context\n   */\n  validateExecutionContext(context: MCPExecutionContext): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!context.connection?.serverId) {\n      errors.push('Missing server ID in connection');\n    }\n\n    if (!context.connection?.url) {\n      errors.push('Missing server URL in connection');\n    }\n\n    if (!context.tool?.name) {\n      errors.push('Missing tool name');\n    }\n\n    if (!context.tool?.inputSchema) {\n      errors.push('Missing tool input schema');\n    }\n\n    if (!context.inputData || !Array.isArray(context.inputData)) {\n      errors.push('Invalid input data format');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n}\n"],"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","ignoreList":[]}