da88499f3eb1ba03f2b32b471fd4f02a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const authProvider_1 = require("../../../src/auth/authProvider");
// Test implementation of BaseAuthProvider for testing abstract methods
class TestAuthProvider extends authProvider_1.BaseAuthProvider {
    shouldAuthenticate;
    mockUser;
    constructor(shouldAuthenticate = true, mockUser = null) {
        super();
        this.shouldAuthenticate = shouldAuthenticate;
        this.mockUser = mockUser || {
            id: 'test-user',
            name: 'Test User',
            email: 'test@example.com',
            roles: ['member'],
            permissions: {
                community: true,
                enterprise: false,
                workflows: true,
                executions: true,
                credentials: false,
                users: false,
                audit: false,
            },
            n8nApiKey: 'test-api-key',
            n8nBaseUrl: 'https://test.n8n.io',
        };
    }
    async authenticate(context) {
        if (!this.shouldAuthenticate) {
            return {
                success: false,
                error: 'Authentication failed',
            };
        }
        if (!this.mockUser) {
            return {
                success: false,
                error: 'No mock user configured',
            };
        }
        return {
            success: true,
            user: this.mockUser,
            context: {
                authType: 'test',
            },
        };
    }
    async refresh(context) {
        return this.authenticate(context);
    }
    // Expose protected method for testing
    testCreatePermissions(roles) {
        return this.createPermissions(roles);
    }
}
(0, globals_1.describe)('AuthProvider Interface and Base Implementation', () => {
    let authProvider;
    let mockUser;
    let mockContext;
    (0, globals_1.beforeEach)(() => {
        mockUser = {
            id: 'test-user',
            name: 'Test User',
            email: 'test@example.com',
            roles: ['member'],
            permissions: {
                community: true,
                enterprise: false,
                workflows: true,
                executions: true,
                credentials: false,
                users: false,
                audit: false,
            },
            n8nApiKey: 'test-api-key',
            n8nBaseUrl: 'https://test.n8n.io',
        };
        mockContext = {
            clientId: 'test-client',
            headers: {
                authorization: 'Bearer test-token',
            },
            metadata: {},
            user: mockUser,
        };
        authProvider = new TestAuthProvider(true, mockUser);
    });
    (0, globals_1.describe)('Authentication Flow', () => {
        (0, globals_1.it)('should authenticate successfully', async () => {
            const result = await authProvider.authenticate(mockContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.user).toEqual(mockUser);
            (0, globals_1.expect)(result.context).toEqual({ authType: 'test' });
            (0, globals_1.expect)(result.error).toBeUndefined();
        });
        (0, globals_1.it)('should handle authentication failure', async () => {
            const failingProvider = new TestAuthProvider(false);
            const result = await failingProvider.authenticate(mockContext);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Authentication failed');
            (0, globals_1.expect)(result.user).toBeUndefined();
        });
        (0, globals_1.it)('should refresh authentication', async () => {
            const result = await authProvider.refresh(mockContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.user).toEqual(mockUser);
        });
    });
    (0, globals_1.describe)('Tool Access Control', () => {
        (0, globals_1.it)('should deny access when user is not authenticated', async () => {
            const unauthenticatedContext = { ...mockContext, user: undefined };
            const hasAccess = await authProvider.canAccessTool('list-workflows', unauthenticatedContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should allow access to community tools for authenticated users', async () => {
            const hasAccess = await authProvider.canAccessTool('init-n8n', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should allow access to workflow tools for users with workflow permissions', async () => {
            const hasAccess = await authProvider.canAccessTool('list-workflows', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should deny access to enterprise tools for non-enterprise users', async () => {
            const hasAccess = await authProvider.canAccessTool('list-projects', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should allow access to enterprise tools for enterprise users', async () => {
            const enterpriseUser = {
                ...mockUser,
                roles: ['admin'],
                permissions: {
                    ...mockUser.permissions,
                    enterprise: true,
                },
            };
            const enterpriseContext = { ...mockContext, user: enterpriseUser };
            const hasAccess = await authProvider.canAccessTool('list-projects', enterpriseContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should deny access to user management tools for non-admin users', async () => {
            const hasAccess = await authProvider.canAccessTool('list-users', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should allow access to user management tools for admin users', async () => {
            const adminUser = {
                ...mockUser,
                roles: ['admin'],
                permissions: {
                    ...mockUser.permissions,
                    users: true,
                },
            };
            const adminContext = { ...mockContext, user: adminUser };
            const hasAccess = await authProvider.canAccessTool('list-users', adminContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should default to community access for unknown tools', async () => {
            const hasAccess = await authProvider.canAccessTool('unknown-tool', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true); // Community access
        });
        (0, globals_1.it)('should handle credential tools based on permissions', async () => {
            // Member user without credential permissions
            let hasAccess = await authProvider.canAccessTool('list-credentials', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
            // Editor user with credential permissions
            const editorUser = {
                ...mockUser,
                roles: ['editor'],
                permissions: {
                    ...mockUser.permissions,
                    credentials: true,
                },
            };
            const editorContext = { ...mockContext, user: editorUser };
            hasAccess = await authProvider.canAccessTool('list-credentials', editorContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should handle audit tools based on permissions', async () => {
            // Regular user without audit permissions
            let hasAccess = await authProvider.canAccessTool('get-audit-logs', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
            // Admin user with audit permissions
            const adminUser = {
                ...mockUser,
                roles: ['admin'],
                permissions: {
                    ...mockUser.permissions,
                    audit: true,
                },
            };
            const adminContext = { ...mockContext, user: adminUser };
            hasAccess = await authProvider.canAccessTool('get-audit-logs', adminContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should handle tag tools with appropriate permissions', async () => {
            // List tags (community feature)
            let hasAccess = await authProvider.canAccessTool('list-tags', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
            // Create/update/delete tags (workflow permission required)
            hasAccess = await authProvider.canAccessTool('create-tag', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true); // User has workflow permissions
            // Test user without workflow permissions
            const limitedUser = {
                ...mockUser,
                permissions: {
                    ...mockUser.permissions,
                    workflows: false,
                },
            };
            const limitedContext = { ...mockContext, user: limitedUser };
            hasAccess = await authProvider.canAccessTool('create-tag', limitedContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
    });
    (0, globals_1.describe)('Resource Access Control', () => {
        (0, globals_1.it)('should deny access when user is not authenticated', async () => {
            const unauthenticatedContext = { ...mockContext, user: undefined };
            const hasAccess = await authProvider.canAccessResource('n8n://workflows/123', unauthenticatedContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should allow access to workflow resources for users with workflow permissions', async () => {
            const hasAccess = await authProvider.canAccessResource('n8n://workflows/123', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should allow access to execution resources for users with execution permissions', async () => {
            const hasAccess = await authProvider.canAccessResource('n8n://executions/456', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should deny access to credential resources for users without credential permissions', async () => {
            const hasAccess = await authProvider.canAccessResource('n8n://credentials/789', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should allow access to credential resources for users with credential permissions', async () => {
            const editorUser = {
                ...mockUser,
                permissions: {
                    ...mockUser.permissions,
                    credentials: true,
                },
            };
            const editorContext = { ...mockContext, user: editorUser };
            const hasAccess = await authProvider.canAccessResource('n8n://credentials/789', editorContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should deny access to user resources for non-admin users', async () => {
            const hasAccess = await authProvider.canAccessResource('n8n://users/123', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should allow access to user resources for admin users', async () => {
            const adminUser = {
                ...mockUser,
                permissions: {
                    ...mockUser.permissions,
                    users: true,
                },
            };
            const adminContext = { ...mockContext, user: adminUser };
            const hasAccess = await authProvider.canAccessResource('n8n://users/123', adminContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should deny access to project resources for non-enterprise users', async () => {
            const hasAccess = await authProvider.canAccessResource('n8n://projects/456', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should allow access to project resources for enterprise users', async () => {
            const enterpriseUser = {
                ...mockUser,
                permissions: {
                    ...mockUser.permissions,
                    enterprise: true,
                },
            };
            const enterpriseContext = { ...mockContext, user: enterpriseUser };
            const hasAccess = await authProvider.canAccessResource('n8n://projects/456', enterpriseContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should default to community access for unknown resource types', async () => {
            const hasAccess = await authProvider.canAccessResource('n8n://unknown/123', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
        (0, globals_1.it)('should handle non-n8n resource URIs with community access', async () => {
            const hasAccess = await authProvider.canAccessResource('https://example.com/api', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true);
        });
    });
    (0, globals_1.describe)('Permission System', () => {
        (0, globals_1.it)('should create correct permissions for anonymous users', () => {
            const permissions = authProvider.testCreatePermissions(['anonymous']);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: false,
                workflows: false,
                executions: false,
                credentials: false,
                users: false,
                audit: false,
            });
        });
        (0, globals_1.it)('should create correct permissions for member users', () => {
            const permissions = authProvider.testCreatePermissions(['member']);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: false,
                workflows: true,
                executions: true,
                credentials: false,
                users: false,
                audit: false,
            });
        });
        (0, globals_1.it)('should create correct permissions for editor users', () => {
            const permissions = authProvider.testCreatePermissions(['editor']);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: false,
                workflows: true,
                executions: true,
                credentials: true,
                users: false,
                audit: false,
            });
        });
        (0, globals_1.it)('should create correct permissions for admin users', () => {
            const permissions = authProvider.testCreatePermissions(['admin']);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: true,
                workflows: true,
                executions: true,
                credentials: true,
                users: true,
                audit: true,
            });
        });
        (0, globals_1.it)('should create correct permissions for owner users', () => {
            const permissions = authProvider.testCreatePermissions(['owner']);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: true,
                workflows: true,
                executions: true,
                credentials: true,
                users: true,
                audit: true,
            });
        });
        (0, globals_1.it)('should handle multiple roles correctly (highest permission wins)', () => {
            const permissions = authProvider.testCreatePermissions(['member', 'admin']);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: true,
                workflows: true,
                executions: true,
                credentials: true,
                users: true,
                audit: true,
            });
        });
        (0, globals_1.it)('should handle empty roles array', () => {
            const permissions = authProvider.testCreatePermissions([]);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: false,
                workflows: false,
                executions: false,
                credentials: false,
                users: false,
                audit: false,
            });
        });
        (0, globals_1.it)('should handle unknown roles as basic community access', () => {
            const permissions = authProvider.testCreatePermissions(['unknown-role']);
            (0, globals_1.expect)(permissions).toEqual({
                community: true,
                enterprise: false,
                workflows: false,
                executions: false,
                credentials: false,
                users: false,
                audit: false,
            });
        });
    });
    (0, globals_1.describe)('Context and Data Types', () => {
        (0, globals_1.it)('should handle RequestContext with minimal data', () => {
            const minimalContext = {};
            (0, globals_1.expect)(minimalContext).toBeDefined();
        });
        (0, globals_1.it)('should handle RequestContext with full data', () => {
            const fullContext = {
                clientId: 'client-123',
                headers: {
                    authorization: 'Bearer token',
                    'x-custom-header': 'value',
                },
                metadata: {
                    userAgent: 'test-client/1.0',
                    timestamp: Date.now(),
                },
                user: mockUser,
            };
            (0, globals_1.expect)(fullContext.clientId).toBe('client-123');
            (0, globals_1.expect)(fullContext.headers?.['authorization']).toBe('Bearer token');
            (0, globals_1.expect)(fullContext.metadata?.userAgent).toBe('test-client/1.0');
            (0, globals_1.expect)(fullContext.user).toEqual(mockUser);
        });
        (0, globals_1.it)('should validate AuthResult structure for success', () => {
            const successResult = {
                success: true,
                user: mockUser,
                context: {
                    authType: 'test',
                    sessionId: 'session-123',
                },
            };
            (0, globals_1.expect)(successResult.success).toBe(true);
            (0, globals_1.expect)(successResult.user).toEqual(mockUser);
            (0, globals_1.expect)(successResult.error).toBeUndefined();
        });
        (0, globals_1.it)('should validate AuthResult structure for failure', () => {
            const failureResult = {
                success: false,
                error: 'Authentication failed',
            };
            (0, globals_1.expect)(failureResult.success).toBe(false);
            (0, globals_1.expect)(failureResult.error).toBe('Authentication failed');
            (0, globals_1.expect)(failureResult.user).toBeUndefined();
        });
        (0, globals_1.it)('should validate AuthenticatedUser structure', () => {
            (0, globals_1.expect)(mockUser.id).toBe('test-user');
            (0, globals_1.expect)(mockUser.roles).toContain('member');
            (0, globals_1.expect)(mockUser.permissions.community).toBe(true);
            (0, globals_1.expect)(typeof mockUser.permissions).toBe('object');
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.it)('should handle null/undefined user gracefully in tool access', async () => {
            const contextWithNullUser = { ...mockContext, user: null };
            const hasAccess = await authProvider.canAccessTool('list-workflows', contextWithNullUser);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should handle null/undefined user gracefully in resource access', async () => {
            const contextWithNullUser = { ...mockContext, user: null };
            const hasAccess = await authProvider.canAccessResource('n8n://workflows/123', contextWithNullUser);
            (0, globals_1.expect)(hasAccess).toBe(false);
        });
        (0, globals_1.it)('should handle malformed permissions object', async () => {
            const userWithMalformedPermissions = {
                ...mockUser,
                permissions: null,
            };
            const contextWithMalformedPermissions = {
                ...mockContext,
                user: userWithMalformedPermissions,
            };
            // Should not throw an error, but deny access
            await (0, globals_1.expect)(authProvider.canAccessTool('list-workflows', contextWithMalformedPermissions)).rejects.toThrow();
        });
        (0, globals_1.it)('should handle empty string tool names', async () => {
            const hasAccess = await authProvider.canAccessTool('', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true); // Default to community access
        });
        (0, globals_1.it)('should handle empty string resource URIs', async () => {
            const hasAccess = await authProvider.canAccessResource('', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true); // Default to community access
        });
        (0, globals_1.it)('should handle special characters in tool names', async () => {
            const hasAccess = await authProvider.canAccessTool('tool-with-special-chars!@#$%', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true); // Default to community access
        });
        (0, globals_1.it)('should handle special characters in resource URIs', async () => {
            const hasAccess = await authProvider.canAccessResource('n8n://resources/with-special@chars!', mockContext);
            (0, globals_1.expect)(hasAccess).toBe(true); // Default to community access
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,