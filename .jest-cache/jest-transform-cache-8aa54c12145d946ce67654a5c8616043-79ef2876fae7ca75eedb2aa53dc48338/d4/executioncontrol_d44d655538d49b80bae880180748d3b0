9caa6c1525a33908c1d5c9a0547e51ed
"use strict";

/**
 * Execution Control Tools for n8n MCP Server
 *
 * Provides sophisticated execution control tools for canceling, retrying,
 * and partial workflow execution with advanced state management.
 */
/* istanbul ignore next */
function cov_20mszqtp72() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/execution-control.ts";
  var hash = "4ab62fd1c4e2ddcca062eeab846e5c4840e14c48";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/execution-control.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 66
        }
      },
      "2": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 10,
          column: 28
        }
      },
      "3": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 11,
          column: 36
        }
      },
      "4": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 65
        }
      },
      "5": {
        start: {
          line: 14,
          column: 31
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "6": {
        start: {
          line: 21,
          column: 29
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "7": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 35,
          column: 2
        }
      },
      "8": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 43,
          column: 2
        }
      },
      "9": {
        start: {
          line: 44,
          column: 36
        },
        end: {
          line: 50,
          column: 2
        }
      },
      "10": {
        start: {
          line: 51,
          column: 34
        },
        end: {
          line: 55,
          column: 2
        }
      },
      "11": {
        start: {
          line: 56,
          column: 32
        },
        end: {
          line: 59,
          column: 2
        }
      },
      "12": {
        start: {
          line: 60,
          column: 33
        },
        end: {
          line: 65,
          column: 2
        }
      },
      "13": {
        start: {
          line: 66,
          column: 34
        },
        end: {
          line: 72,
          column: 2
        }
      },
      "14": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "15": {
        start: {
          line: 76,
          column: 33
        },
        end: {
          line: 81,
          column: 1
        }
      },
      "16": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "17": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 80
        }
      },
      "18": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 33
        }
      },
      "19": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 154,
          column: 7
        }
      },
      "20": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "21": {
        start: {
          line: 98,
          column: 31
        },
        end: {
          line: 98,
          column: 42
        }
      },
      "22": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 101,
          column: 17
        }
      },
      "23": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 108
        }
      },
      "24": {
        start: {
          line: 102,
          column: 37
        },
        end: {
          line: 102,
          column: 63
        }
      },
      "25": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 110,
          column: 17
        }
      },
      "26": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 76
        }
      },
      "27": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 109,
          column: 154
        }
      },
      "28": {
        start: {
          line: 112,
          column: 30
        },
        end: {
          line: 112,
          column: 80
        }
      },
      "29": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 116,
          column: 17
        }
      },
      "30": {
        start: {
          line: 114,
          column: 46
        },
        end: {
          line: 114,
          column: 89
        }
      },
      "31": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 81
        }
      },
      "32": {
        start: {
          line: 118,
          column: 32
        },
        end: {
          line: 128,
          column: 17
        }
      },
      "33": {
        start: {
          line: 130,
          column: 33
        },
        end: {
          line: 130,
          column: 82
        }
      },
      "34": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "35": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 137,
          column: 82
        }
      },
      "36": {
        start: {
          line: 139,
          column: 35
        },
        end: {
          line: 139,
          column: 108
        }
      },
      "37": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 148,
          column: 45
        }
      },
      "38": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 138
        }
      },
      "39": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 230,
          column: 7
        }
      },
      "40": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "41": {
        start: {
          line: 169,
          column: 31
        },
        end: {
          line: 169,
          column: 42
        }
      },
      "42": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 172,
          column: 17
        }
      },
      "43": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 108
        }
      },
      "44": {
        start: {
          line: 173,
          column: 37
        },
        end: {
          line: 173,
          column: 63
        }
      },
      "45": {
        start: {
          line: 175,
          column: 34
        },
        end: {
          line: 175,
          column: 77
        }
      },
      "46": {
        start: {
          line: 177,
          column: 30
        },
        end: {
          line: 177,
          column: 80
        }
      },
      "47": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "48": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 64
        }
      },
      "49": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 81
        }
      },
      "50": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 192,
          column: 17
        }
      },
      "51": {
        start: {
          line: 184,
          column: 46
        },
        end: {
          line: 184,
          column: 92
        }
      },
      "52": {
        start: {
          line: 185,
          column: 39
        },
        end: {
          line: 185,
          column: 95
        }
      },
      "53": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 191,
          column: 121
        }
      },
      "54": {
        start: {
          line: 194,
          column: 32
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "55": {
        start: {
          line: 207,
          column: 33
        },
        end: {
          line: 207,
          column: 82
        }
      },
      "56": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "57": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 212,
          column: 71
        }
      },
      "58": {
        start: {
          line: 214,
          column: 34
        },
        end: {
          line: 214,
          column: 61
        }
      },
      "59": {
        start: {
          line: 215,
          column: 39
        },
        end: {
          line: 215,
          column: 92
        }
      },
      "60": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 224,
          column: 45
        }
      },
      "61": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 136
        }
      },
      "62": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 289,
          column: 7
        }
      },
      "63": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "64": {
        start: {
          line: 245,
          column: 31
        },
        end: {
          line: 245,
          column: 42
        }
      },
      "65": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 248,
          column: 17
        }
      },
      "66": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 247,
          column: 108
        }
      },
      "67": {
        start: {
          line: 249,
          column: 37
        },
        end: {
          line: 249,
          column: 63
        }
      },
      "68": {
        start: {
          line: 251,
          column: 34
        },
        end: {
          line: 251,
          column: 77
        }
      },
      "69": {
        start: {
          line: 253,
          column: 30
        },
        end: {
          line: 253,
          column: 80
        }
      },
      "70": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 257,
          column: 17
        }
      },
      "71": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 64
        }
      },
      "72": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 81
        }
      },
      "73": {
        start: {
          line: 259,
          column: 32
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "74": {
        start: {
          line: 269,
          column: 33
        },
        end: {
          line: 269,
          column: 82
        }
      },
      "75": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 275,
          column: 17
        }
      },
      "76": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 274,
          column: 65
        }
      },
      "77": {
        start: {
          line: 276,
          column: 41
        },
        end: {
          line: 276,
          column: 71
        }
      },
      "78": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 283,
          column: 45
        }
      },
      "79": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 137
        }
      },
      "80": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 366,
          column: 7
        }
      },
      "81": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "82": {
        start: {
          line: 304,
          column: 31
        },
        end: {
          line: 304,
          column: 42
        }
      },
      "83": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 307,
          column: 17
        }
      },
      "84": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 306,
          column: 108
        }
      },
      "85": {
        start: {
          line: 308,
          column: 37
        },
        end: {
          line: 308,
          column: 63
        }
      },
      "86": {
        start: {
          line: 310,
          column: 34
        },
        end: {
          line: 310,
          column: 77
        }
      },
      "87": {
        start: {
          line: 312,
          column: 30
        },
        end: {
          line: 312,
          column: 80
        }
      },
      "88": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 316,
          column: 17
        }
      },
      "89": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 64
        }
      },
      "90": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 315,
          column: 81
        }
      },
      "91": {
        start: {
          line: 318,
          column: 38
        },
        end: {
          line: 318,
          column: 73
        }
      },
      "92": {
        start: {
          line: 319,
          column: 32
        },
        end: {
          line: 319,
          column: 66
        }
      },
      "93": {
        start: {
          line: 319,
          column: 58
        },
        end: {
          line: 319,
          column: 65
        }
      },
      "94": {
        start: {
          line: 320,
          column: 37
        },
        end: {
          line: 320,
          column: 97
        }
      },
      "95": {
        start: {
          line: 320,
          column: 71
        },
        end: {
          line: 320,
          column: 96
        }
      },
      "96": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 327,
          column: 17
        }
      },
      "97": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 326,
          column: 76
        }
      },
      "98": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 334,
          column: 18
        }
      },
      "99": {
        start: {
          line: 336,
          column: 32
        },
        end: {
          line: 348,
          column: 17
        }
      },
      "100": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 79
        }
      },
      "101": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 360,
          column: 100
        }
      },
      "102": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 148
        }
      },
      "103": {
        start: {
          line: 368,
          column: 4
        },
        end: {
          line: 485,
          column: 7
        }
      },
      "104": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 483,
          column: 13
        }
      },
      "105": {
        start: {
          line: 381,
          column: 31
        },
        end: {
          line: 381,
          column: 42
        }
      },
      "106": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 384,
          column: 17
        }
      },
      "107": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 108
        }
      },
      "108": {
        start: {
          line: 385,
          column: 37
        },
        end: {
          line: 385,
          column: 63
        }
      },
      "109": {
        start: {
          line: 387,
          column: 37
        },
        end: {
          line: 397,
          column: 17
        }
      },
      "110": {
        start: {
          line: 398,
          column: 32
        },
        end: {
          line: 398,
          column: 34
        }
      },
      "111": {
        start: {
          line: 399,
          column: 35
        },
        end: {
          line: 399,
          column: 36
        }
      },
      "112": {
        start: {
          line: 400,
          column: 35
        },
        end: {
          line: 400,
          column: 36
        }
      },
      "113": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 455,
          column: 17
        }
      },
      "114": {
        start: {
          line: 402,
          column: 20
        },
        end: {
          line: 454,
          column: 21
        }
      },
      "115": {
        start: {
          line: 404,
          column: 42
        },
        end: {
          line: 404,
          column: 80
        }
      },
      "116": {
        start: {
          line: 406,
          column: 38
        },
        end: {
          line: 406,
          column: 83
        }
      },
      "117": {
        start: {
          line: 407,
          column: 24
        },
        end: {
          line: 410,
          column: 25
        }
      },
      "118": {
        start: {
          line: 408,
          column: 28
        },
        end: {
          line: 408,
          column: 72
        }
      },
      "119": {
        start: {
          line: 409,
          column: 28
        },
        end: {
          line: 409,
          column: 84
        }
      },
      "120": {
        start: {
          line: 412,
          column: 40
        },
        end: {
          line: 418,
          column: 25
        }
      },
      "121": {
        start: {
          line: 419,
          column: 41
        },
        end: {
          line: 419,
          column: 90
        }
      },
      "122": {
        start: {
          line: 420,
          column: 24
        },
        end: {
          line: 440,
          column: 25
        }
      },
      "123": {
        start: {
          line: 421,
          column: 28
        },
        end: {
          line: 421,
          column: 43
        }
      },
      "124": {
        start: {
          line: 422,
          column: 28
        },
        end: {
          line: 427,
          column: 31
        }
      },
      "125": {
        start: {
          line: 430,
          column: 28
        },
        end: {
          line: 430,
          column: 43
        }
      },
      "126": {
        start: {
          line: 431,
          column: 28
        },
        end: {
          line: 436,
          column: 31
        }
      },
      "127": {
        start: {
          line: 437,
          column: 28
        },
        end: {
          line: 439,
          column: 29
        }
      },
      "128": {
        start: {
          line: 438,
          column: 32
        },
        end: {
          line: 438,
          column: 38
        }
      },
      "129": {
        start: {
          line: 443,
          column: 24
        },
        end: {
          line: 443,
          column: 39
        }
      },
      "130": {
        start: {
          line: 444,
          column: 45
        },
        end: {
          line: 444,
          column: 101
        }
      },
      "131": {
        start: {
          line: 445,
          column: 24
        },
        end: {
          line: 450,
          column: 27
        }
      },
      "132": {
        start: {
          line: 451,
          column: 24
        },
        end: {
          line: 453,
          column: 25
        }
      },
      "133": {
        start: {
          line: 452,
          column: 28
        },
        end: {
          line: 452,
          column: 34
        }
      },
      "134": {
        start: {
          line: 456,
          column: 39
        },
        end: {
          line: 456,
          column: 57
        }
      },
      "135": {
        start: {
          line: 457,
          column: 36
        },
        end: {
          line: 457,
          column: 95
        }
      },
      "136": {
        start: {
          line: 458,
          column: 29
        },
        end: {
          line: 458,
          column: 149
        }
      },
      "137": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 59
        }
      },
      "138": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 460,
          column: 82
        }
      },
      "139": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 461,
          column: 64
        }
      },
      "140": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 462,
          column: 60
        }
      },
      "141": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 66
        }
      },
      "142": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 100
        }
      },
      "143": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 54
        }
      },
      "144": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 478,
          column: 19
        }
      },
      "145": {
        start: {
          line: 467,
          column: 39
        },
        end: {
          line: 467,
          column: 65
        }
      },
      "146": {
        start: {
          line: 468,
          column: 20
        },
        end: {
          line: 468,
          column: 88
        }
      },
      "147": {
        start: {
          line: 469,
          column: 20
        },
        end: {
          line: 469,
          column: 88
        }
      },
      "148": {
        start: {
          line: 470,
          column: 20
        },
        end: {
          line: 472,
          column: 21
        }
      },
      "149": {
        start: {
          line: 471,
          column: 24
        },
        end: {
          line: 471,
          column: 73
        }
      },
      "150": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 66
        }
      },
      "151": {
        start: {
          line: 474,
          column: 20
        },
        end: {
          line: 476,
          column: 21
        }
      },
      "152": {
        start: {
          line: 475,
          column: 24
        },
        end: {
          line: 475,
          column: 66
        }
      },
      "153": {
        start: {
          line: 477,
          column: 20
        },
        end: {
          line: 477,
          column: 35
        }
      },
      "154": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 30
        }
      },
      "155": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 152
        }
      },
      "156": {
        start: {
          line: 487,
          column: 4
        },
        end: {
          line: 535,
          column: 7
        }
      },
      "157": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 533,
          column: 13
        }
      },
      "158": {
        start: {
          line: 500,
          column: 31
        },
        end: {
          line: 500,
          column: 42
        }
      },
      "159": {
        start: {
          line: 501,
          column: 16
        },
        end: {
          line: 503,
          column: 17
        }
      },
      "160": {
        start: {
          line: 502,
          column: 20
        },
        end: {
          line: 502,
          column: 108
        }
      },
      "161": {
        start: {
          line: 504,
          column: 37
        },
        end: {
          line: 504,
          column: 63
        }
      },
      "162": {
        start: {
          line: 506,
          column: 34
        },
        end: {
          line: 506,
          column: 77
        }
      },
      "163": {
        start: {
          line: 508,
          column: 30
        },
        end: {
          line: 508,
          column: 80
        }
      },
      "164": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 512,
          column: 17
        }
      },
      "165": {
        start: {
          line: 510,
          column: 20
        },
        end: {
          line: 510,
          column: 64
        }
      },
      "166": {
        start: {
          line: 511,
          column: 20
        },
        end: {
          line: 511,
          column: 81
        }
      },
      "167": {
        start: {
          line: 514,
          column: 35
        },
        end: {
          line: 514,
          column: 121
        }
      },
      "168": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 520,
          column: 17
        }
      },
      "169": {
        start: {
          line: 516,
          column: 20
        },
        end: {
          line: 519,
          column: 94
        }
      },
      "170": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 529,
          column: 98
        }
      },
      "171": {
        start: {
          line: 532,
          column: 16
        },
        end: {
          line: 532,
          column: 138
        }
      },
      "172": {
        start: {
          line: 537,
          column: 4
        },
        end: {
          line: 570,
          column: 7
        }
      },
      "173": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 568,
          column: 13
        }
      },
      "174": {
        start: {
          line: 550,
          column: 37
        },
        end: {
          line: 550,
          column: 63
        }
      },
      "175": {
        start: {
          line: 552,
          column: 32
        },
        end: {
          line: 552,
          column: 85
        }
      },
      "176": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 558,
          column: 17
        }
      },
      "177": {
        start: {
          line: 554,
          column: 20
        },
        end: {
          line: 557,
          column: 118
        }
      },
      "178": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 564,
          column: 97
        }
      },
      "179": {
        start: {
          line: 567,
          column: 16
        },
        end: {
          line: 567,
          column: 139
        }
      },
      "180": {
        start: {
          line: 572,
          column: 4
        },
        end: {
          line: 646,
          column: 7
        }
      },
      "181": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 644,
          column: 13
        }
      },
      "182": {
        start: {
          line: 585,
          column: 37
        },
        end: {
          line: 585,
          column: 63
        }
      },
      "183": {
        start: {
          line: 587,
          column: 34
        },
        end: {
          line: 587,
          column: 86
        }
      },
      "184": {
        start: {
          line: 588,
          column: 16
        },
        end: {
          line: 593,
          column: 17
        }
      },
      "185": {
        start: {
          line: 589,
          column: 20
        },
        end: {
          line: 592,
          column: 98
        }
      },
      "186": {
        start: {
          line: 594,
          column: 29
        },
        end: {
          line: 594,
          column: 61
        }
      },
      "187": {
        start: {
          line: 595,
          column: 16
        },
        end: {
          line: 595,
          column: 70
        }
      },
      "188": {
        start: {
          line: 596,
          column: 16
        },
        end: {
          line: 596,
          column: 103
        }
      },
      "189": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 610,
          column: 17
        }
      },
      "190": {
        start: {
          line: 598,
          column: 20
        },
        end: {
          line: 598,
          column: 59
        }
      },
      "191": {
        start: {
          line: 599,
          column: 20
        },
        end: {
          line: 599,
          column: 111
        }
      },
      "192": {
        start: {
          line: 600,
          column: 20
        },
        end: {
          line: 600,
          column: 102
        }
      },
      "193": {
        start: {
          line: 601,
          column: 20
        },
        end: {
          line: 601,
          column: 90
        }
      },
      "194": {
        start: {
          line: 602,
          column: 20
        },
        end: {
          line: 602,
          column: 62
        }
      },
      "195": {
        start: {
          line: 603,
          column: 40
        },
        end: {
          line: 605,
          column: 37
        }
      },
      "196": {
        start: {
          line: 604,
          column: 48
        },
        end: {
          line: 604,
          column: 53
        }
      },
      "197": {
        start: {
          line: 606,
          column: 20
        },
        end: {
          line: 608,
          column: 23
        }
      },
      "198": {
        start: {
          line: 607,
          column: 24
        },
        end: {
          line: 607,
          column: 81
        }
      },
      "199": {
        start: {
          line: 609,
          column: 20
        },
        end: {
          line: 609,
          column: 35
        }
      },
      "200": {
        start: {
          line: 611,
          column: 16
        },
        end: {
          line: 620,
          column: 17
        }
      },
      "201": {
        start: {
          line: 612,
          column: 20
        },
        end: {
          line: 612,
          column: 54
        }
      },
      "202": {
        start: {
          line: 613,
          column: 20
        },
        end: {
          line: 619,
          column: 23
        }
      },
      "203": {
        start: {
          line: 614,
          column: 24
        },
        end: {
          line: 614,
          column: 78
        }
      },
      "204": {
        start: {
          line: 615,
          column: 24
        },
        end: {
          line: 615,
          column: 72
        }
      },
      "205": {
        start: {
          line: 616,
          column: 24
        },
        end: {
          line: 616,
          column: 78
        }
      },
      "206": {
        start: {
          line: 617,
          column: 24
        },
        end: {
          line: 617,
          column: 80
        }
      },
      "207": {
        start: {
          line: 618,
          column: 24
        },
        end: {
          line: 618,
          column: 81
        }
      },
      "208": {
        start: {
          line: 621,
          column: 16
        },
        end: {
          line: 621,
          column: 50
        }
      },
      "209": {
        start: {
          line: 622,
          column: 16
        },
        end: {
          line: 622,
          column: 106
        }
      },
      "210": {
        start: {
          line: 623,
          column: 16
        },
        end: {
          line: 628,
          column: 17
        }
      },
      "211": {
        start: {
          line: 624,
          column: 20
        },
        end: {
          line: 624,
          column: 57
        }
      },
      "212": {
        start: {
          line: 625,
          column: 20
        },
        end: {
          line: 627,
          column: 23
        }
      },
      "213": {
        start: {
          line: 626,
          column: 24
        },
        end: {
          line: 626,
          column: 124
        }
      },
      "214": {
        start: {
          line: 629,
          column: 16
        },
        end: {
          line: 629,
          column: 31
        }
      },
      "215": {
        start: {
          line: 630,
          column: 16
        },
        end: {
          line: 639,
          column: 17
        }
      },
      "216": {
        start: {
          line: 631,
          column: 20
        },
        end: {
          line: 631,
          column: 64
        }
      },
      "217": {
        start: {
          line: 632,
          column: 20
        },
        end: {
          line: 638,
          column: 23
        }
      },
      "218": {
        start: {
          line: 633,
          column: 45
        },
        end: {
          line: 633,
          column: 131
        }
      },
      "219": {
        start: {
          line: 634,
          column: 24
        },
        end: {
          line: 634,
          column: 142
        }
      },
      "220": {
        start: {
          line: 635,
          column: 24
        },
        end: {
          line: 635,
          column: 86
        }
      },
      "221": {
        start: {
          line: 636,
          column: 24
        },
        end: {
          line: 636,
          column: 95
        }
      },
      "222": {
        start: {
          line: 637,
          column: 24
        },
        end: {
          line: 637,
          column: 82
        }
      },
      "223": {
        start: {
          line: 640,
          column: 16
        },
        end: {
          line: 640,
          column: 30
        }
      },
      "224": {
        start: {
          line: 643,
          column: 16
        },
        end: {
          line: 643,
          column: 144
        }
      },
      "225": {
        start: {
          line: 648,
          column: 4
        },
        end: {
          line: 756,
          column: 7
        }
      },
      "226": {
        start: {
          line: 660,
          column: 12
        },
        end: {
          line: 754,
          column: 13
        }
      },
      "227": {
        start: {
          line: 661,
          column: 31
        },
        end: {
          line: 661,
          column: 42
        }
      },
      "228": {
        start: {
          line: 662,
          column: 16
        },
        end: {
          line: 664,
          column: 17
        }
      },
      "229": {
        start: {
          line: 663,
          column: 20
        },
        end: {
          line: 663,
          column: 108
        }
      },
      "230": {
        start: {
          line: 665,
          column: 37
        },
        end: {
          line: 665,
          column: 63
        }
      },
      "231": {
        start: {
          line: 667,
          column: 35
        },
        end: {
          line: 667,
          column: 52
        }
      },
      "232": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 672,
          column: 17
        }
      },
      "233": {
        start: {
          line: 670,
          column: 37
        },
        end: {
          line: 670,
          column: 86
        }
      },
      "234": {
        start: {
          line: 671,
          column: 20
        },
        end: {
          line: 671,
          column: 70
        }
      },
      "235": {
        start: {
          line: 671,
          column: 61
        },
        end: {
          line: 671,
          column: 68
        }
      },
      "236": {
        start: {
          line: 673,
          column: 42
        },
        end: {
          line: 673,
          column: 44
        }
      },
      "237": {
        start: {
          line: 674,
          column: 16
        },
        end: {
          line: 709,
          column: 17
        }
      },
      "238": {
        start: {
          line: 675,
          column: 20
        },
        end: {
          line: 708,
          column: 21
        }
      },
      "239": {
        start: {
          line: 676,
          column: 42
        },
        end: {
          line: 676,
          column: 80
        }
      },
      "240": {
        start: {
          line: 677,
          column: 40
        },
        end: {
          line: 677,
          column: 85
        }
      },
      "241": {
        start: {
          line: 679,
          column: 24
        },
        end: {
          line: 683,
          column: 25
        }
      },
      "242": {
        start: {
          line: 680,
          column: 28
        },
        end: {
          line: 682,
          column: 29
        }
      },
      "243": {
        start: {
          line: 681,
          column: 32
        },
        end: {
          line: 681,
          column: 41
        }
      },
      "244": {
        start: {
          line: 684,
          column: 39
        },
        end: {
          line: 692,
          column: 25
        }
      },
      "245": {
        start: {
          line: 693,
          column: 24
        },
        end: {
          line: 702,
          column: 25
        }
      },
      "246": {
        start: {
          line: 694,
          column: 28
        },
        end: {
          line: 694,
          column: 73
        }
      },
      "247": {
        start: {
          line: 695,
          column: 28
        },
        end: {
          line: 695,
          column: 79
        }
      },
      "248": {
        start: {
          line: 696,
          column: 28
        },
        end: {
          line: 698,
          column: 29
        }
      },
      "249": {
        start: {
          line: 697,
          column: 32
        },
        end: {
          line: 697,
          column: 75
        }
      },
      "250": {
        start: {
          line: 699,
          column: 28
        },
        end: {
          line: 701,
          column: 29
        }
      },
      "251": {
        start: {
          line: 700,
          column: 32
        },
        end: {
          line: 700,
          column: 65
        }
      },
      "252": {
        start: {
          line: 703,
          column: 24
        },
        end: {
          line: 703,
          column: 55
        }
      },
      "253": {
        start: {
          line: 707,
          column: 24
        },
        end: {
          line: 707,
          column: 33
        }
      },
      "254": {
        start: {
          line: 710,
          column: 16
        },
        end: {
          line: 713,
          column: 17
        }
      },
      "255": {
        start: {
          line: 711,
          column: 20
        },
        end: {
          line: 712,
          column: 86
        }
      },
      "256": {
        start: {
          line: 714,
          column: 29
        },
        end: {
          line: 714,
          column: 72
        }
      },
      "257": {
        start: {
          line: 715,
          column: 16
        },
        end: {
          line: 715,
          column: 82
        }
      },
      "258": {
        start: {
          line: 716,
          column: 16
        },
        end: {
          line: 716,
          column: 86
        }
      },
      "259": {
        start: {
          line: 718,
          column: 36
        },
        end: {
          line: 718,
          column: 38
        }
      },
      "260": {
        start: {
          line: 719,
          column: 16
        },
        end: {
          line: 725,
          column: 19
        }
      },
      "261": {
        start: {
          line: 720,
          column: 34
        },
        end: {
          line: 720,
          column: 71
        }
      },
      "262": {
        start: {
          line: 721,
          column: 20
        },
        end: {
          line: 723,
          column: 21
        }
      },
      "263": {
        start: {
          line: 722,
          column: 24
        },
        end: {
          line: 722,
          column: 48
        }
      },
      "264": {
        start: {
          line: 724,
          column: 20
        },
        end: {
          line: 724,
          column: 52
        }
      },
      "265": {
        start: {
          line: 726,
          column: 16
        },
        end: {
          line: 726,
          column: 49
        }
      },
      "266": {
        start: {
          line: 727,
          column: 16
        },
        end: {
          line: 730,
          column: 19
        }
      },
      "267": {
        start: {
          line: 728,
          column: 33
        },
        end: {
          line: 728,
          column: 53
        }
      },
      "268": {
        start: {
          line: 729,
          column: 20
        },
        end: {
          line: 729,
          column: 75
        }
      },
      "269": {
        start: {
          line: 731,
          column: 16
        },
        end: {
          line: 731,
          column: 31
        }
      },
      "270": {
        start: {
          line: 732,
          column: 16
        },
        end: {
          line: 732,
          column: 53
        }
      },
      "271": {
        start: {
          line: 733,
          column: 16
        },
        end: {
          line: 749,
          column: 19
        }
      },
      "272": {
        start: {
          line: 734,
          column: 39
        },
        end: {
          line: 734,
          column: 91
        }
      },
      "273": {
        start: {
          line: 735,
          column: 20
        },
        end: {
          line: 735,
          column: 88
        }
      },
      "274": {
        start: {
          line: 736,
          column: 20
        },
        end: {
          line: 736,
          column: 91
        }
      },
      "275": {
        start: {
          line: 737,
          column: 20
        },
        end: {
          line: 737,
          column: 74
        }
      },
      "276": {
        start: {
          line: 738,
          column: 20
        },
        end: {
          line: 738,
          column: 99
        }
      },
      "277": {
        start: {
          line: 739,
          column: 20
        },
        end: {
          line: 741,
          column: 21
        }
      },
      "278": {
        start: {
          line: 740,
          column: 24
        },
        end: {
          line: 740,
          column: 103
        }
      },
      "279": {
        start: {
          line: 742,
          column: 20
        },
        end: {
          line: 744,
          column: 21
        }
      },
      "280": {
        start: {
          line: 743,
          column: 24
        },
        end: {
          line: 743,
          column: 165
        }
      },
      "281": {
        start: {
          line: 745,
          column: 20
        },
        end: {
          line: 747,
          column: 21
        }
      },
      "282": {
        start: {
          line: 746,
          column: 24
        },
        end: {
          line: 746,
          column: 104
        }
      },
      "283": {
        start: {
          line: 748,
          column: 20
        },
        end: {
          line: 748,
          column: 35
        }
      },
      "284": {
        start: {
          line: 750,
          column: 16
        },
        end: {
          line: 750,
          column: 30
        }
      },
      "285": {
        start: {
          line: 753,
          column: 16
        },
        end: {
          line: 753,
          column: 139
        }
      },
      "286": {
        start: {
          line: 760,
          column: 4
        },
        end: {
          line: 785,
          column: 5
        }
      },
      "287": {
        start: {
          line: 762,
          column: 12
        },
        end: {
          line: 762,
          column: 24
        }
      },
      "288": {
        start: {
          line: 765,
          column: 12
        },
        end: {
          line: 765,
          column: 23
        }
      },
      "289": {
        start: {
          line: 768,
          column: 12
        },
        end: {
          line: 768,
          column: 23
        }
      },
      "290": {
        start: {
          line: 770,
          column: 12
        },
        end: {
          line: 770,
          column: 24
        }
      },
      "291": {
        start: {
          line: 772,
          column: 12
        },
        end: {
          line: 772,
          column: 24
        }
      },
      "292": {
        start: {
          line: 774,
          column: 12
        },
        end: {
          line: 774,
          column: 24
        }
      },
      "293": {
        start: {
          line: 776,
          column: 12
        },
        end: {
          line: 776,
          column: 23
        }
      },
      "294": {
        start: {
          line: 778,
          column: 12
        },
        end: {
          line: 778,
          column: 24
        }
      },
      "295": {
        start: {
          line: 780,
          column: 12
        },
        end: {
          line: 780,
          column: 24
        }
      },
      "296": {
        start: {
          line: 782,
          column: 12
        },
        end: {
          line: 782,
          column: 23
        }
      },
      "297": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 784,
          column: 23
        }
      },
      "298": {
        start: {
          line: 788,
          column: 4
        },
        end: {
          line: 799,
          column: 5
        }
      },
      "299": {
        start: {
          line: 789,
          column: 8
        },
        end: {
          line: 789,
          column: 25
        }
      },
      "300": {
        start: {
          line: 791,
          column: 9
        },
        end: {
          line: 799,
          column: 5
        }
      },
      "301": {
        start: {
          line: 792,
          column: 8
        },
        end: {
          line: 792,
          column: 44
        }
      },
      "302": {
        start: {
          line: 794,
          column: 9
        },
        end: {
          line: 799,
          column: 5
        }
      },
      "303": {
        start: {
          line: 795,
          column: 8
        },
        end: {
          line: 795,
          column: 45
        }
      },
      "304": {
        start: {
          line: 798,
          column: 8
        },
        end: {
          line: 798,
          column: 47
        }
      },
      "305": {
        start: {
          line: 802,
          column: 4
        },
        end: {
          line: 803,
          column: 21
        }
      },
      "306": {
        start: {
          line: 803,
          column: 8
        },
        end: {
          line: 803,
          column: 21
        }
      },
      "307": {
        start: {
          line: 804,
          column: 14
        },
        end: {
          line: 804,
          column: 18
        }
      },
      "308": {
        start: {
          line: 805,
          column: 18
        },
        end: {
          line: 805,
          column: 41
        }
      },
      "309": {
        start: {
          line: 806,
          column: 14
        },
        end: {
          line: 806,
          column: 55
        }
      },
      "310": {
        start: {
          line: 807,
          column: 4
        },
        end: {
          line: 807,
          column: 76
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 76,
            column: 33
          },
          end: {
            line: 76,
            column: 34
          }
        },
        loc: {
          start: {
            line: 76,
            column: 39
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 76
      },
      "1": {
        name: "createExecutionControlTools",
        decl: {
          start: {
            line: 83,
            column: 9
          },
          end: {
            line: 83,
            column: 36
          }
        },
        loc: {
          start: {
            line: 83,
            column: 56
          },
          end: {
            line: 757,
            column: 1
          }
        },
        line: 83
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 96,
            column: 17
          },
          end: {
            line: 96,
            column: 18
          }
        },
        loc: {
          start: {
            line: 96,
            column: 33
          },
          end: {
            line: 153,
            column: 9
          }
        },
        line: 96
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 167,
            column: 17
          },
          end: {
            line: 167,
            column: 18
          }
        },
        loc: {
          start: {
            line: 167,
            column: 33
          },
          end: {
            line: 229,
            column: 9
          }
        },
        line: 167
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 243,
            column: 17
          },
          end: {
            line: 243,
            column: 18
          }
        },
        loc: {
          start: {
            line: 243,
            column: 33
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 243
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 302,
            column: 17
          },
          end: {
            line: 302,
            column: 18
          }
        },
        loc: {
          start: {
            line: 302,
            column: 33
          },
          end: {
            line: 365,
            column: 9
          }
        },
        line: 302
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 319,
            column: 50
          },
          end: {
            line: 319,
            column: 51
          }
        },
        loc: {
          start: {
            line: 319,
            column: 58
          },
          end: {
            line: 319,
            column: 65
          }
        },
        line: 319
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 320,
            column: 61
          },
          end: {
            line: 320,
            column: 62
          }
        },
        loc: {
          start: {
            line: 320,
            column: 71
          },
          end: {
            line: 320,
            column: 96
          }
        },
        line: 320
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 379,
            column: 17
          },
          end: {
            line: 379,
            column: 18
          }
        },
        loc: {
          start: {
            line: 379,
            column: 33
          },
          end: {
            line: 484,
            column: 9
          }
        },
        line: 379
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 466,
            column: 32
          },
          end: {
            line: 466,
            column: 33
          }
        },
        loc: {
          start: {
            line: 466,
            column: 51
          },
          end: {
            line: 478,
            column: 17
          }
        },
        line: 466
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 498,
            column: 17
          },
          end: {
            line: 498,
            column: 18
          }
        },
        loc: {
          start: {
            line: 498,
            column: 33
          },
          end: {
            line: 534,
            column: 9
          }
        },
        line: 498
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 548,
            column: 17
          },
          end: {
            line: 548,
            column: 18
          }
        },
        loc: {
          start: {
            line: 548,
            column: 33
          },
          end: {
            line: 569,
            column: 9
          }
        },
        line: 548
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 583,
            column: 17
          },
          end: {
            line: 583,
            column: 18
          }
        },
        loc: {
          start: {
            line: 583,
            column: 33
          },
          end: {
            line: 645,
            column: 9
          }
        },
        line: 583
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 604,
            column: 30
          },
          end: {
            line: 604,
            column: 31
          }
        },
        loc: {
          start: {
            line: 604,
            column: 48
          },
          end: {
            line: 604,
            column: 53
          }
        },
        line: 604
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 606,
            column: 40
          },
          end: {
            line: 606,
            column: 41
          }
        },
        loc: {
          start: {
            line: 606,
            column: 64
          },
          end: {
            line: 608,
            column: 21
          }
        },
        line: 606
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 613,
            column: 45
          },
          end: {
            line: 613,
            column: 46
          }
        },
        loc: {
          start: {
            line: 613,
            column: 63
          },
          end: {
            line: 619,
            column: 21
          }
        },
        line: 613
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 625,
            column: 67
          },
          end: {
            line: 625,
            column: 68
          }
        },
        loc: {
          start: {
            line: 625,
            column: 81
          },
          end: {
            line: 627,
            column: 21
          }
        },
        line: 625
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 632,
            column: 52
          },
          end: {
            line: 632,
            column: 53
          }
        },
        loc: {
          start: {
            line: 632,
            column: 75
          },
          end: {
            line: 638,
            column: 21
          }
        },
        line: 632
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 659,
            column: 17
          },
          end: {
            line: 659,
            column: 18
          }
        },
        loc: {
          start: {
            line: 659,
            column: 33
          },
          end: {
            line: 755,
            column: 9
          }
        },
        line: 659
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 671,
            column: 53
          },
          end: {
            line: 671,
            column: 54
          }
        },
        loc: {
          start: {
            line: 671,
            column: 61
          },
          end: {
            line: 671,
            column: 68
          }
        },
        line: 671
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 719,
            column: 42
          },
          end: {
            line: 719,
            column: 43
          }
        },
        loc: {
          start: {
            line: 719,
            column: 52
          },
          end: {
            line: 725,
            column: 17
          }
        },
        line: 719
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 727,
            column: 52
          },
          end: {
            line: 727,
            column: 53
          }
        },
        loc: {
          start: {
            line: 727,
            column: 77
          },
          end: {
            line: 730,
            column: 17
          }
        },
        line: 727
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 733,
            column: 42
          },
          end: {
            line: 733,
            column: 43
          }
        },
        loc: {
          start: {
            line: 733,
            column: 61
          },
          end: {
            line: 749,
            column: 17
          }
        },
        line: 733
      },
      "23": {
        name: "getStatusIcon",
        decl: {
          start: {
            line: 759,
            column: 9
          },
          end: {
            line: 759,
            column: 22
          }
        },
        loc: {
          start: {
            line: 759,
            column: 30
          },
          end: {
            line: 786,
            column: 1
          }
        },
        line: 759
      },
      "24": {
        name: "formatDuration",
        decl: {
          start: {
            line: 787,
            column: 9
          },
          end: {
            line: 787,
            column: 23
          }
        },
        loc: {
          start: {
            line: 787,
            column: 28
          },
          end: {
            line: 800,
            column: 1
          }
        },
        line: 787
      },
      "25": {
        name: "formatBytes",
        decl: {
          start: {
            line: 801,
            column: 9
          },
          end: {
            line: 801,
            column: 20
          }
        },
        loc: {
          start: {
            line: 801,
            column: 28
          },
          end: {
            line: 808,
            column: 1
          }
        },
        line: 801
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "1": {
        loc: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "2": {
        loc: {
          start: {
            line: 109,
            column: 94
          },
          end: {
            line: 109,
            column: 150
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 119
          },
          end: {
            line: 109,
            column: 132
          }
        }, {
          start: {
            line: 109,
            column: 135
          },
          end: {
            line: 109,
            column: 150
          }
        }],
        line: 109
      },
      "3": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "4": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "5": {
        loc: {
          start: {
            line: 135,
            column: 40
          },
          end: {
            line: 135,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 40
          },
          end: {
            line: 135,
            column: 63
          }
        }, {
          start: {
            line: 135,
            column: 67
          },
          end: {
            line: 135,
            column: 83
          }
        }],
        line: 135
      },
      "6": {
        loc: {
          start: {
            line: 136,
            column: 25
          },
          end: {
            line: 136,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 51
          },
          end: {
            line: 136,
            column: 120
          }
        }, {
          start: {
            line: 136,
            column: 123
          },
          end: {
            line: 136,
            column: 125
          }
        }],
        line: 136
      },
      "7": {
        loc: {
          start: {
            line: 139,
            column: 49
          },
          end: {
            line: 139,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 49
          },
          end: {
            line: 139,
            column: 72
          }
        }, {
          start: {
            line: 139,
            column: 76
          },
          end: {
            line: 139,
            column: 107
          }
        }],
        line: 139
      },
      "8": {
        loc: {
          start: {
            line: 145,
            column: 21
          },
          end: {
            line: 145,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 51
          },
          end: {
            line: 145,
            column: 102
          }
        }, {
          start: {
            line: 145,
            column: 105
          },
          end: {
            line: 145,
            column: 107
          }
        }],
        line: 145
      },
      "9": {
        loc: {
          start: {
            line: 146,
            column: 21
          },
          end: {
            line: 146,
            column: 158
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 58
          },
          end: {
            line: 146,
            column: 153
          }
        }, {
          start: {
            line: 146,
            column: 156
          },
          end: {
            line: 146,
            column: 158
          }
        }],
        line: 146
      },
      "10": {
        loc: {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 147,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 52
          },
          end: {
            line: 147,
            column: 115
          }
        }, {
          start: {
            line: 147,
            column: 118
          },
          end: {
            line: 147,
            column: 120
          }
        }],
        line: 147
      },
      "11": {
        loc: {
          start: {
            line: 151,
            column: 78
          },
          end: {
            line: 151,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 103
          },
          end: {
            line: 151,
            column: 116
          }
        }, {
          start: {
            line: 151,
            column: 119
          },
          end: {
            line: 151,
            column: 134
          }
        }],
        line: 151
      },
      "12": {
        loc: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "13": {
        loc: {
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "14": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 192,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 192,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "15": {
        loc: {
          start: {
            line: 184,
            column: 46
          },
          end: {
            line: 184,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 46
          },
          end: {
            line: 184,
            column: 87
          }
        }, {
          start: {
            line: 184,
            column: 91
          },
          end: {
            line: 184,
            column: 92
          }
        }],
        line: 184
      },
      "16": {
        loc: {
          start: {
            line: 185,
            column: 39
          },
          end: {
            line: 185,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 39
          },
          end: {
            line: 185,
            column: 90
          }
        }, {
          start: {
            line: 185,
            column: 94
          },
          end: {
            line: 185,
            column: 95
          }
        }],
        line: 185
      },
      "17": {
        loc: {
          start: {
            line: 190,
            column: 41
          },
          end: {
            line: 190,
            column: 142
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 75
          },
          end: {
            line: 190,
            column: 101
          }
        }, {
          start: {
            line: 190,
            column: 104
          },
          end: {
            line: 190,
            column: 142
          }
        }],
        line: 190
      },
      "18": {
        loc: {
          start: {
            line: 196,
            column: 28
          },
          end: {
            line: 196,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 49
          },
          end: {
            line: 196,
            column: 66
          }
        }, {
          start: {
            line: 196,
            column: 69
          },
          end: {
            line: 196,
            column: 76
          }
        }],
        line: 196
      },
      "19": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "20": {
        loc: {
          start: {
            line: 211,
            column: 40
          },
          end: {
            line: 211,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 40
          },
          end: {
            line: 211,
            column: 63
          }
        }, {
          start: {
            line: 211,
            column: 67
          },
          end: {
            line: 211,
            column: 83
          }
        }],
        line: 211
      },
      "21": {
        loc: {
          start: {
            line: 215,
            column: 39
          },
          end: {
            line: 215,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 39
          },
          end: {
            line: 215,
            column: 87
          }
        }, {
          start: {
            line: 215,
            column: 91
          },
          end: {
            line: 215,
            column: 92
          }
        }],
        line: 215
      },
      "22": {
        loc: {
          start: {
            line: 220,
            column: 41
          },
          end: {
            line: 220,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 65
          },
          end: {
            line: 220,
            column: 113
          }
        }, {
          start: {
            line: 220,
            column: 116
          },
          end: {
            line: 220,
            column: 127
          }
        }],
        line: 220
      },
      "23": {
        loc: {
          start: {
            line: 222,
            column: 21
          },
          end: {
            line: 222,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 42
          },
          end: {
            line: 222,
            column: 93
          }
        }, {
          start: {
            line: 222,
            column: 96
          },
          end: {
            line: 222,
            column: 98
          }
        }],
        line: 222
      },
      "24": {
        loc: {
          start: {
            line: 223,
            column: 21
          },
          end: {
            line: 223,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 46
          },
          end: {
            line: 223,
            column: 100
          }
        }, {
          start: {
            line: 223,
            column: 103
          },
          end: {
            line: 223,
            column: 105
          }
        }],
        line: 223
      },
      "25": {
        loc: {
          start: {
            line: 227,
            column: 76
          },
          end: {
            line: 227,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 101
          },
          end: {
            line: 227,
            column: 114
          }
        }, {
          start: {
            line: 227,
            column: 117
          },
          end: {
            line: 227,
            column: 132
          }
        }],
        line: 227
      },
      "26": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 248,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 248,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "27": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "28": {
        loc: {
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "29": {
        loc: {
          start: {
            line: 273,
            column: 40
          },
          end: {
            line: 273,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 40
          },
          end: {
            line: 273,
            column: 63
          }
        }, {
          start: {
            line: 273,
            column: 67
          },
          end: {
            line: 273,
            column: 83
          }
        }],
        line: 273
      },
      "30": {
        loc: {
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 61
          },
          end: {
            line: 282,
            column: 69
          }
        }, {
          start: {
            line: 282,
            column: 72
          },
          end: {
            line: 282,
            column: 82
          }
        }],
        line: 282
      },
      "31": {
        loc: {
          start: {
            line: 286,
            column: 77
          },
          end: {
            line: 286,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 286,
            column: 102
          },
          end: {
            line: 286,
            column: 115
          }
        }, {
          start: {
            line: 286,
            column: 118
          },
          end: {
            line: 286,
            column: 133
          }
        }],
        line: 286
      },
      "32": {
        loc: {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "33": {
        loc: {
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 316,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 316,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "34": {
        loc: {
          start: {
            line: 318,
            column: 38
          },
          end: {
            line: 318,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 318,
            column: 38
          },
          end: {
            line: 318,
            column: 67
          }
        }, {
          start: {
            line: 318,
            column: 71
          },
          end: {
            line: 318,
            column: 73
          }
        }],
        line: 318
      },
      "35": {
        loc: {
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 327,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 327,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "36": {
        loc: {
          start: {
            line: 355,
            column: 21
          },
          end: {
            line: 355,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 355,
            column: 42
          },
          end: {
            line: 355,
            column: 85
          }
        }, {
          start: {
            line: 355,
            column: 88
          },
          end: {
            line: 355,
            column: 90
          }
        }],
        line: 355
      },
      "37": {
        loc: {
          start: {
            line: 356,
            column: 21
          },
          end: {
            line: 356,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 356,
            column: 45
          },
          end: {
            line: 356,
            column: 94
          }
        }, {
          start: {
            line: 356,
            column: 97
          },
          end: {
            line: 356,
            column: 99
          }
        }],
        line: 356
      },
      "38": {
        loc: {
          start: {
            line: 357,
            column: 21
          },
          end: {
            line: 357,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 357,
            column: 46
          },
          end: {
            line: 357,
            column: 96
          }
        }, {
          start: {
            line: 357,
            column: 99
          },
          end: {
            line: 357,
            column: 101
          }
        }],
        line: 357
      },
      "39": {
        loc: {
          start: {
            line: 358,
            column: 45
          },
          end: {
            line: 358,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 66
          },
          end: {
            line: 358,
            column: 71
          }
        }, {
          start: {
            line: 358,
            column: 74
          },
          end: {
            line: 358,
            column: 78
          }
        }],
        line: 358
      },
      "40": {
        loc: {
          start: {
            line: 363,
            column: 88
          },
          end: {
            line: 363,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 363,
            column: 113
          },
          end: {
            line: 363,
            column: 126
          }
        }, {
          start: {
            line: 363,
            column: 129
          },
          end: {
            line: 363,
            column: 144
          }
        }],
        line: 363
      },
      "41": {
        loc: {
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "42": {
        loc: {
          start: {
            line: 407,
            column: 24
          },
          end: {
            line: 410,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 24
          },
          end: {
            line: 410,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "43": {
        loc: {
          start: {
            line: 420,
            column: 24
          },
          end: {
            line: 440,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 24
          },
          end: {
            line: 440,
            column: 25
          }
        }, {
          start: {
            line: 429,
            column: 29
          },
          end: {
            line: 440,
            column: 25
          }
        }],
        line: 420
      },
      "44": {
        loc: {
          start: {
            line: 437,
            column: 28
          },
          end: {
            line: 439,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 28
          },
          end: {
            line: 439,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "45": {
        loc: {
          start: {
            line: 444,
            column: 45
          },
          end: {
            line: 444,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 444,
            column: 70
          },
          end: {
            line: 444,
            column: 83
          }
        }, {
          start: {
            line: 444,
            column: 86
          },
          end: {
            line: 444,
            column: 101
          }
        }],
        line: 444
      },
      "46": {
        loc: {
          start: {
            line: 451,
            column: 24
          },
          end: {
            line: 453,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 24
          },
          end: {
            line: 453,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "47": {
        loc: {
          start: {
            line: 458,
            column: 32
          },
          end: {
            line: 458,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 458,
            column: 49
          },
          end: {
            line: 458,
            column: 52
          }
        }, {
          start: {
            line: 458,
            column: 55
          },
          end: {
            line: 458,
            column: 59
          }
        }],
        line: 458
      },
      "48": {
        loc: {
          start: {
            line: 458,
            column: 89
          },
          end: {
            line: 458,
            column: 141
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 458,
            column: 106
          },
          end: {
            line: 458,
            column: 117
          }
        }, {
          start: {
            line: 458,
            column: 120
          },
          end: {
            line: 458,
            column: 141
          }
        }],
        line: 458
      },
      "49": {
        loc: {
          start: {
            line: 464,
            column: 56
          },
          end: {
            line: 464,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 464,
            column: 81
          },
          end: {
            line: 464,
            column: 86
          }
        }, {
          start: {
            line: 464,
            column: 89
          },
          end: {
            line: 464,
            column: 93
          }
        }],
        line: 464
      },
      "50": {
        loc: {
          start: {
            line: 467,
            column: 39
          },
          end: {
            line: 467,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 467,
            column: 56
          },
          end: {
            line: 467,
            column: 59
          }
        }, {
          start: {
            line: 467,
            column: 62
          },
          end: {
            line: 467,
            column: 65
          }
        }],
        line: 467
      },
      "51": {
        loc: {
          start: {
            line: 469,
            column: 46
          },
          end: {
            line: 469,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 469,
            column: 63
          },
          end: {
            line: 469,
            column: 72
          }
        }, {
          start: {
            line: 469,
            column: 75
          },
          end: {
            line: 469,
            column: 83
          }
        }],
        line: 469
      },
      "52": {
        loc: {
          start: {
            line: 470,
            column: 20
          },
          end: {
            line: 472,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 20
          },
          end: {
            line: 472,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "53": {
        loc: {
          start: {
            line: 474,
            column: 20
          },
          end: {
            line: 476,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 20
          },
          end: {
            line: 476,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "54": {
        loc: {
          start: {
            line: 482,
            column: 92
          },
          end: {
            line: 482,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 482,
            column: 117
          },
          end: {
            line: 482,
            column: 130
          }
        }, {
          start: {
            line: 482,
            column: 133
          },
          end: {
            line: 482,
            column: 148
          }
        }],
        line: 482
      },
      "55": {
        loc: {
          start: {
            line: 501,
            column: 16
          },
          end: {
            line: 503,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 16
          },
          end: {
            line: 503,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "56": {
        loc: {
          start: {
            line: 509,
            column: 16
          },
          end: {
            line: 512,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 16
          },
          end: {
            line: 512,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "57": {
        loc: {
          start: {
            line: 514,
            column: 101
          },
          end: {
            line: 514,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 514,
            column: 101
          },
          end: {
            line: 514,
            column: 114
          }
        }, {
          start: {
            line: 514,
            column: 118
          },
          end: {
            line: 514,
            column: 120
          }
        }],
        line: 514
      },
      "58": {
        loc: {
          start: {
            line: 515,
            column: 16
          },
          end: {
            line: 520,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 16
          },
          end: {
            line: 520,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 515
      },
      "59": {
        loc: {
          start: {
            line: 528,
            column: 21
          },
          end: {
            line: 528,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 528,
            column: 67
          },
          end: {
            line: 528,
            column: 134
          }
        }, {
          start: {
            line: 528,
            column: 137
          },
          end: {
            line: 528,
            column: 139
          }
        }],
        line: 528
      },
      "60": {
        loc: {
          start: {
            line: 532,
            column: 78
          },
          end: {
            line: 532,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 532,
            column: 103
          },
          end: {
            line: 532,
            column: 116
          }
        }, {
          start: {
            line: 532,
            column: 119
          },
          end: {
            line: 532,
            column: 134
          }
        }],
        line: 532
      },
      "61": {
        loc: {
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 558,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 558,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 553
      },
      "62": {
        loc: {
          start: {
            line: 561,
            column: 48
          },
          end: {
            line: 561,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 561,
            column: 72
          },
          end: {
            line: 561,
            column: 77
          }
        }, {
          start: {
            line: 561,
            column: 80
          },
          end: {
            line: 561,
            column: 84
          }
        }],
        line: 561
      },
      "63": {
        loc: {
          start: {
            line: 567,
            column: 79
          },
          end: {
            line: 567,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 567,
            column: 104
          },
          end: {
            line: 567,
            column: 117
          }
        }, {
          start: {
            line: 567,
            column: 120
          },
          end: {
            line: 567,
            column: 135
          }
        }],
        line: 567
      },
      "64": {
        loc: {
          start: {
            line: 588,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 588,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 588
      },
      "65": {
        loc: {
          start: {
            line: 597,
            column: 16
          },
          end: {
            line: 610,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 597,
            column: 16
          },
          end: {
            line: 610,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 597
      },
      "66": {
        loc: {
          start: {
            line: 611,
            column: 16
          },
          end: {
            line: 620,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 611,
            column: 16
          },
          end: {
            line: 620,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 611
      },
      "67": {
        loc: {
          start: {
            line: 611,
            column: 20
          },
          end: {
            line: 611,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 611,
            column: 20
          },
          end: {
            line: 611,
            column: 45
          }
        }, {
          start: {
            line: 611,
            column: 49
          },
          end: {
            line: 611,
            column: 76
          }
        }],
        line: 611
      },
      "68": {
        loc: {
          start: {
            line: 623,
            column: 16
          },
          end: {
            line: 628,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 623,
            column: 16
          },
          end: {
            line: 628,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 623
      },
      "69": {
        loc: {
          start: {
            line: 630,
            column: 16
          },
          end: {
            line: 639,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 630,
            column: 16
          },
          end: {
            line: 639,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 630
      },
      "70": {
        loc: {
          start: {
            line: 630,
            column: 20
          },
          end: {
            line: 630,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 630,
            column: 20
          },
          end: {
            line: 630,
            column: 55
          }
        }, {
          start: {
            line: 630,
            column: 59
          },
          end: {
            line: 630,
            column: 93
          }
        }],
        line: 630
      },
      "71": {
        loc: {
          start: {
            line: 633,
            column: 45
          },
          end: {
            line: 633,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 633,
            column: 78
          },
          end: {
            line: 633,
            column: 82
          }
        }, {
          start: {
            line: 633,
            column: 85
          },
          end: {
            line: 633,
            column: 131
          }
        }],
        line: 633
      },
      "72": {
        loc: {
          start: {
            line: 633,
            column: 85
          },
          end: {
            line: 633,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 633,
            column: 120
          },
          end: {
            line: 633,
            column: 124
          }
        }, {
          start: {
            line: 633,
            column: 127
          },
          end: {
            line: 633,
            column: 131
          }
        }],
        line: 633
      },
      "73": {
        loc: {
          start: {
            line: 643,
            column: 84
          },
          end: {
            line: 643,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 643,
            column: 109
          },
          end: {
            line: 643,
            column: 122
          }
        }, {
          start: {
            line: 643,
            column: 125
          },
          end: {
            line: 643,
            column: 140
          }
        }],
        line: 643
      },
      "74": {
        loc: {
          start: {
            line: 662,
            column: 16
          },
          end: {
            line: 664,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 662,
            column: 16
          },
          end: {
            line: 664,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 662
      },
      "75": {
        loc: {
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 672,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 672,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 668
      },
      "76": {
        loc: {
          start: {
            line: 679,
            column: 24
          },
          end: {
            line: 683,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 679,
            column: 24
          },
          end: {
            line: 683,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 679
      },
      "77": {
        loc: {
          start: {
            line: 679,
            column: 28
          },
          end: {
            line: 679,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 679,
            column: 28
          },
          end: {
            line: 679,
            column: 39
          }
        }, {
          start: {
            line: 679,
            column: 43
          },
          end: {
            line: 679,
            column: 50
          }
        }],
        line: 679
      },
      "78": {
        loc: {
          start: {
            line: 680,
            column: 28
          },
          end: {
            line: 682,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 680,
            column: 28
          },
          end: {
            line: 682,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 680
      },
      "79": {
        loc: {
          start: {
            line: 687,
            column: 43
          },
          end: {
            line: 687,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 687,
            column: 43
          },
          end: {
            line: 687,
            column: 75
          }
        }, {
          start: {
            line: 687,
            column: 79
          },
          end: {
            line: 687,
            column: 88
          }
        }],
        line: 687
      },
      "80": {
        loc: {
          start: {
            line: 693,
            column: 24
          },
          end: {
            line: 702,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 693,
            column: 24
          },
          end: {
            line: 702,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 693
      },
      "81": {
        loc: {
          start: {
            line: 696,
            column: 28
          },
          end: {
            line: 698,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 696,
            column: 28
          },
          end: {
            line: 698,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 696
      },
      "82": {
        loc: {
          start: {
            line: 699,
            column: 28
          },
          end: {
            line: 701,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 699,
            column: 28
          },
          end: {
            line: 701,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 699
      },
      "83": {
        loc: {
          start: {
            line: 710,
            column: 16
          },
          end: {
            line: 713,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 710,
            column: 16
          },
          end: {
            line: 713,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 710
      },
      "84": {
        loc: {
          start: {
            line: 720,
            column: 34
          },
          end: {
            line: 720,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 720,
            column: 34
          },
          end: {
            line: 720,
            column: 54
          }
        }, {
          start: {
            line: 720,
            column: 58
          },
          end: {
            line: 720,
            column: 71
          }
        }],
        line: 720
      },
      "85": {
        loc: {
          start: {
            line: 721,
            column: 20
          },
          end: {
            line: 723,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 721,
            column: 20
          },
          end: {
            line: 723,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 721
      },
      "86": {
        loc: {
          start: {
            line: 734,
            column: 53
          },
          end: {
            line: 734,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 734,
            column: 53
          },
          end: {
            line: 734,
            column: 73
          }
        }, {
          start: {
            line: 734,
            column: 77
          },
          end: {
            line: 734,
            column: 90
          }
        }],
        line: 734
      },
      "87": {
        loc: {
          start: {
            line: 736,
            column: 49
          },
          end: {
            line: 736,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 736,
            column: 49
          },
          end: {
            line: 736,
            column: 69
          }
        }, {
          start: {
            line: 736,
            column: 73
          },
          end: {
            line: 736,
            column: 86
          }
        }],
        line: 736
      },
      "88": {
        loc: {
          start: {
            line: 739,
            column: 20
          },
          end: {
            line: 741,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 739,
            column: 20
          },
          end: {
            line: 741,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 739
      },
      "89": {
        loc: {
          start: {
            line: 742,
            column: 20
          },
          end: {
            line: 744,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 742,
            column: 20
          },
          end: {
            line: 744,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 742
      },
      "90": {
        loc: {
          start: {
            line: 745,
            column: 20
          },
          end: {
            line: 747,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 745,
            column: 20
          },
          end: {
            line: 747,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 745
      },
      "91": {
        loc: {
          start: {
            line: 753,
            column: 79
          },
          end: {
            line: 753,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 753,
            column: 104
          },
          end: {
            line: 753,
            column: 117
          }
        }, {
          start: {
            line: 753,
            column: 120
          },
          end: {
            line: 753,
            column: 135
          }
        }],
        line: 753
      },
      "92": {
        loc: {
          start: {
            line: 760,
            column: 4
          },
          end: {
            line: 785,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 761,
            column: 8
          },
          end: {
            line: 762,
            column: 24
          }
        }, {
          start: {
            line: 763,
            column: 8
          },
          end: {
            line: 763,
            column: 25
          }
        }, {
          start: {
            line: 764,
            column: 8
          },
          end: {
            line: 765,
            column: 23
          }
        }, {
          start: {
            line: 766,
            column: 8
          },
          end: {
            line: 766,
            column: 22
          }
        }, {
          start: {
            line: 767,
            column: 8
          },
          end: {
            line: 768,
            column: 23
          }
        }, {
          start: {
            line: 769,
            column: 8
          },
          end: {
            line: 770,
            column: 24
          }
        }, {
          start: {
            line: 771,
            column: 8
          },
          end: {
            line: 772,
            column: 24
          }
        }, {
          start: {
            line: 773,
            column: 8
          },
          end: {
            line: 774,
            column: 24
          }
        }, {
          start: {
            line: 775,
            column: 8
          },
          end: {
            line: 776,
            column: 23
          }
        }, {
          start: {
            line: 777,
            column: 8
          },
          end: {
            line: 778,
            column: 24
          }
        }, {
          start: {
            line: 779,
            column: 8
          },
          end: {
            line: 780,
            column: 24
          }
        }, {
          start: {
            line: 781,
            column: 8
          },
          end: {
            line: 782,
            column: 23
          }
        }, {
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 784,
            column: 23
          }
        }],
        line: 760
      },
      "93": {
        loc: {
          start: {
            line: 788,
            column: 4
          },
          end: {
            line: 799,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 788,
            column: 4
          },
          end: {
            line: 799,
            column: 5
          }
        }, {
          start: {
            line: 791,
            column: 9
          },
          end: {
            line: 799,
            column: 5
          }
        }],
        line: 788
      },
      "94": {
        loc: {
          start: {
            line: 791,
            column: 9
          },
          end: {
            line: 799,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 791,
            column: 9
          },
          end: {
            line: 799,
            column: 5
          }
        }, {
          start: {
            line: 794,
            column: 9
          },
          end: {
            line: 799,
            column: 5
          }
        }],
        line: 791
      },
      "95": {
        loc: {
          start: {
            line: 794,
            column: 9
          },
          end: {
            line: 799,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 794,
            column: 9
          },
          end: {
            line: 799,
            column: 5
          }
        }, {
          start: {
            line: 797,
            column: 9
          },
          end: {
            line: 799,
            column: 5
          }
        }],
        line: 794
      },
      "96": {
        loc: {
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 803,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 803,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 802
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/execution-control.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/execution-control.ts"],
      sourcesContent: ["/**\n * Execution Control Tools for n8n MCP Server\n *\n * Provides sophisticated execution control tools for canceling, retrying,\n * and partial workflow execution with advanced state management.\n */\n\nimport { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { ExecutionStateManager } from '../utils/executionState.js';\nimport {\n  ExecutionAction,\n  ExecutionState,\n  RetryStrategy,\n  CancellationReason,\n  ExecutionPriority,\n  ExecutionControlRequest,\n  BatchExecutionControlRequest,\n} from '../types/executionTypes.js';\n\n// Zod schemas for validation\nconst ExecutionControlSchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  action: z.enum(['pause', 'resume', 'stop', 'cancel', 'retry', 'retry-from-node', 'skip-node', 'execute-partial']),\n  reason: z.string().optional(),\n  force: z.boolean().optional().default(false),\n  parameters: z.record(z.string(), z.any()).optional(),\n});\n\nconst RetryExecutionSchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  strategy: z.enum(['immediate', 'linear', 'exponential', 'custom']).optional().default('exponential'),\n  maxRetries: z.number().min(1).max(10).optional().default(3),\n  retryDelay: z.number().min(0).max(300000).optional(), // Max 5 minutes\n  retryFromNode: z.string().optional(),\n  skipNodes: z.array(z.string()).optional(),\n  onlyFailedNodes: z.boolean().optional().default(true),\n});\n\nconst CancelExecutionSchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  reason: z.enum(['user-requested', 'timeout', 'resource-limit', 'error-threshold', 'dependency-failure', 'system-shutdown', 'policy-violation']).optional().default('user-requested'),\n  force: z.boolean().optional().default(false),\n  gracefulShutdown: z.boolean().optional().default(true),\n});\n\nconst PartialExecutionSchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  targetNodes: z.array(z.string()).min(1, 'At least one target node is required'),\n  startFromNode: z.string().optional(),\n  executeUntilNode: z.string().optional(),\n  skipNodes: z.array(z.string()).optional(),\n  preserveState: z.boolean().optional().default(true),\n});\n\nconst BatchExecutionControlSchema = z.object({\n  executionIds: z.array(z.string()).min(1).max(50, 'Maximum 50 executions allowed in batch'),\n  action: z.enum(['pause', 'resume', 'stop', 'cancel', 'retry']),\n  continueOnFailure: z.boolean().optional().default(true),\n  reason: z.string().optional(),\n  parameters: z.record(z.string(), z.any()).optional(),\n});\n\nconst ExecutionCheckpointSchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  description: z.string().min(1, 'Checkpoint description is required'),\n  metadata: z.record(z.string(), z.any()).optional(),\n});\n\nconst RestoreCheckpointSchema = z.object({\n  checkpointId: z.string().min(1, 'Checkpoint ID is required'),\n  preserveProgress: z.boolean().optional().default(false),\n});\n\nconst ExecutionAnalyticsSchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  includePerformanceMetrics: z.boolean().optional().default(true),\n  includeOptimizationSuggestions: z.boolean().optional().default(true),\n  includeErrorAnalysis: z.boolean().optional().default(true),\n});\n\nconst ExecutionMonitoringSchema = z.object({\n  executionIds: z.array(z.string()).optional(),\n  states: z.array(z.enum(['pending', 'running', 'paused', 'stopping', 'stopped', 'cancelled', 'completed', 'failed', 'timeout', 'waiting', 'retrying', 'partial'])).optional(),\n  includeHistory: z.boolean().optional().default(false),\n  includeMetrics: z.boolean().optional().default(false),\n  limit: z.number().min(1).max(100).optional().default(20),\n});\n\n// Global execution state manager instance\nlet executionStateManager: ExecutionStateManager | null = null;\n\n// Function to get the execution state manager instance\nconst getExecutionStateManager = () => {\n  if (!executionStateManager) {\n    executionStateManager = new ExecutionStateManager();\n  }\n  return executionStateManager;\n};\n\n// Tool registration function\nexport function createExecutionControlTools(getClient: () => N8nClient | null, server: any) {\n  // Basic execution control tool\n  server.addTool({\n    name: 'control-execution',\n    description: 'Control execution state with actions like pause, resume, stop, or cancel',\n    parameters: ExecutionControlSchema,\n    annotations: {\n      title: 'Control Execution',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExecutionControlSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('n8n client not initialized. Please run init-n8n first.');\n        }\n\n        const stateManager = getExecutionStateManager();\n\n        // Get execution details first\n        let execution;\n        try {\n          execution = await client.getExecution(args.executionId);\n        } catch (error) {\n          throw new UserError(`Execution ${args.executionId} not found: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n\n        // Initialize execution tracking if not already done\n        let context = stateManager.getExecutionContext(args.executionId);\n        if (!context) {\n          const enhancedExecution = stateManager.initializeExecution(execution);\n          context = stateManager.getExecutionContext(args.executionId)!;\n        }\n\n        // Create control request\n        const request: ExecutionControlRequest = {\n          executionId: args.executionId,\n          action: args.action as ExecutionAction,\n          requestedAt: new Date().toISOString(),\n          requestedBy: 'mcp-user',\n          parameters: {\n            reason: args.reason as CancellationReason,\n            force: args.force,\n            ...args.parameters,\n          },\n        };\n\n        // Process the control request\n        const response = await stateManager.processControlRequest(request);\n\n        if (!response.success) {\n          return (\n            `\u274C **Execution Control Failed**\\n\\n` +\n            `- **Execution ID:** ${args.executionId}\\n` +\n            `- **Action:** ${args.action}\\n` +\n            `- **Error:** ${response.error?.message || response.message}\\n` +\n            (response.error?.details ? `- **Details:** ${JSON.stringify(response.error.details, null, 2)}\\n` : '') +\n            `\\nThe execution control action could not be completed.`\n          );\n        }\n\n        const statusIcon = getStatusIcon(response.executionState || context.execution.enhancedState);\n\n        return (\n          `\u2705 **Execution Control Successful**\\n\\n` +\n          `- **Execution ID:** ${args.executionId}\\n` +\n          `- **Action:** ${args.action}\\n` +\n          `- **New State:** ${statusIcon} ${response.executionState}\\n` +\n          `- **Timestamp:** ${new Date(response.timestamp).toLocaleString()}\\n` +\n          (response.data?.checkpointId ? `- **Checkpoint:** ${response.data.checkpointId}\\n` : '') +\n          (response.data?.estimatedCompletion ? `- **Estimated Completion:** ${new Date(response.data.estimatedCompletion).toLocaleString()}\\n` : '') +\n          (response.data?.affectedNodes ? `- **Affected Nodes:** ${response.data.affectedNodes.length}\\n` : '') +\n          `\\n${response.message}`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to control execution: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Advanced retry tool\n  server.addTool({\n    name: 'retry-execution',\n    description: 'Retry failed execution with advanced options including retry strategy, node selection, and custom parameters',\n    parameters: RetryExecutionSchema,\n    annotations: {\n      title: 'Retry Execution',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof RetryExecutionSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('n8n client not initialized. Please run init-n8n first.');\n        }\n\n        const stateManager = getExecutionStateManager();\n\n        // Get execution details\n        const execution = await client.getExecution(args.executionId);\n        \n        // Initialize or get execution context\n        let context = stateManager.getExecutionContext(args.executionId);\n        if (!context) {\n          stateManager.initializeExecution(execution);\n          context = stateManager.getExecutionContext(args.executionId)!;\n        }\n\n        // Check if execution can be retried\n        if (!stateManager.canRetryExecution(args.executionId)) {\n          const currentRetryCount = context.execution.retryInfo?.attemptCount || 0;\n          const maxRetries = context.execution.controlConfig.maxExecutionRetries || 3;\n          \n          return (\n            `\u274C **Cannot Retry Execution**\\n\\n` +\n            `- **Execution ID:** ${args.executionId}\\n` +\n            `- **Current State:** ${context.execution.enhancedState}\\n` +\n            `- **Retry Count:** ${currentRetryCount}/${maxRetries}\\n` +\n            `- **Reason:** ${currentRetryCount >= maxRetries ? 'Maximum retries exceeded' : 'Execution state does not allow retry'}\\n\\n` +\n            `The execution cannot be retried in its current state or has exceeded the maximum retry limit.`\n          );\n        }\n\n        // Create retry request\n        const request: ExecutionControlRequest = {\n          executionId: args.executionId,\n          action: args.retryFromNode ? 'retry-from-node' : 'retry',\n          requestedAt: new Date().toISOString(),\n          requestedBy: 'mcp-user',\n          parameters: {\n            retryStrategy: args.strategy,\n            maxRetries: args.maxRetries,\n            retryDelay: args.retryDelay,\n            startFromNode: args.retryFromNode,\n            skipNodes: args.skipNodes,\n          },\n        };\n\n        const response = await stateManager.processControlRequest(request);\n\n        if (!response.success) {\n          return (\n            `\u274C **Retry Failed**\\n\\n` +\n            `- **Execution ID:** ${args.executionId}\\n` +\n            `- **Error:** ${response.error?.message || response.message}\\n\\n` +\n            `The execution retry could not be initiated.`\n          );\n        }\n\n        const retryInfo = context.execution.retryInfo!;\n        const estimatedDelay = response.data?.performanceImpact?.estimatedDelay || 0;\n\n        return (\n          `\uD83D\uDD04 **Execution Retry Initiated**\\n\\n` +\n          `- **Execution ID:** ${args.executionId}\\n` +\n          `- **Strategy:** ${args.strategy}\\n` +\n          `- **Attempt:** ${retryInfo.attemptCount}/${retryInfo.maxAttempts}\\n` +\n          `- **Next Retry:** ${retryInfo.nextRetryAt ? new Date(retryInfo.nextRetryAt).toLocaleString() : 'Immediate'}\\n` +\n          `- **Estimated Delay:** ${estimatedDelay}ms\\n` +\n          (args.retryFromNode ? `- **Starting From Node:** ${args.retryFromNode}\\n` : '') +\n          (args.skipNodes?.length ? `- **Skipping Nodes:** ${args.skipNodes.join(', ')}\\n` : '') +\n          `\\n${response.message}`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to retry execution: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Cancel execution tool\n  server.addTool({\n    name: 'cancel-execution',\n    description: 'Cancel execution with specified reason and options for graceful or forced cancellation',\n    parameters: CancelExecutionSchema,\n    annotations: {\n      title: 'Cancel Execution',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CancelExecutionSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('n8n client not initialized. Please run init-n8n first.');\n        }\n\n        const stateManager = getExecutionStateManager();\n\n        // Get execution details\n        const execution = await client.getExecution(args.executionId);\n        \n        // Initialize or get execution context\n        let context = stateManager.getExecutionContext(args.executionId);\n        if (!context) {\n          stateManager.initializeExecution(execution);\n          context = stateManager.getExecutionContext(args.executionId)!;\n        }\n\n        // Create cancel request\n        const request: ExecutionControlRequest = {\n          executionId: args.executionId,\n          action: 'cancel',\n          requestedAt: new Date().toISOString(),\n          requestedBy: 'mcp-user',\n          parameters: {\n            reason: args.reason as CancellationReason,\n            force: args.force,\n          },\n        };\n\n        const response = await stateManager.processControlRequest(request);\n\n        if (!response.success) {\n          return (\n            `\u274C **Cancellation Failed**\\n\\n` +\n            `- **Execution ID:** ${args.executionId}\\n` +\n            `- **Error:** ${response.error?.message || response.message}\\n\\n` +\n            `The execution could not be cancelled.`\n          );\n        }\n\n        const cancellationInfo = context.execution.cancellation!;\n\n        return (\n          `\uD83D\uDEAB **Execution Cancelled**\\n\\n` +\n          `- **Execution ID:** ${args.executionId}\\n` +\n          `- **Reason:** ${cancellationInfo.reason}\\n` +\n          `- **Requested At:** ${new Date(cancellationInfo.requestedAt).toLocaleString()}\\n` +\n          `- **Cancelled At:** ${new Date(cancellationInfo.cancelledAt!).toLocaleString()}\\n` +\n          `- **Cancellation Type:** ${args.force ? 'Forced' : 'Graceful'}\\n` +\n          `\\n${response.message}`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to cancel execution: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Partial execution tool\n  server.addTool({\n    name: 'execute-partial-workflow',\n    description: 'Execute specific nodes or workflow segments with options for node selection and execution boundaries',\n    parameters: PartialExecutionSchema,\n    annotations: {\n      title: 'Execute Partial Workflow',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof PartialExecutionSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('n8n client not initialized. Please run init-n8n first.');\n        }\n\n        const stateManager = getExecutionStateManager();\n\n        // Get execution details\n        const execution = await client.getExecution(args.executionId);\n        \n        // Initialize or get execution context\n        let context = stateManager.getExecutionContext(args.executionId);\n        if (!context) {\n          stateManager.initializeExecution(execution);\n          context = stateManager.getExecutionContext(args.executionId)!;\n        }\n\n        // Validate target nodes exist\n        const workflowNodes = execution.workflowData?.nodes || [];\n        const nodeIds = workflowNodes.map(node => node.id);\n        const invalidNodes = args.targetNodes.filter(nodeId => !nodeIds.includes(nodeId));\n        \n        if (invalidNodes.length > 0) {\n          return (\n            `\u274C **Invalid Target Nodes**\\n\\n` +\n            `- **Execution ID:** ${args.executionId}\\n` +\n            `- **Invalid Nodes:** ${invalidNodes.join(', ')}\\n` +\n            `- **Available Nodes:** ${nodeIds.join(', ')}\\n\\n` +\n            `Please specify valid node IDs from the workflow.`\n          );\n        }\n\n        // Update execution partial execution info\n        context.execution.partialExecution = {\n          targetNodes: args.targetNodes,\n          startFromNode: args.startFromNode,\n          executeUntilNode: args.executeUntilNode,\n          skipNodes: args.skipNodes,\n        };\n\n        // Create execute-partial request\n        const request: ExecutionControlRequest = {\n          executionId: args.executionId,\n          action: 'execute-partial',\n          requestedAt: new Date().toISOString(),\n          requestedBy: 'mcp-user',\n          parameters: {\n            targetNodes: args.targetNodes,\n            startFromNode: args.startFromNode,\n            executeUntilNode: args.executeUntilNode,\n            skipNodes: args.skipNodes,\n            preserveState: args.preserveState,\n          },\n        };\n\n        // Update execution state\n        stateManager.updateExecutionState(args.executionId, 'partial');\n\n        return (\n          `\uD83C\uDFAF **Partial Execution Configured**\\n\\n` +\n          `- **Execution ID:** ${args.executionId}\\n` +\n          `- **Target Nodes:** ${args.targetNodes.length} nodes\\n` +\n          `  - ${args.targetNodes.join(', ')}\\n` +\n          (args.startFromNode ? `- **Start From:** ${args.startFromNode}\\n` : '') +\n          (args.executeUntilNode ? `- **Execute Until:** ${args.executeUntilNode}\\n` : '') +\n          (args.skipNodes?.length ? `- **Skip Nodes:** ${args.skipNodes.join(', ')}\\n` : '') +\n          `- **Preserve State:** ${args.preserveState ? 'Yes' : 'No'}\\n` +\n          `\\nThe execution has been configured for partial workflow execution. ` +\n          `Use 'control-execution' with action 'resume' to start the partial execution.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to configure partial execution: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Batch execution control tool\n  server.addTool({\n    name: 'batch-control-executions',\n    description: 'Control multiple executions simultaneously with options for different actions and failure handling',\n    parameters: BatchExecutionControlSchema,\n    annotations: {\n      title: 'Batch Control Executions',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof BatchExecutionControlSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('n8n client not initialized. Please run init-n8n first.');\n        }\n\n        const stateManager = getExecutionStateManager();\n\n        // Create batch request\n        const batchRequest: BatchExecutionControlRequest = {\n          executionIds: args.executionIds,\n          action: args.action as ExecutionAction,\n          requestedAt: new Date().toISOString(),\n          requestedBy: 'mcp-user',\n          continueOnFailure: args.continueOnFailure,\n          parameters: {\n            reason: args.reason as CancellationReason,\n            ...args.parameters,\n          },\n        };\n\n        const results: Array<{\n          executionId: string;\n          success: boolean;\n          message: string;\n          newState?: ExecutionState;\n          error?: string;\n        }> = [];\n\n        let successCount = 0;\n        let failureCount = 0;\n\n        for (const executionId of args.executionIds) {\n          try {\n            // Get execution details\n            const execution = await client.getExecution(executionId);\n            \n            // Initialize or get execution context\n            let context = stateManager.getExecutionContext(executionId);\n            if (!context) {\n              stateManager.initializeExecution(execution);\n              context = stateManager.getExecutionContext(executionId)!;\n            }\n\n            // Create individual control request\n            const request: ExecutionControlRequest = {\n              executionId,\n              action: batchRequest.action,\n              requestedAt: batchRequest.requestedAt,\n              requestedBy: batchRequest.requestedBy,\n              parameters: batchRequest.parameters,\n            };\n\n            const response = await stateManager.processControlRequest(request);\n\n            if (response.success) {\n              successCount++;\n              results.push({\n                executionId,\n                success: true,\n                message: response.message,\n                newState: response.executionState,\n              });\n            } else {\n              failureCount++;\n              results.push({\n                executionId,\n                success: false,\n                message: response.message,\n                error: response.error?.message,\n              });\n\n              if (!args.continueOnFailure) {\n                break;\n              }\n            }\n          } catch (error) {\n            failureCount++;\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            results.push({\n              executionId,\n              success: false,\n              message: `Failed to process execution: ${errorMessage}`,\n              error: errorMessage,\n            });\n\n            if (!args.continueOnFailure) {\n              break;\n            }\n          }\n        }\n\n        const overallSuccess = failureCount === 0;\n        const successRate = Math.round((successCount / args.executionIds.length) * 100);\n\n        let output = `${overallSuccess ? '\u2705' : '\u26A0\uFE0F'} **Batch Execution Control ${overallSuccess ? 'Completed' : 'Partially Completed'}**\\n\\n`;\n        output += `- **Action:** ${args.action}\\n`;\n        output += `- **Total Executions:** ${args.executionIds.length}\\n`;\n        output += `- **Successful:** ${successCount}\\n`;\n        output += `- **Failed:** ${failureCount}\\n`;\n        output += `- **Success Rate:** ${successRate}%\\n`;\n        output += `- **Continue on Failure:** ${args.continueOnFailure ? 'Yes' : 'No'}\\n\\n`;\n\n        output += `**Individual Results:**\\n`;\n        results.forEach((result, index) => {\n          const statusIcon = result.success ? '\u2705' : '\u274C';\n          output += `${index + 1}. ${statusIcon} **${result.executionId}**\\n`;\n          output += `   - Status: ${result.success ? 'Success' : 'Failed'}\\n`;\n          if (result.newState) {\n            output += `   - New State: ${result.newState}\\n`;\n          }\n          output += `   - Message: ${result.message}\\n`;\n          if (result.error) {\n            output += `   - Error: ${result.error}\\n`;\n          }\n          output += '\\n';\n        });\n\n        return output;\n      } catch (error) {\n        throw new UserError(\n          `Failed to process batch execution control: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Create execution checkpoint tool\n  server.addTool({\n    name: 'create-execution-checkpoint',\n    description: 'Create a checkpoint for execution state that can be restored later',\n    parameters: ExecutionCheckpointSchema,\n    annotations: {\n      title: 'Create Execution Checkpoint',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExecutionCheckpointSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('n8n client not initialized. Please run init-n8n first.');\n        }\n\n        const stateManager = getExecutionStateManager();\n\n        // Get execution details\n        const execution = await client.getExecution(args.executionId);\n        \n        // Initialize or get execution context\n        let context = stateManager.getExecutionContext(args.executionId);\n        if (!context) {\n          stateManager.initializeExecution(execution);\n          context = stateManager.getExecutionContext(args.executionId)!;\n        }\n\n        // Create checkpoint\n        const checkpoint = stateManager.createCheckpoint(\n          args.executionId,\n          args.description,\n          args.metadata || {}\n        );\n\n        if (!checkpoint) {\n          return (\n            `\u274C **Checkpoint Creation Failed**\\n\\n` +\n            `- **Execution ID:** ${args.executionId}\\n` +\n            `- **Reason:** Unable to create checkpoint for execution\\n\\n` +\n            `The execution may not be in a valid state for checkpoint creation.`\n          );\n        }\n\n        return (\n          `\uD83D\uDCBE **Checkpoint Created Successfully**\\n\\n` +\n          `- **Checkpoint ID:** ${checkpoint.checkpointId}\\n` +\n          `- **Execution ID:** ${args.executionId}\\n` +\n          `- **Description:** ${checkpoint.description}\\n` +\n          `- **Timestamp:** ${new Date(checkpoint.timestamp).toLocaleString()}\\n` +\n          `- **Completed Nodes:** ${checkpoint.completedNodes.length}\\n` +\n          `- **Node States:** ${checkpoint.nodeStates.length}\\n` +\n          (Object.keys(checkpoint.metadata).length > 0 ? `- **Metadata:** ${JSON.stringify(checkpoint.metadata, null, 2)}\\n` : '') +\n          `\\nThe checkpoint can be used to restore the execution to this state later.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to create checkpoint: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Restore from checkpoint tool\n  server.addTool({\n    name: 'restore-execution-checkpoint',\n    description: 'Restore execution from a previously created checkpoint',\n    parameters: RestoreCheckpointSchema,\n    annotations: {\n      title: 'Restore Execution Checkpoint',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof RestoreCheckpointSchema>) => {\n      try {\n        const stateManager = getExecutionStateManager();\n\n        // Restore from checkpoint\n        const success = stateManager.restoreFromCheckpoint(args.checkpointId);\n\n        if (!success) {\n          return (\n            `\u274C **Checkpoint Restoration Failed**\\n\\n` +\n            `- **Checkpoint ID:** ${args.checkpointId}\\n` +\n            `- **Reason:** Checkpoint not found or restoration failed\\n\\n` +\n            `The checkpoint may not exist or the execution may not be in a valid state for restoration.`\n          );\n        }\n\n        return (\n          `\uD83D\uDD04 **Checkpoint Restored Successfully**\\n\\n` +\n          `- **Checkpoint ID:** ${args.checkpointId}\\n` +\n          `- **Preserve Progress:** ${args.preserveProgress ? 'Yes' : 'No'}\\n` +\n          `- **Restoration Time:** ${new Date().toLocaleString()}\\n\\n` +\n          `The execution has been restored to the checkpoint state. ` +\n          `Use 'control-execution' with action 'resume' to continue from this point.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to restore checkpoint: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Execution analytics tool\n  server.addTool({\n    name: 'get-execution-analytics',\n    description: 'Get detailed analytics and performance insights for an execution including optimization suggestions',\n    parameters: ExecutionAnalyticsSchema,\n    annotations: {\n      title: 'Get Execution Analytics',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExecutionAnalyticsSchema>) => {\n      try {\n        const stateManager = getExecutionStateManager();\n\n        // Get analytics\n        const analytics = stateManager.getExecutionAnalytics(args.executionId);\n\n        if (!analytics) {\n          return (\n            `\u274C **Analytics Not Available**\\n\\n` +\n            `- **Execution ID:** ${args.executionId}\\n` +\n            `- **Reason:** Execution not found or analytics not generated\\n\\n` +\n            `The execution may not exist or may not have enough data for analytics.`\n          );\n        }\n\n        let output = `\uD83D\uDCCA **Execution Analytics**\\n\\n`;\n        output += `- **Execution ID:** ${args.executionId}\\n`;\n        output += `- **Analysis Time:** ${new Date(analytics.timestamp).toLocaleString()}\\n\\n`;\n\n        if (args.includePerformanceMetrics) {\n          output += `**Performance Metrics:**\\n`;\n          output += `- **Total Duration:** ${formatDuration(analytics.performance.totalDuration)}\\n`;\n          output += `- **Memory Peak:** ${formatBytes(analytics.performance.memoryPeak)}\\n`;\n          output += `- **CPU Average:** ${analytics.performance.cpuAverage}%\\n`;\n          output += `- **Node Execution Times:**\\n`;\n\n          const sortedNodes = Object.entries(analytics.performance.nodeExecutionTimes)\n            .sort(([, a], [, b]) => b - a)\n            .slice(0, 10);\n\n          sortedNodes.forEach(([nodeId, duration]) => {\n            output += `  - ${nodeId}: ${formatDuration(duration)}\\n`;\n          });\n          output += '\\n';\n        }\n\n        if (args.includeErrorAnalysis && analytics.errors.length > 0) {\n          output += `**Error Analysis:**\\n`;\n          analytics.errors.forEach((error, index) => {\n            output += `${index + 1}. **Node:** ${error.nodeId}\\n`;\n            output += `   - **Type:** ${error.errorType}\\n`;\n            output += `   - **Message:** ${error.errorMessage}\\n`;\n            output += `   - **Retry Count:** ${error.retryCount}\\n`;\n            output += `   - **Resolution:** ${error.resolution}\\n\\n`;\n          });\n        }\n\n        output += `**Execution Flow:**\\n`;\n        output += `- **Critical Path:** ${analytics.flow.criticalPath.slice(0, 5).join(' \u2192 ')}\\n`;\n        if (analytics.flow.bottlenecks.length > 0) {\n          output += `- **Top Bottlenecks:**\\n`;\n          analytics.flow.bottlenecks.slice(0, 3).forEach(bottleneck => {\n            output += `  - ${bottleneck.nodeId}: ${formatDuration(bottleneck.duration)} (${bottleneck.type})\\n`;\n          });\n        }\n        output += '\\n';\n\n        if (args.includeOptimizationSuggestions && analytics.optimizations.length > 0) {\n          output += `**Optimization Suggestions:**\\n`;\n          analytics.optimizations.forEach((suggestion, index) => {\n            const priorityIcon = suggestion.priority === 'high' ? '\uD83D\uDD34' : suggestion.priority === 'medium' ? '\uD83D\uDFE1' : '\uD83D\uDFE2';\n            output += `${index + 1}. ${priorityIcon} **${suggestion.type.charAt(0).toUpperCase() + suggestion.type.slice(1)}**\\n`;\n            output += `   - **Description:** ${suggestion.description}\\n`;\n            output += `   - **Estimated Impact:** ${suggestion.estimatedImpact}\\n`;\n            output += `   - **Priority:** ${suggestion.priority}\\n\\n`;\n          });\n        }\n\n        return output;\n      } catch (error) {\n        throw new UserError(\n          `Failed to get execution analytics: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Monitor executions tool\n  server.addTool({\n    name: 'monitor-executions',\n    description: 'Monitor multiple executions with real-time status, history, and metrics',\n    parameters: ExecutionMonitoringSchema,\n    annotations: {\n      title: 'Monitor Executions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExecutionMonitoringSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('n8n client not initialized. Please run init-n8n first.');\n        }\n\n        const stateManager = getExecutionStateManager();\n\n        // Get executions to monitor\n        let executionIds = args.executionIds;\n        if (!executionIds) {\n          // Get recent executions if none specified\n          const response = await client.getExecutions({ limit: args.limit });\n          executionIds = response.data.map(exec => exec.id);\n        }\n\n        const monitoringResults: any[] = [];\n\n        for (const executionId of executionIds.slice(0, args.limit)) {\n          try {\n            const execution = await client.getExecution(executionId);\n            const context = stateManager.getExecutionContext(executionId);\n\n            // Filter by state if specified\n            if (args.states && context) {\n              if (!args.states.includes(context.execution.enhancedState as any)) {\n                continue;\n              }\n            }\n\n            const result: any = {\n              executionId,\n              status: execution.status,\n              enhancedState: context?.execution.enhancedState || 'unknown',\n              startedAt: execution.startedAt,\n              stoppedAt: execution.stoppedAt,\n              workflowId: execution.workflowId,\n              mode: execution.mode,\n            };\n\n            if (context) {\n              result.progress = context.execution.progress;\n              result.availableActions = context.availableActions;\n\n              if (args.includeMetrics) {\n                result.metrics = context.execution.metrics;\n              }\n\n              if (args.includeHistory) {\n                result.history = context.history;\n              }\n            }\n\n            monitoringResults.push(result);\n          } catch (error) {\n            // Skip executions that can't be accessed\n            continue;\n          }\n        }\n\n        if (monitoringResults.length === 0) {\n          return (\n            `\uD83D\uDCCA **No Executions Found**\\n\\n` +\n            `No executions match the specified criteria for monitoring.`\n          );\n        }\n\n        let output = `\uD83D\uDCCA **Execution Monitoring Dashboard**\\n\\n`;\n        output += `- **Total Executions:** ${monitoringResults.length}\\n`;\n        output += `- **Monitoring Time:** ${new Date().toLocaleString()}\\n\\n`;\n\n        // Group by state\n        const stateGroups: Record<string, any[]> = {};\n        monitoringResults.forEach(result => {\n          const state = result.enhancedState || result.status;\n          if (!stateGroups[state]) {\n            stateGroups[state] = [];\n          }\n          stateGroups[state].push(result);\n        });\n\n        output += `**State Summary:**\\n`;\n        Object.entries(stateGroups).forEach(([state, executions]) => {\n          const icon = getStatusIcon(state as ExecutionState);\n          output += `- ${icon} ${state}: ${executions.length}\\n`;\n        });\n        output += '\\n';\n\n        output += `**Execution Details:**\\n`;\n        monitoringResults.forEach((result, index) => {\n          const statusIcon = getStatusIcon(result.enhancedState || result.status);\n          output += `${index + 1}. ${statusIcon} **${result.executionId}**\\n`;\n          output += `   - **State:** ${result.enhancedState || result.status}\\n`;\n          output += `   - **Workflow:** ${result.workflowId}\\n`;\n          output += `   - **Started:** ${new Date(result.startedAt).toLocaleString()}\\n`;\n          if (result.stoppedAt) {\n            output += `   - **Stopped:** ${new Date(result.stoppedAt).toLocaleString()}\\n`;\n          }\n          if (result.progress) {\n            output += `   - **Progress:** ${result.progress.percentComplete}% (${result.progress.completedNodes}/${result.progress.totalNodes} nodes)\\n`;\n          }\n          if (result.availableActions?.length > 0) {\n            output += `   - **Available Actions:** ${result.availableActions.join(', ')}\\n`;\n          }\n          output += '\\n';\n        });\n\n        return output;\n      } catch (error) {\n        throw new UserError(\n          `Failed to monitor executions: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n}\n\n// Helper functions\n\nfunction getStatusIcon(state: ExecutionState | string): string {\n  switch (state) {\n    case 'running':\n      return '\uD83D\uDD04';\n    case 'completed':\n    case 'success':\n      return '\u2705';\n    case 'failed':\n    case 'error':\n      return '\u274C';\n    case 'cancelled':\n      return '\uD83D\uDEAB';\n    case 'paused':\n      return '\u23F8\uFE0F';\n    case 'stopped':\n      return '\u23F9\uFE0F';\n    case 'waiting':\n      return '\u23F3';\n    case 'retrying':\n      return '\uD83D\uDD01';\n    case 'partial':\n      return '\uD83C\uDFAF';\n    case 'timeout':\n      return '\u23F0';\n    default:\n      return '\u26AA';\n  }\n}\n\nfunction formatDuration(ms: number): string {\n  if (ms < 1000) {\n    return `${ms}ms`;\n  } else if (ms < 60000) {\n    return `${(ms / 1000).toFixed(1)}s`;\n  } else if (ms < 3600000) {\n    return `${(ms / 60000).toFixed(1)}m`;\n  } else {\n    return `${(ms / 3600000).toFixed(1)}h`;\n  }\n}\n\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4ab62fd1c4e2ddcca062eeab846e5c4840e14c48"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20mszqtp72 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20mszqtp72();
cov_20mszqtp72().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20mszqtp72().s[1]++;
exports.createExecutionControlTools = createExecutionControlTools;
const zod_1 =
/* istanbul ignore next */
(cov_20mszqtp72().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_20mszqtp72().s[3]++, require("fastmcp"));
const executionState_js_1 =
/* istanbul ignore next */
(cov_20mszqtp72().s[4]++, require("../utils/executionState.js"));
// Zod schemas for validation
const ExecutionControlSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[5]++, zod_1.z.object({
  executionId: zod_1.z.string().min(1, 'Execution ID is required'),
  action: zod_1.z.enum(['pause', 'resume', 'stop', 'cancel', 'retry', 'retry-from-node', 'skip-node', 'execute-partial']),
  reason: zod_1.z.string().optional(),
  force: zod_1.z.boolean().optional().default(false),
  parameters: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional()
}));
const RetryExecutionSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[6]++, zod_1.z.object({
  executionId: zod_1.z.string().min(1, 'Execution ID is required'),
  strategy: zod_1.z.enum(['immediate', 'linear', 'exponential', 'custom']).optional().default('exponential'),
  maxRetries: zod_1.z.number().min(1).max(10).optional().default(3),
  retryDelay: zod_1.z.number().min(0).max(300000).optional(),
  // Max 5 minutes
  retryFromNode: zod_1.z.string().optional(),
  skipNodes: zod_1.z.array(zod_1.z.string()).optional(),
  onlyFailedNodes: zod_1.z.boolean().optional().default(true)
}));
const CancelExecutionSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[7]++, zod_1.z.object({
  executionId: zod_1.z.string().min(1, 'Execution ID is required'),
  reason: zod_1.z.enum(['user-requested', 'timeout', 'resource-limit', 'error-threshold', 'dependency-failure', 'system-shutdown', 'policy-violation']).optional().default('user-requested'),
  force: zod_1.z.boolean().optional().default(false),
  gracefulShutdown: zod_1.z.boolean().optional().default(true)
}));
const PartialExecutionSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[8]++, zod_1.z.object({
  executionId: zod_1.z.string().min(1, 'Execution ID is required'),
  targetNodes: zod_1.z.array(zod_1.z.string()).min(1, 'At least one target node is required'),
  startFromNode: zod_1.z.string().optional(),
  executeUntilNode: zod_1.z.string().optional(),
  skipNodes: zod_1.z.array(zod_1.z.string()).optional(),
  preserveState: zod_1.z.boolean().optional().default(true)
}));
const BatchExecutionControlSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[9]++, zod_1.z.object({
  executionIds: zod_1.z.array(zod_1.z.string()).min(1).max(50, 'Maximum 50 executions allowed in batch'),
  action: zod_1.z.enum(['pause', 'resume', 'stop', 'cancel', 'retry']),
  continueOnFailure: zod_1.z.boolean().optional().default(true),
  reason: zod_1.z.string().optional(),
  parameters: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional()
}));
const ExecutionCheckpointSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[10]++, zod_1.z.object({
  executionId: zod_1.z.string().min(1, 'Execution ID is required'),
  description: zod_1.z.string().min(1, 'Checkpoint description is required'),
  metadata: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional()
}));
const RestoreCheckpointSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[11]++, zod_1.z.object({
  checkpointId: zod_1.z.string().min(1, 'Checkpoint ID is required'),
  preserveProgress: zod_1.z.boolean().optional().default(false)
}));
const ExecutionAnalyticsSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[12]++, zod_1.z.object({
  executionId: zod_1.z.string().min(1, 'Execution ID is required'),
  includePerformanceMetrics: zod_1.z.boolean().optional().default(true),
  includeOptimizationSuggestions: zod_1.z.boolean().optional().default(true),
  includeErrorAnalysis: zod_1.z.boolean().optional().default(true)
}));
const ExecutionMonitoringSchema =
/* istanbul ignore next */
(cov_20mszqtp72().s[13]++, zod_1.z.object({
  executionIds: zod_1.z.array(zod_1.z.string()).optional(),
  states: zod_1.z.array(zod_1.z.enum(['pending', 'running', 'paused', 'stopping', 'stopped', 'cancelled', 'completed', 'failed', 'timeout', 'waiting', 'retrying', 'partial'])).optional(),
  includeHistory: zod_1.z.boolean().optional().default(false),
  includeMetrics: zod_1.z.boolean().optional().default(false),
  limit: zod_1.z.number().min(1).max(100).optional().default(20)
}));
// Global execution state manager instance
let executionStateManager =
/* istanbul ignore next */
(cov_20mszqtp72().s[14]++, null);
// Function to get the execution state manager instance
/* istanbul ignore next */
cov_20mszqtp72().s[15]++;
const getExecutionStateManager = () => {
  /* istanbul ignore next */
  cov_20mszqtp72().f[0]++;
  cov_20mszqtp72().s[16]++;
  if (!executionStateManager) {
    /* istanbul ignore next */
    cov_20mszqtp72().b[0][0]++;
    cov_20mszqtp72().s[17]++;
    executionStateManager = new executionState_js_1.ExecutionStateManager();
  } else
  /* istanbul ignore next */
  {
    cov_20mszqtp72().b[0][1]++;
  }
  cov_20mszqtp72().s[18]++;
  return executionStateManager;
};
// Tool registration function
function createExecutionControlTools(getClient, server) {
  /* istanbul ignore next */
  cov_20mszqtp72().f[1]++;
  cov_20mszqtp72().s[19]++;
  // Basic execution control tool
  server.addTool({
    name: 'control-execution',
    description: 'Control execution state with actions like pause, resume, stop, or cancel',
    parameters: ExecutionControlSchema,
    annotations: {
      title: 'Control Execution',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[2]++;
      cov_20mszqtp72().s[20]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[21]++, getClient());
        /* istanbul ignore next */
        cov_20mszqtp72().s[22]++;
        if (!client) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[1][0]++;
          cov_20mszqtp72().s[23]++;
          throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[1][1]++;
        }
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[24]++, getExecutionStateManager());
        // Get execution details first
        let execution;
        /* istanbul ignore next */
        cov_20mszqtp72().s[25]++;
        try {
          /* istanbul ignore next */
          cov_20mszqtp72().s[26]++;
          execution = await client.getExecution(args.executionId);
        } catch (error) {
          /* istanbul ignore next */
          cov_20mszqtp72().s[27]++;
          throw new fastmcp_1.UserError(`Execution ${args.executionId} not found: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_20mszqtp72().b[2][0]++, error.message) :
          /* istanbul ignore next */
          (cov_20mszqtp72().b[2][1]++, 'Unknown error')}`);
        }
        // Initialize execution tracking if not already done
        let context =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[28]++, stateManager.getExecutionContext(args.executionId));
        /* istanbul ignore next */
        cov_20mszqtp72().s[29]++;
        if (!context) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[3][0]++;
          const enhancedExecution =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[30]++, stateManager.initializeExecution(execution));
          /* istanbul ignore next */
          cov_20mszqtp72().s[31]++;
          context = stateManager.getExecutionContext(args.executionId);
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[3][1]++;
        }
        // Create control request
        const request =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[32]++, {
          executionId: args.executionId,
          action: args.action,
          requestedAt: new Date().toISOString(),
          requestedBy: 'mcp-user',
          parameters: {
            reason: args.reason,
            force: args.force,
            ...args.parameters
          }
        });
        // Process the control request
        const response =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[33]++, await stateManager.processControlRequest(request));
        /* istanbul ignore next */
        cov_20mszqtp72().s[34]++;
        if (!response.success) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[4][0]++;
          cov_20mszqtp72().s[35]++;
          return `❌ **Execution Control Failed**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Action:** ${args.action}\n` + `- **Error:** ${
          /* istanbul ignore next */
          (cov_20mszqtp72().b[5][0]++, response.error?.message) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[5][1]++, response.message)}\n` + (response.error?.details ?
          /* istanbul ignore next */
          (cov_20mszqtp72().b[6][0]++, `- **Details:** ${JSON.stringify(response.error.details, null, 2)}\n`) :
          /* istanbul ignore next */
          (cov_20mszqtp72().b[6][1]++, '')) + `\nThe execution control action could not be completed.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[4][1]++;
        }
        const statusIcon =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[36]++, getStatusIcon(
        /* istanbul ignore next */
        (cov_20mszqtp72().b[7][0]++, response.executionState) ||
        /* istanbul ignore next */
        (cov_20mszqtp72().b[7][1]++, context.execution.enhancedState)));
        /* istanbul ignore next */
        cov_20mszqtp72().s[37]++;
        return `✅ **Execution Control Successful**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Action:** ${args.action}\n` + `- **New State:** ${statusIcon} ${response.executionState}\n` + `- **Timestamp:** ${new Date(response.timestamp).toLocaleString()}\n` + (response.data?.checkpointId ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[8][0]++, `- **Checkpoint:** ${response.data.checkpointId}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[8][1]++, '')) + (response.data?.estimatedCompletion ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[9][0]++, `- **Estimated Completion:** ${new Date(response.data.estimatedCompletion).toLocaleString()}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[9][1]++, '')) + (response.data?.affectedNodes ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[10][0]++, `- **Affected Nodes:** ${response.data.affectedNodes.length}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[10][1]++, '')) + `\n${response.message}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[38]++;
        throw new fastmcp_1.UserError(`Failed to control execution: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[11][1]++, 'Unknown error')}`);
      }
    }
  });
  // Advanced retry tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[39]++;
  server.addTool({
    name: 'retry-execution',
    description: 'Retry failed execution with advanced options including retry strategy, node selection, and custom parameters',
    parameters: RetryExecutionSchema,
    annotations: {
      title: 'Retry Execution',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[3]++;
      cov_20mszqtp72().s[40]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[41]++, getClient());
        /* istanbul ignore next */
        cov_20mszqtp72().s[42]++;
        if (!client) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[12][0]++;
          cov_20mszqtp72().s[43]++;
          throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[12][1]++;
        }
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[44]++, getExecutionStateManager());
        // Get execution details
        const execution =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[45]++, await client.getExecution(args.executionId));
        // Initialize or get execution context
        let context =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[46]++, stateManager.getExecutionContext(args.executionId));
        /* istanbul ignore next */
        cov_20mszqtp72().s[47]++;
        if (!context) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[13][0]++;
          cov_20mszqtp72().s[48]++;
          stateManager.initializeExecution(execution);
          /* istanbul ignore next */
          cov_20mszqtp72().s[49]++;
          context = stateManager.getExecutionContext(args.executionId);
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[13][1]++;
        }
        // Check if execution can be retried
        cov_20mszqtp72().s[50]++;
        if (!stateManager.canRetryExecution(args.executionId)) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[14][0]++;
          const currentRetryCount =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[51]++,
          /* istanbul ignore next */
          (cov_20mszqtp72().b[15][0]++, context.execution.retryInfo?.attemptCount) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[15][1]++, 0));
          const maxRetries =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[52]++,
          /* istanbul ignore next */
          (cov_20mszqtp72().b[16][0]++, context.execution.controlConfig.maxExecutionRetries) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[16][1]++, 3));
          /* istanbul ignore next */
          cov_20mszqtp72().s[53]++;
          return `❌ **Cannot Retry Execution**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Current State:** ${context.execution.enhancedState}\n` + `- **Retry Count:** ${currentRetryCount}/${maxRetries}\n` + `- **Reason:** ${currentRetryCount >= maxRetries ?
          /* istanbul ignore next */
          (cov_20mszqtp72().b[17][0]++, 'Maximum retries exceeded') :
          /* istanbul ignore next */
          (cov_20mszqtp72().b[17][1]++, 'Execution state does not allow retry')}\n\n` + `The execution cannot be retried in its current state or has exceeded the maximum retry limit.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[14][1]++;
        }
        // Create retry request
        const request =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[54]++, {
          executionId: args.executionId,
          action: args.retryFromNode ?
          /* istanbul ignore next */
          (cov_20mszqtp72().b[18][0]++, 'retry-from-node') :
          /* istanbul ignore next */
          (cov_20mszqtp72().b[18][1]++, 'retry'),
          requestedAt: new Date().toISOString(),
          requestedBy: 'mcp-user',
          parameters: {
            retryStrategy: args.strategy,
            maxRetries: args.maxRetries,
            retryDelay: args.retryDelay,
            startFromNode: args.retryFromNode,
            skipNodes: args.skipNodes
          }
        });
        const response =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[55]++, await stateManager.processControlRequest(request));
        /* istanbul ignore next */
        cov_20mszqtp72().s[56]++;
        if (!response.success) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[19][0]++;
          cov_20mszqtp72().s[57]++;
          return `❌ **Retry Failed**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Error:** ${
          /* istanbul ignore next */
          (cov_20mszqtp72().b[20][0]++, response.error?.message) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[20][1]++, response.message)}\n\n` + `The execution retry could not be initiated.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[19][1]++;
        }
        const retryInfo =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[58]++, context.execution.retryInfo);
        const estimatedDelay =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[59]++,
        /* istanbul ignore next */
        (cov_20mszqtp72().b[21][0]++, response.data?.performanceImpact?.estimatedDelay) ||
        /* istanbul ignore next */
        (cov_20mszqtp72().b[21][1]++, 0));
        /* istanbul ignore next */
        cov_20mszqtp72().s[60]++;
        return `🔄 **Execution Retry Initiated**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Strategy:** ${args.strategy}\n` + `- **Attempt:** ${retryInfo.attemptCount}/${retryInfo.maxAttempts}\n` + `- **Next Retry:** ${retryInfo.nextRetryAt ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[22][0]++, new Date(retryInfo.nextRetryAt).toLocaleString()) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[22][1]++, 'Immediate')}\n` + `- **Estimated Delay:** ${estimatedDelay}ms\n` + (args.retryFromNode ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[23][0]++, `- **Starting From Node:** ${args.retryFromNode}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[23][1]++, '')) + (args.skipNodes?.length ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[24][0]++, `- **Skipping Nodes:** ${args.skipNodes.join(', ')}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[24][1]++, '')) + `\n${response.message}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[61]++;
        throw new fastmcp_1.UserError(`Failed to retry execution: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[25][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[25][1]++, 'Unknown error')}`);
      }
    }
  });
  // Cancel execution tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[62]++;
  server.addTool({
    name: 'cancel-execution',
    description: 'Cancel execution with specified reason and options for graceful or forced cancellation',
    parameters: CancelExecutionSchema,
    annotations: {
      title: 'Cancel Execution',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[4]++;
      cov_20mszqtp72().s[63]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[64]++, getClient());
        /* istanbul ignore next */
        cov_20mszqtp72().s[65]++;
        if (!client) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[26][0]++;
          cov_20mszqtp72().s[66]++;
          throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[26][1]++;
        }
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[67]++, getExecutionStateManager());
        // Get execution details
        const execution =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[68]++, await client.getExecution(args.executionId));
        // Initialize or get execution context
        let context =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[69]++, stateManager.getExecutionContext(args.executionId));
        /* istanbul ignore next */
        cov_20mszqtp72().s[70]++;
        if (!context) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[27][0]++;
          cov_20mszqtp72().s[71]++;
          stateManager.initializeExecution(execution);
          /* istanbul ignore next */
          cov_20mszqtp72().s[72]++;
          context = stateManager.getExecutionContext(args.executionId);
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[27][1]++;
        }
        // Create cancel request
        const request =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[73]++, {
          executionId: args.executionId,
          action: 'cancel',
          requestedAt: new Date().toISOString(),
          requestedBy: 'mcp-user',
          parameters: {
            reason: args.reason,
            force: args.force
          }
        });
        const response =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[74]++, await stateManager.processControlRequest(request));
        /* istanbul ignore next */
        cov_20mszqtp72().s[75]++;
        if (!response.success) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[28][0]++;
          cov_20mszqtp72().s[76]++;
          return `❌ **Cancellation Failed**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Error:** ${
          /* istanbul ignore next */
          (cov_20mszqtp72().b[29][0]++, response.error?.message) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[29][1]++, response.message)}\n\n` + `The execution could not be cancelled.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[28][1]++;
        }
        const cancellationInfo =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[77]++, context.execution.cancellation);
        /* istanbul ignore next */
        cov_20mszqtp72().s[78]++;
        return `🚫 **Execution Cancelled**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Reason:** ${cancellationInfo.reason}\n` + `- **Requested At:** ${new Date(cancellationInfo.requestedAt).toLocaleString()}\n` + `- **Cancelled At:** ${new Date(cancellationInfo.cancelledAt).toLocaleString()}\n` + `- **Cancellation Type:** ${args.force ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[30][0]++, 'Forced') :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[30][1]++, 'Graceful')}\n` + `\n${response.message}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[79]++;
        throw new fastmcp_1.UserError(`Failed to cancel execution: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[31][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[31][1]++, 'Unknown error')}`);
      }
    }
  });
  // Partial execution tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[80]++;
  server.addTool({
    name: 'execute-partial-workflow',
    description: 'Execute specific nodes or workflow segments with options for node selection and execution boundaries',
    parameters: PartialExecutionSchema,
    annotations: {
      title: 'Execute Partial Workflow',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[5]++;
      cov_20mszqtp72().s[81]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[82]++, getClient());
        /* istanbul ignore next */
        cov_20mszqtp72().s[83]++;
        if (!client) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[32][0]++;
          cov_20mszqtp72().s[84]++;
          throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[32][1]++;
        }
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[85]++, getExecutionStateManager());
        // Get execution details
        const execution =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[86]++, await client.getExecution(args.executionId));
        // Initialize or get execution context
        let context =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[87]++, stateManager.getExecutionContext(args.executionId));
        /* istanbul ignore next */
        cov_20mszqtp72().s[88]++;
        if (!context) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[33][0]++;
          cov_20mszqtp72().s[89]++;
          stateManager.initializeExecution(execution);
          /* istanbul ignore next */
          cov_20mszqtp72().s[90]++;
          context = stateManager.getExecutionContext(args.executionId);
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[33][1]++;
        }
        // Validate target nodes exist
        const workflowNodes =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[91]++,
        /* istanbul ignore next */
        (cov_20mszqtp72().b[34][0]++, execution.workflowData?.nodes) ||
        /* istanbul ignore next */
        (cov_20mszqtp72().b[34][1]++, []));
        const nodeIds =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[92]++, workflowNodes.map(node => {
          /* istanbul ignore next */
          cov_20mszqtp72().f[6]++;
          cov_20mszqtp72().s[93]++;
          return node.id;
        }));
        const invalidNodes =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[94]++, args.targetNodes.filter(nodeId => {
          /* istanbul ignore next */
          cov_20mszqtp72().f[7]++;
          cov_20mszqtp72().s[95]++;
          return !nodeIds.includes(nodeId);
        }));
        /* istanbul ignore next */
        cov_20mszqtp72().s[96]++;
        if (invalidNodes.length > 0) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[35][0]++;
          cov_20mszqtp72().s[97]++;
          return `❌ **Invalid Target Nodes**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Invalid Nodes:** ${invalidNodes.join(', ')}\n` + `- **Available Nodes:** ${nodeIds.join(', ')}\n\n` + `Please specify valid node IDs from the workflow.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[35][1]++;
        }
        // Update execution partial execution info
        cov_20mszqtp72().s[98]++;
        context.execution.partialExecution = {
          targetNodes: args.targetNodes,
          startFromNode: args.startFromNode,
          executeUntilNode: args.executeUntilNode,
          skipNodes: args.skipNodes
        };
        // Create execute-partial request
        const request =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[99]++, {
          executionId: args.executionId,
          action: 'execute-partial',
          requestedAt: new Date().toISOString(),
          requestedBy: 'mcp-user',
          parameters: {
            targetNodes: args.targetNodes,
            startFromNode: args.startFromNode,
            executeUntilNode: args.executeUntilNode,
            skipNodes: args.skipNodes,
            preserveState: args.preserveState
          }
        });
        // Update execution state
        /* istanbul ignore next */
        cov_20mszqtp72().s[100]++;
        stateManager.updateExecutionState(args.executionId, 'partial');
        /* istanbul ignore next */
        cov_20mszqtp72().s[101]++;
        return `🎯 **Partial Execution Configured**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Target Nodes:** ${args.targetNodes.length} nodes\n` + `  - ${args.targetNodes.join(', ')}\n` + (args.startFromNode ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[36][0]++, `- **Start From:** ${args.startFromNode}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[36][1]++, '')) + (args.executeUntilNode ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[37][0]++, `- **Execute Until:** ${args.executeUntilNode}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[37][1]++, '')) + (args.skipNodes?.length ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[38][0]++, `- **Skip Nodes:** ${args.skipNodes.join(', ')}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[38][1]++, '')) + `- **Preserve State:** ${args.preserveState ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[39][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[39][1]++, 'No')}\n` + `\nThe execution has been configured for partial workflow execution. ` + `Use 'control-execution' with action 'resume' to start the partial execution.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[102]++;
        throw new fastmcp_1.UserError(`Failed to configure partial execution: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[40][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[40][1]++, 'Unknown error')}`);
      }
    }
  });
  // Batch execution control tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[103]++;
  server.addTool({
    name: 'batch-control-executions',
    description: 'Control multiple executions simultaneously with options for different actions and failure handling',
    parameters: BatchExecutionControlSchema,
    annotations: {
      title: 'Batch Control Executions',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[8]++;
      cov_20mszqtp72().s[104]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[105]++, getClient());
        /* istanbul ignore next */
        cov_20mszqtp72().s[106]++;
        if (!client) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[41][0]++;
          cov_20mszqtp72().s[107]++;
          throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[41][1]++;
        }
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[108]++, getExecutionStateManager());
        // Create batch request
        const batchRequest =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[109]++, {
          executionIds: args.executionIds,
          action: args.action,
          requestedAt: new Date().toISOString(),
          requestedBy: 'mcp-user',
          continueOnFailure: args.continueOnFailure,
          parameters: {
            reason: args.reason,
            ...args.parameters
          }
        });
        const results =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[110]++, []);
        let successCount =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[111]++, 0);
        let failureCount =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[112]++, 0);
        /* istanbul ignore next */
        cov_20mszqtp72().s[113]++;
        for (const executionId of args.executionIds) {
          /* istanbul ignore next */
          cov_20mszqtp72().s[114]++;
          try {
            // Get execution details
            const execution =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[115]++, await client.getExecution(executionId));
            // Initialize or get execution context
            let context =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[116]++, stateManager.getExecutionContext(executionId));
            /* istanbul ignore next */
            cov_20mszqtp72().s[117]++;
            if (!context) {
              /* istanbul ignore next */
              cov_20mszqtp72().b[42][0]++;
              cov_20mszqtp72().s[118]++;
              stateManager.initializeExecution(execution);
              /* istanbul ignore next */
              cov_20mszqtp72().s[119]++;
              context = stateManager.getExecutionContext(executionId);
            } else
            /* istanbul ignore next */
            {
              cov_20mszqtp72().b[42][1]++;
            }
            // Create individual control request
            const request =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[120]++, {
              executionId,
              action: batchRequest.action,
              requestedAt: batchRequest.requestedAt,
              requestedBy: batchRequest.requestedBy,
              parameters: batchRequest.parameters
            });
            const response =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[121]++, await stateManager.processControlRequest(request));
            /* istanbul ignore next */
            cov_20mszqtp72().s[122]++;
            if (response.success) {
              /* istanbul ignore next */
              cov_20mszqtp72().b[43][0]++;
              cov_20mszqtp72().s[123]++;
              successCount++;
              /* istanbul ignore next */
              cov_20mszqtp72().s[124]++;
              results.push({
                executionId,
                success: true,
                message: response.message,
                newState: response.executionState
              });
            } else {
              /* istanbul ignore next */
              cov_20mszqtp72().b[43][1]++;
              cov_20mszqtp72().s[125]++;
              failureCount++;
              /* istanbul ignore next */
              cov_20mszqtp72().s[126]++;
              results.push({
                executionId,
                success: false,
                message: response.message,
                error: response.error?.message
              });
              /* istanbul ignore next */
              cov_20mszqtp72().s[127]++;
              if (!args.continueOnFailure) {
                /* istanbul ignore next */
                cov_20mszqtp72().b[44][0]++;
                cov_20mszqtp72().s[128]++;
                break;
              } else
              /* istanbul ignore next */
              {
                cov_20mszqtp72().b[44][1]++;
              }
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_20mszqtp72().s[129]++;
            failureCount++;
            const errorMessage =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[130]++, error instanceof Error ?
            /* istanbul ignore next */
            (cov_20mszqtp72().b[45][0]++, error.message) :
            /* istanbul ignore next */
            (cov_20mszqtp72().b[45][1]++, 'Unknown error'));
            /* istanbul ignore next */
            cov_20mszqtp72().s[131]++;
            results.push({
              executionId,
              success: false,
              message: `Failed to process execution: ${errorMessage}`,
              error: errorMessage
            });
            /* istanbul ignore next */
            cov_20mszqtp72().s[132]++;
            if (!args.continueOnFailure) {
              /* istanbul ignore next */
              cov_20mszqtp72().b[46][0]++;
              cov_20mszqtp72().s[133]++;
              break;
            } else
            /* istanbul ignore next */
            {
              cov_20mszqtp72().b[46][1]++;
            }
          }
        }
        const overallSuccess =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[134]++, failureCount === 0);
        const successRate =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[135]++, Math.round(successCount / args.executionIds.length * 100));
        let output =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[136]++, `${overallSuccess ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[47][0]++, '✅') :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[47][1]++, '⚠️')} **Batch Execution Control ${overallSuccess ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[48][0]++, 'Completed') :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[48][1]++, 'Partially Completed')}**\n\n`);
        /* istanbul ignore next */
        cov_20mszqtp72().s[137]++;
        output += `- **Action:** ${args.action}\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[138]++;
        output += `- **Total Executions:** ${args.executionIds.length}\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[139]++;
        output += `- **Successful:** ${successCount}\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[140]++;
        output += `- **Failed:** ${failureCount}\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[141]++;
        output += `- **Success Rate:** ${successRate}%\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[142]++;
        output += `- **Continue on Failure:** ${args.continueOnFailure ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[49][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[49][1]++, 'No')}\n\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[143]++;
        output += `**Individual Results:**\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[144]++;
        results.forEach((result, index) => {
          /* istanbul ignore next */
          cov_20mszqtp72().f[9]++;
          const statusIcon =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[145]++, result.success ?
          /* istanbul ignore next */
          (cov_20mszqtp72().b[50][0]++, '✅') :
          /* istanbul ignore next */
          (cov_20mszqtp72().b[50][1]++, '❌'));
          /* istanbul ignore next */
          cov_20mszqtp72().s[146]++;
          output += `${index + 1}. ${statusIcon} **${result.executionId}**\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[147]++;
          output += `   - Status: ${result.success ?
          /* istanbul ignore next */
          (cov_20mszqtp72().b[51][0]++, 'Success') :
          /* istanbul ignore next */
          (cov_20mszqtp72().b[51][1]++, 'Failed')}\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[148]++;
          if (result.newState) {
            /* istanbul ignore next */
            cov_20mszqtp72().b[52][0]++;
            cov_20mszqtp72().s[149]++;
            output += `   - New State: ${result.newState}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_20mszqtp72().b[52][1]++;
          }
          cov_20mszqtp72().s[150]++;
          output += `   - Message: ${result.message}\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[151]++;
          if (result.error) {
            /* istanbul ignore next */
            cov_20mszqtp72().b[53][0]++;
            cov_20mszqtp72().s[152]++;
            output += `   - Error: ${result.error}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_20mszqtp72().b[53][1]++;
          }
          cov_20mszqtp72().s[153]++;
          output += '\n';
        });
        /* istanbul ignore next */
        cov_20mszqtp72().s[154]++;
        return output;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[155]++;
        throw new fastmcp_1.UserError(`Failed to process batch execution control: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[54][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[54][1]++, 'Unknown error')}`);
      }
    }
  });
  // Create execution checkpoint tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[156]++;
  server.addTool({
    name: 'create-execution-checkpoint',
    description: 'Create a checkpoint for execution state that can be restored later',
    parameters: ExecutionCheckpointSchema,
    annotations: {
      title: 'Create Execution Checkpoint',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[10]++;
      cov_20mszqtp72().s[157]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[158]++, getClient());
        /* istanbul ignore next */
        cov_20mszqtp72().s[159]++;
        if (!client) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[55][0]++;
          cov_20mszqtp72().s[160]++;
          throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[55][1]++;
        }
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[161]++, getExecutionStateManager());
        // Get execution details
        const execution =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[162]++, await client.getExecution(args.executionId));
        // Initialize or get execution context
        let context =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[163]++, stateManager.getExecutionContext(args.executionId));
        /* istanbul ignore next */
        cov_20mszqtp72().s[164]++;
        if (!context) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[56][0]++;
          cov_20mszqtp72().s[165]++;
          stateManager.initializeExecution(execution);
          /* istanbul ignore next */
          cov_20mszqtp72().s[166]++;
          context = stateManager.getExecutionContext(args.executionId);
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[56][1]++;
        }
        // Create checkpoint
        const checkpoint =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[167]++, stateManager.createCheckpoint(args.executionId, args.description,
        /* istanbul ignore next */
        (cov_20mszqtp72().b[57][0]++, args.metadata) ||
        /* istanbul ignore next */
        (cov_20mszqtp72().b[57][1]++, {})));
        /* istanbul ignore next */
        cov_20mszqtp72().s[168]++;
        if (!checkpoint) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[58][0]++;
          cov_20mszqtp72().s[169]++;
          return `❌ **Checkpoint Creation Failed**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Reason:** Unable to create checkpoint for execution\n\n` + `The execution may not be in a valid state for checkpoint creation.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[58][1]++;
        }
        cov_20mszqtp72().s[170]++;
        return `💾 **Checkpoint Created Successfully**\n\n` + `- **Checkpoint ID:** ${checkpoint.checkpointId}\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Description:** ${checkpoint.description}\n` + `- **Timestamp:** ${new Date(checkpoint.timestamp).toLocaleString()}\n` + `- **Completed Nodes:** ${checkpoint.completedNodes.length}\n` + `- **Node States:** ${checkpoint.nodeStates.length}\n` + (Object.keys(checkpoint.metadata).length > 0 ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[59][0]++, `- **Metadata:** ${JSON.stringify(checkpoint.metadata, null, 2)}\n`) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[59][1]++, '')) + `\nThe checkpoint can be used to restore the execution to this state later.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[171]++;
        throw new fastmcp_1.UserError(`Failed to create checkpoint: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[60][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[60][1]++, 'Unknown error')}`);
      }
    }
  });
  // Restore from checkpoint tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[172]++;
  server.addTool({
    name: 'restore-execution-checkpoint',
    description: 'Restore execution from a previously created checkpoint',
    parameters: RestoreCheckpointSchema,
    annotations: {
      title: 'Restore Execution Checkpoint',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[11]++;
      cov_20mszqtp72().s[173]++;
      try {
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[174]++, getExecutionStateManager());
        // Restore from checkpoint
        const success =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[175]++, stateManager.restoreFromCheckpoint(args.checkpointId));
        /* istanbul ignore next */
        cov_20mszqtp72().s[176]++;
        if (!success) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[61][0]++;
          cov_20mszqtp72().s[177]++;
          return `❌ **Checkpoint Restoration Failed**\n\n` + `- **Checkpoint ID:** ${args.checkpointId}\n` + `- **Reason:** Checkpoint not found or restoration failed\n\n` + `The checkpoint may not exist or the execution may not be in a valid state for restoration.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[61][1]++;
        }
        cov_20mszqtp72().s[178]++;
        return `🔄 **Checkpoint Restored Successfully**\n\n` + `- **Checkpoint ID:** ${args.checkpointId}\n` + `- **Preserve Progress:** ${args.preserveProgress ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[62][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[62][1]++, 'No')}\n` + `- **Restoration Time:** ${new Date().toLocaleString()}\n\n` + `The execution has been restored to the checkpoint state. ` + `Use 'control-execution' with action 'resume' to continue from this point.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[179]++;
        throw new fastmcp_1.UserError(`Failed to restore checkpoint: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[63][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[63][1]++, 'Unknown error')}`);
      }
    }
  });
  // Execution analytics tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[180]++;
  server.addTool({
    name: 'get-execution-analytics',
    description: 'Get detailed analytics and performance insights for an execution including optimization suggestions',
    parameters: ExecutionAnalyticsSchema,
    annotations: {
      title: 'Get Execution Analytics',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[12]++;
      cov_20mszqtp72().s[181]++;
      try {
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[182]++, getExecutionStateManager());
        // Get analytics
        const analytics =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[183]++, stateManager.getExecutionAnalytics(args.executionId));
        /* istanbul ignore next */
        cov_20mszqtp72().s[184]++;
        if (!analytics) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[64][0]++;
          cov_20mszqtp72().s[185]++;
          return `❌ **Analytics Not Available**\n\n` + `- **Execution ID:** ${args.executionId}\n` + `- **Reason:** Execution not found or analytics not generated\n\n` + `The execution may not exist or may not have enough data for analytics.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[64][1]++;
        }
        let output =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[186]++, `📊 **Execution Analytics**\n\n`);
        /* istanbul ignore next */
        cov_20mszqtp72().s[187]++;
        output += `- **Execution ID:** ${args.executionId}\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[188]++;
        output += `- **Analysis Time:** ${new Date(analytics.timestamp).toLocaleString()}\n\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[189]++;
        if (args.includePerformanceMetrics) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[65][0]++;
          cov_20mszqtp72().s[190]++;
          output += `**Performance Metrics:**\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[191]++;
          output += `- **Total Duration:** ${formatDuration(analytics.performance.totalDuration)}\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[192]++;
          output += `- **Memory Peak:** ${formatBytes(analytics.performance.memoryPeak)}\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[193]++;
          output += `- **CPU Average:** ${analytics.performance.cpuAverage}%\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[194]++;
          output += `- **Node Execution Times:**\n`;
          const sortedNodes =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[195]++, Object.entries(analytics.performance.nodeExecutionTimes).sort(([, a], [, b]) => {
            /* istanbul ignore next */
            cov_20mszqtp72().f[13]++;
            cov_20mszqtp72().s[196]++;
            return b - a;
          }).slice(0, 10));
          /* istanbul ignore next */
          cov_20mszqtp72().s[197]++;
          sortedNodes.forEach(([nodeId, duration]) => {
            /* istanbul ignore next */
            cov_20mszqtp72().f[14]++;
            cov_20mszqtp72().s[198]++;
            output += `  - ${nodeId}: ${formatDuration(duration)}\n`;
          });
          /* istanbul ignore next */
          cov_20mszqtp72().s[199]++;
          output += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[65][1]++;
        }
        cov_20mszqtp72().s[200]++;
        if (
        /* istanbul ignore next */
        (cov_20mszqtp72().b[67][0]++, args.includeErrorAnalysis) &&
        /* istanbul ignore next */
        (cov_20mszqtp72().b[67][1]++, analytics.errors.length > 0)) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[66][0]++;
          cov_20mszqtp72().s[201]++;
          output += `**Error Analysis:**\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[202]++;
          analytics.errors.forEach((error, index) => {
            /* istanbul ignore next */
            cov_20mszqtp72().f[15]++;
            cov_20mszqtp72().s[203]++;
            output += `${index + 1}. **Node:** ${error.nodeId}\n`;
            /* istanbul ignore next */
            cov_20mszqtp72().s[204]++;
            output += `   - **Type:** ${error.errorType}\n`;
            /* istanbul ignore next */
            cov_20mszqtp72().s[205]++;
            output += `   - **Message:** ${error.errorMessage}\n`;
            /* istanbul ignore next */
            cov_20mszqtp72().s[206]++;
            output += `   - **Retry Count:** ${error.retryCount}\n`;
            /* istanbul ignore next */
            cov_20mszqtp72().s[207]++;
            output += `   - **Resolution:** ${error.resolution}\n\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[66][1]++;
        }
        cov_20mszqtp72().s[208]++;
        output += `**Execution Flow:**\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[209]++;
        output += `- **Critical Path:** ${analytics.flow.criticalPath.slice(0, 5).join(' → ')}\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[210]++;
        if (analytics.flow.bottlenecks.length > 0) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[68][0]++;
          cov_20mszqtp72().s[211]++;
          output += `- **Top Bottlenecks:**\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[212]++;
          analytics.flow.bottlenecks.slice(0, 3).forEach(bottleneck => {
            /* istanbul ignore next */
            cov_20mszqtp72().f[16]++;
            cov_20mszqtp72().s[213]++;
            output += `  - ${bottleneck.nodeId}: ${formatDuration(bottleneck.duration)} (${bottleneck.type})\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[68][1]++;
        }
        cov_20mszqtp72().s[214]++;
        output += '\n';
        /* istanbul ignore next */
        cov_20mszqtp72().s[215]++;
        if (
        /* istanbul ignore next */
        (cov_20mszqtp72().b[70][0]++, args.includeOptimizationSuggestions) &&
        /* istanbul ignore next */
        (cov_20mszqtp72().b[70][1]++, analytics.optimizations.length > 0)) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[69][0]++;
          cov_20mszqtp72().s[216]++;
          output += `**Optimization Suggestions:**\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[217]++;
          analytics.optimizations.forEach((suggestion, index) => {
            /* istanbul ignore next */
            cov_20mszqtp72().f[17]++;
            const priorityIcon =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[218]++, suggestion.priority === 'high' ?
            /* istanbul ignore next */
            (cov_20mszqtp72().b[71][0]++, '🔴') :
            /* istanbul ignore next */
            (cov_20mszqtp72().b[71][1]++, suggestion.priority === 'medium' ?
            /* istanbul ignore next */
            (cov_20mszqtp72().b[72][0]++, '🟡') :
            /* istanbul ignore next */
            (cov_20mszqtp72().b[72][1]++, '🟢')));
            /* istanbul ignore next */
            cov_20mszqtp72().s[219]++;
            output += `${index + 1}. ${priorityIcon} **${suggestion.type.charAt(0).toUpperCase() + suggestion.type.slice(1)}**\n`;
            /* istanbul ignore next */
            cov_20mszqtp72().s[220]++;
            output += `   - **Description:** ${suggestion.description}\n`;
            /* istanbul ignore next */
            cov_20mszqtp72().s[221]++;
            output += `   - **Estimated Impact:** ${suggestion.estimatedImpact}\n`;
            /* istanbul ignore next */
            cov_20mszqtp72().s[222]++;
            output += `   - **Priority:** ${suggestion.priority}\n\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[69][1]++;
        }
        cov_20mszqtp72().s[223]++;
        return output;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[224]++;
        throw new fastmcp_1.UserError(`Failed to get execution analytics: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[73][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[73][1]++, 'Unknown error')}`);
      }
    }
  });
  // Monitor executions tool
  /* istanbul ignore next */
  cov_20mszqtp72().s[225]++;
  server.addTool({
    name: 'monitor-executions',
    description: 'Monitor multiple executions with real-time status, history, and metrics',
    parameters: ExecutionMonitoringSchema,
    annotations: {
      title: 'Monitor Executions',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_20mszqtp72().f[18]++;
      cov_20mszqtp72().s[226]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[227]++, getClient());
        /* istanbul ignore next */
        cov_20mszqtp72().s[228]++;
        if (!client) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[74][0]++;
          cov_20mszqtp72().s[229]++;
          throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[74][1]++;
        }
        const stateManager =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[230]++, getExecutionStateManager());
        // Get executions to monitor
        let executionIds =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[231]++, args.executionIds);
        /* istanbul ignore next */
        cov_20mszqtp72().s[232]++;
        if (!executionIds) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[75][0]++;
          // Get recent executions if none specified
          const response =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[233]++, await client.getExecutions({
            limit: args.limit
          }));
          /* istanbul ignore next */
          cov_20mszqtp72().s[234]++;
          executionIds = response.data.map(exec => {
            /* istanbul ignore next */
            cov_20mszqtp72().f[19]++;
            cov_20mszqtp72().s[235]++;
            return exec.id;
          });
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[75][1]++;
        }
        const monitoringResults =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[236]++, []);
        /* istanbul ignore next */
        cov_20mszqtp72().s[237]++;
        for (const executionId of executionIds.slice(0, args.limit)) {
          /* istanbul ignore next */
          cov_20mszqtp72().s[238]++;
          try {
            const execution =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[239]++, await client.getExecution(executionId));
            const context =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[240]++, stateManager.getExecutionContext(executionId));
            // Filter by state if specified
            /* istanbul ignore next */
            cov_20mszqtp72().s[241]++;
            if (
            /* istanbul ignore next */
            (cov_20mszqtp72().b[77][0]++, args.states) &&
            /* istanbul ignore next */
            (cov_20mszqtp72().b[77][1]++, context)) {
              /* istanbul ignore next */
              cov_20mszqtp72().b[76][0]++;
              cov_20mszqtp72().s[242]++;
              if (!args.states.includes(context.execution.enhancedState)) {
                /* istanbul ignore next */
                cov_20mszqtp72().b[78][0]++;
                cov_20mszqtp72().s[243]++;
                continue;
              } else
              /* istanbul ignore next */
              {
                cov_20mszqtp72().b[78][1]++;
              }
            } else
            /* istanbul ignore next */
            {
              cov_20mszqtp72().b[76][1]++;
            }
            const result =
            /* istanbul ignore next */
            (cov_20mszqtp72().s[244]++, {
              executionId,
              status: execution.status,
              enhancedState:
              /* istanbul ignore next */
              (cov_20mszqtp72().b[79][0]++, context?.execution.enhancedState) ||
              /* istanbul ignore next */
              (cov_20mszqtp72().b[79][1]++, 'unknown'),
              startedAt: execution.startedAt,
              stoppedAt: execution.stoppedAt,
              workflowId: execution.workflowId,
              mode: execution.mode
            });
            /* istanbul ignore next */
            cov_20mszqtp72().s[245]++;
            if (context) {
              /* istanbul ignore next */
              cov_20mszqtp72().b[80][0]++;
              cov_20mszqtp72().s[246]++;
              result.progress = context.execution.progress;
              /* istanbul ignore next */
              cov_20mszqtp72().s[247]++;
              result.availableActions = context.availableActions;
              /* istanbul ignore next */
              cov_20mszqtp72().s[248]++;
              if (args.includeMetrics) {
                /* istanbul ignore next */
                cov_20mszqtp72().b[81][0]++;
                cov_20mszqtp72().s[249]++;
                result.metrics = context.execution.metrics;
              } else
              /* istanbul ignore next */
              {
                cov_20mszqtp72().b[81][1]++;
              }
              cov_20mszqtp72().s[250]++;
              if (args.includeHistory) {
                /* istanbul ignore next */
                cov_20mszqtp72().b[82][0]++;
                cov_20mszqtp72().s[251]++;
                result.history = context.history;
              } else
              /* istanbul ignore next */
              {
                cov_20mszqtp72().b[82][1]++;
              }
            } else
            /* istanbul ignore next */
            {
              cov_20mszqtp72().b[80][1]++;
            }
            cov_20mszqtp72().s[252]++;
            monitoringResults.push(result);
          } catch (error) {
            /* istanbul ignore next */
            cov_20mszqtp72().s[253]++;
            // Skip executions that can't be accessed
            continue;
          }
        }
        /* istanbul ignore next */
        cov_20mszqtp72().s[254]++;
        if (monitoringResults.length === 0) {
          /* istanbul ignore next */
          cov_20mszqtp72().b[83][0]++;
          cov_20mszqtp72().s[255]++;
          return `📊 **No Executions Found**\n\n` + `No executions match the specified criteria for monitoring.`;
        } else
        /* istanbul ignore next */
        {
          cov_20mszqtp72().b[83][1]++;
        }
        let output =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[256]++, `📊 **Execution Monitoring Dashboard**\n\n`);
        /* istanbul ignore next */
        cov_20mszqtp72().s[257]++;
        output += `- **Total Executions:** ${monitoringResults.length}\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[258]++;
        output += `- **Monitoring Time:** ${new Date().toLocaleString()}\n\n`;
        // Group by state
        const stateGroups =
        /* istanbul ignore next */
        (cov_20mszqtp72().s[259]++, {});
        /* istanbul ignore next */
        cov_20mszqtp72().s[260]++;
        monitoringResults.forEach(result => {
          /* istanbul ignore next */
          cov_20mszqtp72().f[20]++;
          const state =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[261]++,
          /* istanbul ignore next */
          (cov_20mszqtp72().b[84][0]++, result.enhancedState) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[84][1]++, result.status));
          /* istanbul ignore next */
          cov_20mszqtp72().s[262]++;
          if (!stateGroups[state]) {
            /* istanbul ignore next */
            cov_20mszqtp72().b[85][0]++;
            cov_20mszqtp72().s[263]++;
            stateGroups[state] = [];
          } else
          /* istanbul ignore next */
          {
            cov_20mszqtp72().b[85][1]++;
          }
          cov_20mszqtp72().s[264]++;
          stateGroups[state].push(result);
        });
        /* istanbul ignore next */
        cov_20mszqtp72().s[265]++;
        output += `**State Summary:**\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[266]++;
        Object.entries(stateGroups).forEach(([state, executions]) => {
          /* istanbul ignore next */
          cov_20mszqtp72().f[21]++;
          const icon =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[267]++, getStatusIcon(state));
          /* istanbul ignore next */
          cov_20mszqtp72().s[268]++;
          output += `- ${icon} ${state}: ${executions.length}\n`;
        });
        /* istanbul ignore next */
        cov_20mszqtp72().s[269]++;
        output += '\n';
        /* istanbul ignore next */
        cov_20mszqtp72().s[270]++;
        output += `**Execution Details:**\n`;
        /* istanbul ignore next */
        cov_20mszqtp72().s[271]++;
        monitoringResults.forEach((result, index) => {
          /* istanbul ignore next */
          cov_20mszqtp72().f[22]++;
          const statusIcon =
          /* istanbul ignore next */
          (cov_20mszqtp72().s[272]++, getStatusIcon(
          /* istanbul ignore next */
          (cov_20mszqtp72().b[86][0]++, result.enhancedState) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[86][1]++, result.status)));
          /* istanbul ignore next */
          cov_20mszqtp72().s[273]++;
          output += `${index + 1}. ${statusIcon} **${result.executionId}**\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[274]++;
          output += `   - **State:** ${
          /* istanbul ignore next */
          (cov_20mszqtp72().b[87][0]++, result.enhancedState) ||
          /* istanbul ignore next */
          (cov_20mszqtp72().b[87][1]++, result.status)}\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[275]++;
          output += `   - **Workflow:** ${result.workflowId}\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[276]++;
          output += `   - **Started:** ${new Date(result.startedAt).toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_20mszqtp72().s[277]++;
          if (result.stoppedAt) {
            /* istanbul ignore next */
            cov_20mszqtp72().b[88][0]++;
            cov_20mszqtp72().s[278]++;
            output += `   - **Stopped:** ${new Date(result.stoppedAt).toLocaleString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_20mszqtp72().b[88][1]++;
          }
          cov_20mszqtp72().s[279]++;
          if (result.progress) {
            /* istanbul ignore next */
            cov_20mszqtp72().b[89][0]++;
            cov_20mszqtp72().s[280]++;
            output += `   - **Progress:** ${result.progress.percentComplete}% (${result.progress.completedNodes}/${result.progress.totalNodes} nodes)\n`;
          } else
          /* istanbul ignore next */
          {
            cov_20mszqtp72().b[89][1]++;
          }
          cov_20mszqtp72().s[281]++;
          if (result.availableActions?.length > 0) {
            /* istanbul ignore next */
            cov_20mszqtp72().b[90][0]++;
            cov_20mszqtp72().s[282]++;
            output += `   - **Available Actions:** ${result.availableActions.join(', ')}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_20mszqtp72().b[90][1]++;
          }
          cov_20mszqtp72().s[283]++;
          output += '\n';
        });
        /* istanbul ignore next */
        cov_20mszqtp72().s[284]++;
        return output;
      } catch (error) {
        /* istanbul ignore next */
        cov_20mszqtp72().s[285]++;
        throw new fastmcp_1.UserError(`Failed to monitor executions: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_20mszqtp72().b[91][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20mszqtp72().b[91][1]++, 'Unknown error')}`);
      }
    }
  });
}
// Helper functions
function getStatusIcon(state) {
  /* istanbul ignore next */
  cov_20mszqtp72().f[23]++;
  cov_20mszqtp72().s[286]++;
  switch (state) {
    case 'running':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][0]++;
      cov_20mszqtp72().s[287]++;
      return '🔄';
    case 'completed':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][1]++;
    case 'success':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][2]++;
      cov_20mszqtp72().s[288]++;
      return '✅';
    case 'failed':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][3]++;
    case 'error':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][4]++;
      cov_20mszqtp72().s[289]++;
      return '❌';
    case 'cancelled':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][5]++;
      cov_20mszqtp72().s[290]++;
      return '🚫';
    case 'paused':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][6]++;
      cov_20mszqtp72().s[291]++;
      return '⏸️';
    case 'stopped':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][7]++;
      cov_20mszqtp72().s[292]++;
      return '⏹️';
    case 'waiting':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][8]++;
      cov_20mszqtp72().s[293]++;
      return '⏳';
    case 'retrying':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][9]++;
      cov_20mszqtp72().s[294]++;
      return '🔁';
    case 'partial':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][10]++;
      cov_20mszqtp72().s[295]++;
      return '🎯';
    case 'timeout':
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][11]++;
      cov_20mszqtp72().s[296]++;
      return '⏰';
    default:
      /* istanbul ignore next */
      cov_20mszqtp72().b[92][12]++;
      cov_20mszqtp72().s[297]++;
      return '⚪';
  }
}
function formatDuration(ms) {
  /* istanbul ignore next */
  cov_20mszqtp72().f[24]++;
  cov_20mszqtp72().s[298]++;
  if (ms < 1000) {
    /* istanbul ignore next */
    cov_20mszqtp72().b[93][0]++;
    cov_20mszqtp72().s[299]++;
    return `${ms}ms`;
  } else {
    /* istanbul ignore next */
    cov_20mszqtp72().b[93][1]++;
    cov_20mszqtp72().s[300]++;
    if (ms < 60000) {
      /* istanbul ignore next */
      cov_20mszqtp72().b[94][0]++;
      cov_20mszqtp72().s[301]++;
      return `${(ms / 1000).toFixed(1)}s`;
    } else {
      /* istanbul ignore next */
      cov_20mszqtp72().b[94][1]++;
      cov_20mszqtp72().s[302]++;
      if (ms < 3600000) {
        /* istanbul ignore next */
        cov_20mszqtp72().b[95][0]++;
        cov_20mszqtp72().s[303]++;
        return `${(ms / 60000).toFixed(1)}m`;
      } else {
        /* istanbul ignore next */
        cov_20mszqtp72().b[95][1]++;
        cov_20mszqtp72().s[304]++;
        return `${(ms / 3600000).toFixed(1)}h`;
      }
    }
  }
}
function formatBytes(bytes) {
  /* istanbul ignore next */
  cov_20mszqtp72().f[25]++;
  cov_20mszqtp72().s[305]++;
  if (bytes === 0) {
    /* istanbul ignore next */
    cov_20mszqtp72().b[96][0]++;
    cov_20mszqtp72().s[306]++;
    return '0 B';
  } else
  /* istanbul ignore next */
  {
    cov_20mszqtp72().b[96][1]++;
  }
  const k =
  /* istanbul ignore next */
  (cov_20mszqtp72().s[307]++, 1024);
  const sizes =
  /* istanbul ignore next */
  (cov_20mszqtp72().s[308]++, ['B', 'KB', 'MB', 'GB']);
  const i =
  /* istanbul ignore next */
  (cov_20mszqtp72().s[309]++, Math.floor(Math.log(bytes) / Math.log(k)));
  /* istanbul ignore next */
  cov_20mszqtp72().s[310]++;
  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,