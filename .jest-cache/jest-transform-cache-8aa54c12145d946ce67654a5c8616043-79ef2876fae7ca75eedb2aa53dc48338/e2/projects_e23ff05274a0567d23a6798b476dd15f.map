{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/projects.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/projects.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  N8nProject,\n  CreateProjectRequest,\n  UpdateProjectRequest,\n  PaginationOptions,\n} from '../types/n8n.js';\n\n// Zod schemas for validation\nconst ProjectIdSchema = z.object({\n  projectId: z.string().min(1, 'Project ID is required'),\n});\n\nconst ListProjectsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateProjectSchema = z.object({\n  name: z.string().min(1, 'Project name is required'),\n  type: z.string().optional(),\n});\n\nconst UpdateProjectSchema = z.object({\n  projectId: z.string().min(1, 'Project ID is required'),\n  name: z.string().min(1, 'Project name is required'),\n});\n\n// Tool registration function\nexport function createProjectTools(getClient: () => N8nClient | null, server: any) {\n  // List projects tool\n  server.addTool({\n    name: 'list-projects',\n    description:\n      'List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled',\n    parameters: ListProjectsSchema,\n    annotations: {\n      title: 'List n8n Projects',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListProjectsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getProjects(options);\n\n        if (response.data.length === 0) {\n          return 'No projects found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} project(s):\\n\\n`;\n\n        response.data.forEach((project: N8nProject, index: number) => {\n          result += `${index + 1}. **${project.name}**\\n`;\n          result += `   - ID: ${project.id}\\n`;\n          if (project.type) {\n            result += `   - Type: ${project.type}\\n`;\n          }\n          if (project.createdAt) {\n            result += `   - Created: ${new Date(project.createdAt).toLocaleDateString()}\\n`;\n          }\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\nðŸ“„ Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to list projects: ${error.message}`);\n        }\n        throw new UserError('Failed to list projects with unknown error');\n      }\n    },\n  });\n\n  // Create project tool\n  server.addTool({\n    name: 'create-project',\n    description:\n      'Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled',\n    parameters: CreateProjectSchema,\n    annotations: {\n      title: 'Create New Project',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateProjectSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const projectData: CreateProjectRequest = {\n          name: args.name,\n          type: args.type,\n        };\n\n        const project = await client.createProject(projectData);\n\n        return (\n          `âœ… Successfully created project \"${project.name}\" with ID: ${project.id}\\n` +\n          (project.type ? `Type: ${project.type}` : '')\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to create project: ${error.message}`);\n        }\n        throw new UserError('Failed to create project with unknown error');\n      }\n    },\n  });\n\n  // Update project tool\n  server.addTool({\n    name: 'update-project',\n    description:\n      \"Update a project's name and properties. NOTE: Requires n8n Enterprise license with project management features enabled\",\n    parameters: UpdateProjectSchema,\n    annotations: {\n      title: 'Update Project',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateProjectSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const { projectId, ...updateData } = args;\n        const projectData: UpdateProjectRequest = {\n          name: updateData.name,\n        };\n\n        const project = await client.updateProject(projectId, projectData);\n\n        return (\n          `âœ… Successfully updated project \"${project.name}\" (ID: ${project.id})\\n` +\n          (project.type ? `Type: ${project.type}` : '')\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to update project: ${error.message}`);\n        }\n        throw new UserError('Failed to update project with unknown error');\n      }\n    },\n  });\n\n  // Delete project tool\n  server.addTool({\n    name: 'delete-project',\n    description:\n      'Delete a project from n8n permanently. NOTE: Requires n8n Enterprise license with project management features enabled',\n    parameters: ProjectIdSchema,\n    annotations: {\n      title: 'Delete Project',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ProjectIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteProject(args.projectId);\n        return `âœ… Successfully deleted project with ID: ${args.projectId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to delete project: ${error.message}`);\n        }\n        throw new UserError('Failed to delete project with unknown error');\n      }\n    },\n  });\n}\n"],"version":3}