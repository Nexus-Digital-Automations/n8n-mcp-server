{"version":3,"names":["cov_2qv86yv8dz","actualCoverage","s","exports","createNodeManagementTools","zod_1","require","fastmcp_1","PackageNameSchema","z","object","packageName","string","min","InstallPackageSchema","name","version","optional","SearchNodesSchema","nodeType","workflowId","activeOnly","boolean","default","limit","number","max","NodeTypeSchema","UpdateNodeSchema","nodeId","updates","parameters","record","unknown","disabled","notes","position","tuple","DynamicParametersSchema","property","currentNodeParameters","credentials","path","methodName","loadOptionsMethod","formatPackageList","packages","f","length","b","map","pkg","nodeCount","installedNodes","status","failedLoading","installedVersion","Date","updatedAt","toLocaleString","join","formatNodeTypeList","nodeTypes","node","groups","group","c","displayName","description","formatSearchResults","results","result","isWorkflowActive","type","workflowName","formatUsageStats","stats","stat","lastUsed","totalCount","activeWorkflowCount","getClient","server","addTool","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","client","UserError","response","getCommunityPackages","data","error","Error","message","args","packageData","installedPackage","installCommunityPackage","includes","updatedPackage","updateCommunityPackage","uninstallCommunityPackage","communityOnly","getCommunityNodeTypes","getNodeTypes","limitedResults","slice","hasMore","getNodeType","cred","required","properties","prop","hasMoreProps","documentationUrl","workflow","getWorkflow","nodes","filteredNodes","filter","push","id","active","workflowsResponse","getWorkflows","workflows","wf","fullWorkflow","includeInactive","usageMap","workflowIds","Object","values","sort","a","nodeIndex","findIndex","originalNode","updatedNode","updateWorkflow","changes","keys","key","JSON","stringify","options","getDynamicNodeParameters","formatted","param","value","classification","classifyAINode","capabilities","aiCapabilities","cap","integrations","suggestedIntegrations","int","isAINode","Math","round","confidenceScore","suggestions","getAINodeSuggestions","suggestion","index","alternatives","alternativeNodes","reasoning","confidence"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  N8nCommunityPackage,\n  N8nNodeTypeDescription,\n  N8nWorkflow,\n  N8nNode,\n  ApiResponse,\n  CommunityPackageInstallRequest,\n  CommunityPackageUpdateRequest,\n  NodeSearchResult,\n  NodeUsageStats,\n  NodeUpdateRequest,\n  DynamicNodeOptions,\n  AINodeClassification,\n  AINodeSuggestion,\n} from '../types/n8n.js';\n\n// Validation Schemas\nconst PackageNameSchema = z.object({\n  packageName: z.string().min(1, 'Package name is required'),\n});\n\nconst InstallPackageSchema = z.object({\n  name: z.string().min(1, 'Package name is required'),\n  version: z.string().optional(),\n});\n\nconst SearchNodesSchema = z.object({\n  nodeType: z.string().optional(),\n  workflowId: z.string().optional(),\n  activeOnly: z.boolean().optional().default(false),\n  limit: z.number().min(1).max(100).optional().default(50),\n});\n\nconst NodeTypeSchema = z.object({\n  nodeType: z.string().min(1, 'Node type is required'),\n});\n\nconst UpdateNodeSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  updates: z.object({\n    name: z.string().optional(),\n    parameters: z.record(z.unknown()).optional(),\n    disabled: z.boolean().optional(),\n    notes: z.string().optional(),\n    position: z.tuple([z.number(), z.number()]).optional(),\n  }),\n});\n\nconst DynamicParametersSchema = z.object({\n  property: z.string().min(1, 'Property name is required'),\n  nodeType: z.string().min(1, 'Node type is required'),\n  currentNodeParameters: z.record(z.unknown()).optional().default({}),\n  credentials: z.record(z.unknown()).optional(),\n  path: z.string().optional(),\n  methodName: z.string().optional(),\n  loadOptionsMethod: z.string().optional(),\n});\n\n// Helper Functions\nfunction formatPackageList(packages: N8nCommunityPackage[]): string {\n  if (packages.length === 0) {\n    return 'No community packages installed.';\n  }\n\n  return packages.map(pkg => {\n    const nodeCount = pkg.installedNodes?.length || 0;\n    const status = pkg.failedLoading ? ' (⚠️ Failed Loading)' : '';\n    return `• ${pkg.packageName}@${pkg.installedVersion}${status}\\n  ${nodeCount} node(s) installed\\n  Updated: ${new Date(pkg.updatedAt).toLocaleString()}`;\n  }).join('\\n\\n');\n}\n\nfunction formatNodeTypeList(nodeTypes: N8nNodeTypeDescription[]): string {\n  if (nodeTypes.length === 0) {\n    return 'No node types found.';\n  }\n\n  return nodeTypes.map(node => {\n    const groups = node.group.join(', ');\n    const credentials = node.credentials?.length ? `\\n  Credentials: ${node.credentials.map(c => c.name).join(', ')}` : '';\n    return `• ${node.displayName} (${node.name})\\n  Version: ${node.version}\\n  Groups: ${groups}${credentials}\\n  ${node.description}`;\n  }).join('\\n\\n');\n}\n\nfunction formatSearchResults(results: NodeSearchResult[]): string {\n  if (results.length === 0) {\n    return 'No nodes found matching the search criteria.';\n  }\n\n  return results.map(result => {\n    const status = result.isWorkflowActive ? '✅ Active' : '❌ Inactive';\n    const disabled = result.node.disabled ? ' (Disabled)' : '';\n    return `• ${result.node.name} (${result.node.type})${disabled}\\n  Workflow: ${result.workflowName} (${result.workflowId})\\n  Status: ${status}\\n  Position: [${result.node.position.join(', ')}]`;\n  }).join('\\n\\n');\n}\n\nfunction formatUsageStats(stats: NodeUsageStats[]): string {\n  if (stats.length === 0) {\n    return 'No usage statistics found.';\n  }\n\n  return stats.map(stat => {\n    const lastUsed = stat.lastUsed ? `\\n  Last Used: ${new Date(stat.lastUsed).toLocaleString()}` : '';\n    return `• ${stat.nodeType}\\n  Total Usage: ${stat.totalCount} times\\n  Active Workflows: ${stat.activeWorkflowCount}${lastUsed}`;\n  }).join('\\n\\n');\n}\n\nexport function createNodeManagementTools(getClient: () => N8nClient | null, server: any) {\n  // Community Package Management Tools\n  server.addTool({\n    name: 'list-community-packages',\n    description: 'List all installed community packages and their node types',\n    parameters: z.object({}),\n    annotations: {\n      title: 'List Community Packages',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async () => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const response = await client.getCommunityPackages();\n        return formatPackageList(response.data);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list community packages: ${error.message}`);\n        }\n        throw new UserError('Failed to list community packages with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'install-community-package',\n    description: 'Install a community package from npm registry',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Install Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageInstallRequest = {\n          name: args.name,\n          version: args.version,\n        };\n        \n        const installedPackage = await client.installCommunityPackage(packageData);\n        const nodeCount = installedPackage.installedNodes?.length || 0;\n        \n        return `✅ Successfully installed package: ${installedPackage.packageName}@${installedPackage.installedVersion}\\n\\nInstalled ${nodeCount} new node type(s):\\n${installedPackage.installedNodes?.map(node => `• ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('already installed')) {\n            throw new UserError(`Package ${args.name} is already installed. Use update-community-package to update it.`);\n          }\n          throw new UserError(`Failed to install package: ${error.message}`);\n        }\n        throw new UserError('Failed to install package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-community-package',\n    description: 'Update an installed community package to a newer version',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Update Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageUpdateRequest = {\n          name: args.name,\n          version: args.version,\n        };\n        \n        const updatedPackage = await client.updateCommunityPackage(args.name, packageData);\n        const nodeCount = updatedPackage.installedNodes?.length || 0;\n        \n        return `✅ Successfully updated package: ${updatedPackage.packageName}@${updatedPackage.installedVersion}\\n\\nPackage contains ${nodeCount} node type(s):\\n${updatedPackage.installedNodes?.map(node => `• ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(`Package ${args.name} is not installed. Use install-community-package to install it first.`);\n          }\n          throw new UserError(`Failed to update package: ${error.message}`);\n        }\n        throw new UserError('Failed to update package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'uninstall-community-package',\n    description: 'Remove a community package and all its node types',\n    parameters: PackageNameSchema,\n    annotations: {\n      title: 'Uninstall Community Package',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof PackageNameSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.uninstallCommunityPackage(args.packageName);\n        return `✅ Successfully uninstalled package: ${args.packageName}\\n\\n⚠️ Note: Any workflows using nodes from this package may no longer function correctly.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(`Package ${args.packageName} is not installed.`);\n          }\n          throw new UserError(`Failed to uninstall package: ${error.message}`);\n        }\n        throw new UserError('Failed to uninstall package with unknown error');\n      }\n    },\n  });\n\n  // Node Type Discovery Tools\n  server.addTool({\n    name: 'list-node-types',\n    description: 'List all available node types (core and community)',\n    parameters: z.object({\n      communityOnly: z.boolean().optional().default(false),\n      limit: z.number().min(1).max(500).optional().default(100),\n    }),\n    annotations: {\n      title: 'List Node Types',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { communityOnly?: boolean; limit?: number }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeTypes = args.communityOnly \n          ? await client.getCommunityNodeTypes()\n          : await client.getNodeTypes();\n        \n        const limitedResults = nodeTypes.slice(0, args.limit);\n        const hasMore = nodeTypes.length > (args.limit || 100);\n        \n        let result = formatNodeTypeList(limitedResults);\n        if (hasMore) {\n          result += `\\n\\n... and ${nodeTypes.length - (args.limit || 100)} more node types. Use a higher limit to see more.`;\n        }\n        \n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list node types: ${error.message}`);\n        }\n        throw new UserError('Failed to list node types with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-node-type-details',\n    description: 'Get detailed information about a specific node type including parameters and credentials',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get Node Type Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeType = await client.getNodeType(args.nodeType);\n        \n        const credentials = nodeType.credentials?.map(cred => \n          `• ${cred.name}${cred.required ? ' (Required)' : ' (Optional)'}`\n        ).join('\\n') || 'None';\n        \n        const properties = nodeType.properties.slice(0, 10).map(prop => \n          `• ${prop.displayName} (${prop.name}): ${prop.type}${prop.required ? ' *' : ''}\\n  ${prop.description || 'No description'}`\n        ).join('\\n');\n        \n        const hasMoreProps = nodeType.properties.length > 10;\n        \n        return `📋 Node Type: ${nodeType.displayName}\\n\\n` +\n          `🔧 Technical Name: ${nodeType.name}\\n` +\n          `📦 Version: ${nodeType.version}\\n` +\n          `📁 Groups: ${nodeType.group.join(', ')}\\n` +\n          `📝 Description: ${nodeType.description}\\n\\n` +\n          `🔐 Credentials:\\n${credentials}\\n\\n` +\n          `⚙️ Parameters${hasMoreProps ? ' (showing first 10)' : ''}:\\n${properties}` +\n          (hasMoreProps ? '\\n\\n... and more parameters available' : '') +\n          (nodeType.documentationUrl ? `\\n\\n📖 Documentation: ${nodeType.documentationUrl}` : '');\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found')) {\n            throw new UserError(`Node type '${args.nodeType}' not found. Check the name and try again.`);\n          }\n          throw new UserError(`Failed to get node type details: ${error.message}`);\n        }\n        throw new UserError('Failed to get node type details with unknown error');\n      }\n    },\n  });\n\n  // Workflow Node Analysis Tools\n  server.addTool({\n    name: 'search-workflow-nodes',\n    description: 'Search for nodes across workflows by type, name, or workflow criteria',\n    parameters: SearchNodesSchema,\n    annotations: {\n      title: 'Search Workflow Nodes',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof SearchNodesSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const results: NodeSearchResult[] = [];\n        \n        if (args.workflowId) {\n          // Search within specific workflow\n          const workflow = await client.getWorkflow(args.workflowId);\n          const nodes = workflow.nodes || [];\n          \n          const filteredNodes = nodes.filter(node => \n            !args.nodeType || node.type.includes(args.nodeType)\n          );\n          \n          results.push(...filteredNodes.map(node => ({\n            workflowId: workflow.id,\n            workflowName: workflow.name,\n            node,\n            isWorkflowActive: workflow.active,\n          })));\n        } else {\n          // Search across all workflows\n          const workflowsResponse = await client.getWorkflows({ limit: args.limit });\n          const workflows = workflowsResponse.data.filter(wf => \n            !args.activeOnly || wf.active\n          );\n          \n          for (const workflow of workflows) {\n            const fullWorkflow = await client.getWorkflow(workflow.id);\n            const nodes = fullWorkflow.nodes || [];\n            \n            const filteredNodes = nodes.filter(node => \n              !args.nodeType || node.type.includes(args.nodeType)\n            );\n            \n            results.push(...filteredNodes.map(node => ({\n              workflowId: workflow.id,\n              workflowName: workflow.name,\n              node,\n              isWorkflowActive: workflow.active,\n            })));\n          }\n        }\n        \n        const limitedResults = results.slice(0, args.limit);\n        return formatSearchResults(limitedResults);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to search nodes: ${error.message}`);\n        }\n        throw new UserError('Failed to search nodes with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'analyze-node-usage',\n    description: 'Analyze usage statistics for node types across all workflows',\n    parameters: z.object({\n      nodeType: z.string().optional(),\n      includeInactive: z.boolean().optional().default(false),\n    }),\n    annotations: {\n      title: 'Analyze Node Usage',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { nodeType?: string; includeInactive?: boolean }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflowsResponse = await client.getWorkflows({ limit: 100 });\n        const workflows = workflowsResponse.data;\n        const usageMap: Record<string, NodeUsageStats> = {};\n        \n        for (const workflow of workflows) {\n          if (!args.includeInactive && !workflow.active) continue;\n          \n          const fullWorkflow = await client.getWorkflow(workflow.id);\n          const nodes = fullWorkflow.nodes || [];\n          \n          for (const node of nodes) {\n            if (args.nodeType && !node.type.includes(args.nodeType)) continue;\n            \n            if (!usageMap[node.type]) {\n              usageMap[node.type] = {\n                nodeType: node.type,\n                totalCount: 0,\n                activeWorkflowCount: 0,\n                workflowIds: [],\n              };\n            }\n            \n            usageMap[node.type].totalCount++;\n            if (workflow.active) {\n              usageMap[node.type].activeWorkflowCount++;\n            }\n            if (!usageMap[node.type].workflowIds.includes(workflow.id)) {\n              usageMap[node.type].workflowIds.push(workflow.id);\n            }\n          }\n        }\n        \n        const stats = Object.values(usageMap).sort((a, b) => b.totalCount - a.totalCount);\n        return formatUsageStats(stats);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze node usage: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze node usage with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-workflow-node',\n    description: 'Update properties of a specific node within a workflow',\n    parameters: UpdateNodeSchema,\n    annotations: {\n      title: 'Update Workflow Node',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof UpdateNodeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n        \n        const nodeIndex = nodes.findIndex(node => node.id === args.nodeId);\n        if (nodeIndex === -1) {\n          throw new UserError(`Node with ID '${args.nodeId}' not found in workflow '${args.workflowId}'`);\n        }\n        \n        const originalNode = nodes[nodeIndex];\n        const updatedNode = {\n          ...originalNode,\n          ...args.updates,\n          id: originalNode.id, // Preserve original ID\n          type: originalNode.type, // Preserve original type\n        };\n        \n        nodes[nodeIndex] = updatedNode;\n        \n        await client.updateWorkflow(args.workflowId, {\n          nodes: nodes as Array<Record<string, unknown>>,\n        });\n        \n        const changes = Object.keys(args.updates).map(key => \n          `• ${key}: ${JSON.stringify((originalNode as any)[key])} → ${JSON.stringify((args.updates as any)[key])}`\n        ).join('\\n');\n        \n        return `✅ Successfully updated node '${originalNode.name}' in workflow '${workflow.name}'\\n\\nChanges made:\\n${changes}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update node: ${error.message}`);\n        }\n        throw new UserError('Failed to update node with unknown error');\n      }\n    },\n  });\n\n  // Dynamic Parameters and AI Tools\n  server.addTool({\n    name: 'get-dynamic-node-parameters',\n    description: 'Get dynamic parameter options for a node type based on current configuration',\n    parameters: DynamicParametersSchema,\n    annotations: {\n      title: 'Get Dynamic Node Parameters',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof DynamicParametersSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: DynamicNodeOptions = {\n          property: args.property,\n          currentNodeParameters: args.currentNodeParameters,\n          credentials: args.credentials,\n          path: args.path,\n          methodName: args.methodName,\n          loadOptionsMethod: args.loadOptionsMethod,\n        };\n        \n        const parameters = await client.getDynamicNodeParameters(options);\n        \n        if (parameters.length === 0) {\n          return `No dynamic parameters found for property '${args.property}' on node type '${args.nodeType}'`;\n        }\n        \n        const formatted = parameters.map(param => \n          `• ${param.displayName}: ${param.value}${param.type ? ` (${param.type})` : ''}`\n        ).join('\\n');\n        \n        return `🔧 Dynamic parameters for '${args.property}':\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get dynamic parameters: ${error.message}`);\n        }\n        throw new UserError('Failed to get dynamic parameters with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'classify-ai-node',\n    description: 'Use AI to classify and analyze a node type for AI capabilities and integrations',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Classify AI Node',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const classification = await client.classifyAINode(args.nodeType);\n        \n        const capabilities = classification.aiCapabilities.length > 0 \n          ? classification.aiCapabilities.map(cap => `• ${cap}`).join('\\n')\n          : 'None identified';\n          \n        const integrations = classification.suggestedIntegrations.length > 0\n          ? classification.suggestedIntegrations.map(int => `• ${int}`).join('\\n')\n          : 'None suggested';\n        \n        return `🤖 AI Classification for ${args.nodeType}\\n\\n` +\n          `Is AI Node: ${classification.isAINode ? '✅ Yes' : '❌ No'}\\n` +\n          `Confidence Score: ${Math.round(classification.confidenceScore * 100)}%\\n\\n` +\n          `🎯 AI Capabilities:\\n${capabilities}\\n\\n` +\n          `🔗 Suggested Integrations:\\n${integrations}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to classify AI node: ${error.message}`);\n        }\n        throw new UserError('Failed to classify AI node with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-ai-node-suggestions',\n    description: 'Get AI-powered suggestions for optimizing or enhancing a node type',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get AI Node Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const suggestions = await client.getAINodeSuggestions(args.nodeType);\n        \n        if (suggestions.length === 0) {\n          return `No AI suggestions available for node type '${args.nodeType}'`;\n        }\n        \n        const formatted = suggestions.map((suggestion, index) => {\n          const alternatives = suggestion.alternativeNodes.length > 0\n            ? `\\n  Alternative nodes: ${suggestion.alternativeNodes.join(', ')}`\n            : '';\n          \n          return `${index + 1}. ${suggestion.suggestion}\\n` +\n            `   Reasoning: ${suggestion.reasoning}\\n` +\n            `   Confidence: ${Math.round(suggestion.confidence * 100)}%${alternatives}`;\n        }).join('\\n\\n');\n        \n        return `💡 AI Suggestions for ${args.nodeType}:\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get AI suggestions: ${error.message}`);\n        }\n        throw new UserError('Failed to get AI suggestions with unknown error');\n      }\n    },\n  });\n}"],"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","ignoreList":[]}