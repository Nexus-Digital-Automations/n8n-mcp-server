3d9f92da88ba4e186567c0657129ed14
/* istanbul ignore next */
function cov_1r3rg2htdo() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/fileTypes.ts";
  var hash = "d23f86d5e3ae67189e108cc1ba2a596fcb07c704";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/fileTypes.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/fileTypes.ts",
      mappings: "AAAA,2DAA2D",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/fileTypes.ts"],
      sourcesContent: ["// File and binary data type definitions for n8n MCP server\n\nexport interface BinaryData {\n  data: string; // Base64 encoded data\n  mimeType: string;\n  fileName?: string;\n  fileSize?: number;\n  directory?: string;\n  fileExtension?: string;\n}\n\nexport interface N8nBinaryDataResponse {\n  data: string; // Base64 encoded\n  mimeType: string;\n  fileName: string;\n  fileSize: number;\n}\n\nexport interface FileUploadRequest {\n  fileName: string;\n  mimeType: string;\n  data: string; // Base64 encoded data\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n}\n\nexport interface FileDownloadRequest {\n  fileId: string;\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n}\n\nexport interface StaticFileInfo {\n  id: string;\n  fileName: string;\n  mimeType: string;\n  fileSize: number;\n  uploadedAt: string;\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n  filePath?: string;\n}\n\nexport interface FileStorageConfig {\n  baseDirectory: string;\n  maxFileSize: number; // in bytes\n  allowedMimeTypes: string[];\n  cleanupOlderThan?: number; // days\n}\n\nexport interface FileTransferProgress {\n  transferId: string;\n  fileName: string;\n  totalBytes: number;\n  transferredBytes: number;\n  percentComplete: number;\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'cancelled';\n  startedAt: string;\n  completedAt?: string;\n  error?: string;\n}\n\nexport interface FileSearchOptions {\n  fileName?: string;\n  mimeType?: string;\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n  uploadedAfter?: string;\n  uploadedBefore?: string;\n  minFileSize?: number;\n  maxFileSize?: number;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface FileOperationResult {\n  success: boolean;\n  fileId?: string;\n  fileName?: string;\n  message: string;\n  fileSize?: number;\n  transferId?: string;\n}\n\nexport interface BinaryDataPayload {\n  propertyName: string;\n  data: BinaryData;\n}\n\nexport interface WorkflowFileManifest {\n  workflowId: string;\n  workflowName: string;\n  files: StaticFileInfo[];\n  totalSize: number;\n  fileCount: number;\n  lastUpdated: string;\n}\n\nexport interface FileCleanupResult {\n  deletedFiles: number;\n  freedSpace: number; // bytes\n  errors: string[];\n}\n\nexport interface FileValidationOptions {\n  maxFileSize?: number;\n  allowedMimeTypes?: string[];\n  allowedExtensions?: string[];\n  virusScan?: boolean;\n}\n\nexport interface FileValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  detectedMimeType?: string;\n  detectedExtension?: string;\n  actualFileSize?: number;\n}\n\n// Helper types for different file operations\nexport type FileOperationType = 'upload' | 'download' | 'delete' | 'list' | 'cleanup';\n\nexport interface FileOperationLog {\n  id: string;\n  operation: FileOperationType;\n  fileName: string;\n  fileId?: string;\n  workflowId?: string;\n  executionId?: string;\n  timestamp: string;\n  success: boolean;\n  error?: string;\n  fileSize?: number;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d23f86d5e3ae67189e108cc1ba2a596fcb07c704"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1r3rg2htdo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1r3rg2htdo();
// File and binary data type definitions for n8n MCP server
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvc3JjL3R5cGVzL2ZpbGVUeXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGFuZCBiaW5hcnkgZGF0YSB0eXBlIGRlZmluaXRpb25zIGZvciBuOG4gTUNQIHNlcnZlclxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbmFyeURhdGEge1xuICBkYXRhOiBzdHJpbmc7IC8vIEJhc2U2NCBlbmNvZGVkIGRhdGFcbiAgbWltZVR5cGU6IHN0cmluZztcbiAgZmlsZU5hbWU/OiBzdHJpbmc7XG4gIGZpbGVTaXplPzogbnVtYmVyO1xuICBkaXJlY3Rvcnk/OiBzdHJpbmc7XG4gIGZpbGVFeHRlbnNpb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTjhuQmluYXJ5RGF0YVJlc3BvbnNlIHtcbiAgZGF0YTogc3RyaW5nOyAvLyBCYXNlNjQgZW5jb2RlZFxuICBtaW1lVHlwZTogc3RyaW5nO1xuICBmaWxlTmFtZTogc3RyaW5nO1xuICBmaWxlU2l6ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVVcGxvYWRSZXF1ZXN0IHtcbiAgZmlsZU5hbWU6IHN0cmluZztcbiAgbWltZVR5cGU6IHN0cmluZztcbiAgZGF0YTogc3RyaW5nOyAvLyBCYXNlNjQgZW5jb2RlZCBkYXRhXG4gIHdvcmtmbG93SWQ/OiBzdHJpbmc7XG4gIGV4ZWN1dGlvbklkPzogc3RyaW5nO1xuICBub2RlSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZURvd25sb2FkUmVxdWVzdCB7XG4gIGZpbGVJZDogc3RyaW5nO1xuICB3b3JrZmxvd0lkPzogc3RyaW5nO1xuICBleGVjdXRpb25JZD86IHN0cmluZztcbiAgbm9kZUlkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY0ZpbGVJbmZvIHtcbiAgaWQ6IHN0cmluZztcbiAgZmlsZU5hbWU6IHN0cmluZztcbiAgbWltZVR5cGU6IHN0cmluZztcbiAgZmlsZVNpemU6IG51bWJlcjtcbiAgdXBsb2FkZWRBdDogc3RyaW5nO1xuICB3b3JrZmxvd0lkPzogc3RyaW5nO1xuICBleGVjdXRpb25JZD86IHN0cmluZztcbiAgbm9kZUlkPzogc3RyaW5nO1xuICBmaWxlUGF0aD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlU3RvcmFnZUNvbmZpZyB7XG4gIGJhc2VEaXJlY3Rvcnk6IHN0cmluZztcbiAgbWF4RmlsZVNpemU6IG51bWJlcjsgLy8gaW4gYnl0ZXNcbiAgYWxsb3dlZE1pbWVUeXBlczogc3RyaW5nW107XG4gIGNsZWFudXBPbGRlclRoYW4/OiBudW1iZXI7IC8vIGRheXNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlVHJhbnNmZXJQcm9ncmVzcyB7XG4gIHRyYW5zZmVySWQ6IHN0cmluZztcbiAgZmlsZU5hbWU6IHN0cmluZztcbiAgdG90YWxCeXRlczogbnVtYmVyO1xuICB0cmFuc2ZlcnJlZEJ5dGVzOiBudW1iZXI7XG4gIHBlcmNlbnRDb21wbGV0ZTogbnVtYmVyO1xuICBzdGF0dXM6ICdwZW5kaW5nJyB8ICdpbi1wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdmYWlsZWQnIHwgJ2NhbmNlbGxlZCc7XG4gIHN0YXJ0ZWRBdDogc3RyaW5nO1xuICBjb21wbGV0ZWRBdD86IHN0cmluZztcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaE9wdGlvbnMge1xuICBmaWxlTmFtZT86IHN0cmluZztcbiAgbWltZVR5cGU/OiBzdHJpbmc7XG4gIHdvcmtmbG93SWQ/OiBzdHJpbmc7XG4gIGV4ZWN1dGlvbklkPzogc3RyaW5nO1xuICBub2RlSWQ/OiBzdHJpbmc7XG4gIHVwbG9hZGVkQWZ0ZXI/OiBzdHJpbmc7XG4gIHVwbG9hZGVkQmVmb3JlPzogc3RyaW5nO1xuICBtaW5GaWxlU2l6ZT86IG51bWJlcjtcbiAgbWF4RmlsZVNpemU/OiBudW1iZXI7XG4gIGxpbWl0PzogbnVtYmVyO1xuICBvZmZzZXQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZU9wZXJhdGlvblJlc3VsdCB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGZpbGVJZD86IHN0cmluZztcbiAgZmlsZU5hbWU/OiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgZmlsZVNpemU/OiBudW1iZXI7XG4gIHRyYW5zZmVySWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmluYXJ5RGF0YVBheWxvYWQge1xuICBwcm9wZXJ0eU5hbWU6IHN0cmluZztcbiAgZGF0YTogQmluYXJ5RGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXb3JrZmxvd0ZpbGVNYW5pZmVzdCB7XG4gIHdvcmtmbG93SWQ6IHN0cmluZztcbiAgd29ya2Zsb3dOYW1lOiBzdHJpbmc7XG4gIGZpbGVzOiBTdGF0aWNGaWxlSW5mb1tdO1xuICB0b3RhbFNpemU6IG51bWJlcjtcbiAgZmlsZUNvdW50OiBudW1iZXI7XG4gIGxhc3RVcGRhdGVkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUNsZWFudXBSZXN1bHQge1xuICBkZWxldGVkRmlsZXM6IG51bWJlcjtcbiAgZnJlZWRTcGFjZTogbnVtYmVyOyAvLyBieXRlc1xuICBlcnJvcnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVWYWxpZGF0aW9uT3B0aW9ucyB7XG4gIG1heEZpbGVTaXplPzogbnVtYmVyO1xuICBhbGxvd2VkTWltZVR5cGVzPzogc3RyaW5nW107XG4gIGFsbG93ZWRFeHRlbnNpb25zPzogc3RyaW5nW107XG4gIHZpcnVzU2Nhbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVZhbGlkYXRpb25SZXN1bHQge1xuICBpc1ZhbGlkOiBib29sZWFuO1xuICBlcnJvcnM6IHN0cmluZ1tdO1xuICB3YXJuaW5nczogc3RyaW5nW107XG4gIGRldGVjdGVkTWltZVR5cGU/OiBzdHJpbmc7XG4gIGRldGVjdGVkRXh0ZW5zaW9uPzogc3RyaW5nO1xuICBhY3R1YWxGaWxlU2l6ZT86IG51bWJlcjtcbn1cblxuLy8gSGVscGVyIHR5cGVzIGZvciBkaWZmZXJlbnQgZmlsZSBvcGVyYXRpb25zXG5leHBvcnQgdHlwZSBGaWxlT3BlcmF0aW9uVHlwZSA9ICd1cGxvYWQnIHwgJ2Rvd25sb2FkJyB8ICdkZWxldGUnIHwgJ2xpc3QnIHwgJ2NsZWFudXAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVPcGVyYXRpb25Mb2cge1xuICBpZDogc3RyaW5nO1xuICBvcGVyYXRpb246IEZpbGVPcGVyYXRpb25UeXBlO1xuICBmaWxlTmFtZTogc3RyaW5nO1xuICBmaWxlSWQ/OiBzdHJpbmc7XG4gIHdvcmtmbG93SWQ/OiBzdHJpbmc7XG4gIGV4ZWN1dGlvbklkPzogc3RyaW5nO1xuICB0aW1lc3RhbXA6IHN0cmluZztcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgZXJyb3I/OiBzdHJpbmc7XG4gIGZpbGVTaXplPzogbnVtYmVyO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEiLCJpZ25vcmVMaXN0IjpbXX0=