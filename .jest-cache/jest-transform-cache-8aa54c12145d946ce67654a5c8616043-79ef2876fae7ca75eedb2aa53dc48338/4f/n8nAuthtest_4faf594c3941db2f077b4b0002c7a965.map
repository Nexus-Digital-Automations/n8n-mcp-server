{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/auth/n8nAuth.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/auth/n8nAuth.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { N8nAuthProvider, createN8nAuth, defaultN8nAuth } from '../../../src/auth/n8nAuth';\nimport { RequestContext } from '../../../src/auth/authProvider';\n\n// Simple test focused on coverage of N8nAuthProvider without complex mocking\n// This avoids the N8nClient import issues by focusing on the simpler methods\ndescribe('N8nAuthProvider Simple Tests', () => {\n  let authProvider: N8nAuthProvider;\n\n  beforeEach(() => {\n    authProvider = new N8nAuthProvider({\n      required: false,\n      defaultBaseUrl: 'https://test.n8n.io',\n      defaultApiKey: 'test-api-key',\n      validateConnection: false, // Skip connection validation to avoid N8nClient\n      cacheDuration: 5 * 60 * 1000,\n      defaultRoles: ['member'],\n    });\n  });\n\n  afterEach(() => {\n    authProvider.clearCache();\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default configuration', () => {\n      const provider = new N8nAuthProvider();\n      expect(provider).toBeInstanceOf(N8nAuthProvider);\n    });\n\n    it('should initialize with custom configuration', () => {\n      const config = {\n        required: true,\n        defaultBaseUrl: 'https://custom.n8n.io',\n        defaultApiKey: 'custom-api-key',\n        validateConnection: false,\n        cacheDuration: 10 * 60 * 1000,\n        defaultRoles: ['admin'],\n      };\n\n      const provider = new N8nAuthProvider(config);\n      expect(provider).toBeInstanceOf(N8nAuthProvider);\n    });\n  });\n\n  describe('anonymous authentication', () => {\n    it('should allow anonymous access when authentication not required', async () => {\n      const provider = new N8nAuthProvider({ required: false });\n      const context: RequestContext = {\n        clientId: 'test-client',\n        headers: {},\n      };\n\n      const result = await provider.authenticate(context);\n\n      expect(result.success).toBe(true);\n      expect(result.user).toBeDefined();\n      expect(result.user?.id).toBe('anonymous');\n      expect(result.user?.roles).toEqual(['anonymous']);\n      expect(result.context?.authType).toBe('anonymous');\n      expect(result.user?.permissions.community).toBe(true);\n      expect(result.user?.permissions.workflows).toBe(true);\n      expect(result.user?.permissions.executions).toBe(true);\n      expect(result.user?.permissions.enterprise).toBe(false);\n      expect(result.user?.permissions.credentials).toBe(false);\n      expect(result.user?.permissions.users).toBe(false);\n      expect(result.user?.permissions.audit).toBe(false);\n    });\n\n    it('should include context information for anonymous users', async () => {\n      const provider = new N8nAuthProvider({ required: false });\n      const context: RequestContext = {};\n\n      const result = await provider.authenticate(context);\n\n      expect(result.success).toBe(true);\n      expect(result.context?.authType).toBe('anonymous');\n      expect(result.context?.features).toEqual(['community']);\n    });\n  });\n\n  describe('required authentication without validation', () => {\n    it('should require credentials when authentication is required', async () => {\n      const provider = new N8nAuthProvider({ required: true });\n      const context: RequestContext = {\n        clientId: 'test-client',\n        headers: {},\n      };\n\n      const result = await provider.authenticate(context);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Authentication required but no credentials provided');\n    });\n\n    it('should accept credentials when provided and validation is disabled', async () => {\n      const provider = new N8nAuthProvider({\n        required: true,\n        validateConnection: false,\n        defaultBaseUrl: 'https://test.n8n.io',\n        defaultRoles: ['member'],\n      });\n      const context: RequestContext = {\n        clientId: 'test-client',\n        headers: {\n          'x-n8n-api-key': 'valid-api-key',\n        },\n      };\n\n      const result = await provider.authenticate(context);\n\n      expect(result.success).toBe(true);\n      expect(result.user?.n8nApiKey).toBe('valid-api-key');\n      expect(result.user?.n8nBaseUrl).toBe('https://test.n8n.io');\n      expect(result.context?.authType).toBe('n8n-api-key');\n    });\n\n    it('should handle Bearer token authentication', async () => {\n      const provider = new N8nAuthProvider({\n        required: true,\n        validateConnection: false,\n        defaultBaseUrl: 'https://default.n8n.io',\n        defaultRoles: ['member'],\n      });\n      const context: RequestContext = {\n        clientId: 'test-client',\n        headers: {\n          authorization: 'Bearer valid-bearer-token',\n        },\n      };\n\n      const result = await provider.authenticate(context);\n\n      expect(result.success).toBe(true);\n      expect(result.user?.n8nApiKey).toBe('valid-bearer-token');\n      expect(result.user?.n8nBaseUrl).toBe('https://default.n8n.io');\n    });\n  });\n\n  describe('cache management', () => {\n    it('should clear cache', () => {\n      const provider = new N8nAuthProvider();\n      provider.clearCache();\n\n      const stats = provider.getCacheStats();\n      expect(stats.size).toBe(0);\n      expect(stats.entries).toBe(0);\n    });\n\n    it('should provide cache statistics', () => {\n      const provider = new N8nAuthProvider();\n      const stats = provider.getCacheStats();\n\n      expect(typeof stats.size).toBe('number');\n      expect(typeof stats.entries).toBe('number');\n    });\n\n    it('should clean up expired cache entries', () => {\n      const provider = new N8nAuthProvider({ cacheDuration: -1 }); // Expired immediately\n      \n      // Manually add expired cache entry to test cleanup\n      const cache = (provider as any).authCache;\n      cache.set('test-key', {\n        result: { success: true, user: { id: 'test' } },\n        expires: Date.now() - 1000 // Expired 1 second ago\n      });\n\n      // This should trigger cleanup of expired entries\n      const stats = provider.getCacheStats();\n      expect(stats.entries).toBe(0); // Expired entry should be cleaned up\n    });\n\n    it('should handle cache with zero duration', async () => {\n      const provider = new N8nAuthProvider({ \n        required: true,\n        validateConnection: false,\n        cacheDuration: 0, // No caching\n        defaultBaseUrl: 'https://test.n8n.io',\n        defaultRoles: ['member'],\n      });\n      \n      const context: RequestContext = {\n        headers: {\n          'x-n8n-api-key': 'valid-api-key',\n        },\n      };\n\n      const result = await provider.authenticate(context);\n      expect(result.success).toBe(true);\n\n      // With zero cache duration, nothing should be cached\n      const stats = provider.getCacheStats();\n      expect(stats.entries).toBe(0); \n    });\n  });\n\n  describe('refresh authentication', () => {\n    it('should refresh authentication by clearing cache', async () => {\n      const provider = new N8nAuthProvider({\n        required: false,\n        cacheDuration: 60000,\n      });\n\n      const context: RequestContext = {\n        clientId: 'test-client',\n        headers: {},\n      };\n\n      // First authenticate\n      const result1 = await provider.authenticate(context);\n      expect(result1.success).toBe(true);\n\n      // Refresh should work\n      const result2 = await provider.refresh(context);\n      expect(result2.success).toBe(true);\n      expect(result2.user?.id).toBe('anonymous');\n    });\n\n    it('should refresh authentication with user context and clear specific cache', async () => {\n      const provider = new N8nAuthProvider({\n        required: true,\n        validateConnection: false,\n        cacheDuration: 60000,\n        defaultBaseUrl: 'https://test.n8n.io',\n        defaultApiKey: 'test-key',\n      });\n\n      const user = {\n        id: 'test-user',\n        name: 'Test User',\n        roles: ['member'],\n        permissions: {\n          community: true,\n          enterprise: false,\n          workflows: true,\n          executions: true,\n          credentials: false,\n          users: false,\n          audit: false,\n        },\n        n8nBaseUrl: 'https://test.n8n.io',\n        n8nApiKey: 'test-key',\n      };\n\n      const context: RequestContext = {\n        user,\n        headers: {},\n      };\n\n      // Refresh with user context should clear cache for that user\n      const result = await provider.refresh(context);\n      expect(result.success).toBe(false); // No credentials in headers, should fail\n      expect(result.error).toBe('Authentication required but no credentials provided');\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle authentication errors gracefully', async () => {\n      const provider = new N8nAuthProvider({ required: true });\n      \n      // Mock the extractCredentials method to throw an error\n      jest.spyOn(provider as any, 'extractCredentials').mockImplementation(() => {\n        throw new Error('Credential extraction failed');\n      });\n\n      const context: RequestContext = {\n        headers: {\n          'x-n8n-api-key': 'test-key',\n        },\n      };\n\n      const result = await provider.authenticate(context);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Authentication failed: Credential extraction failed');\n    });\n\n    it('should handle non-Error objects in catch blocks', async () => {\n      const provider = new N8nAuthProvider({ required: true });\n      \n      // Mock to throw a non-Error object\n      jest.spyOn(provider as any, 'extractCredentials').mockImplementation(() => {\n        throw 'String error'; // Non-Error object\n      });\n\n      const context: RequestContext = {\n        headers: {\n          'x-n8n-api-key': 'test-key',\n        },\n      };\n\n      const result = await provider.authenticate(context);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Authentication failed: String error');\n    });\n  });\n});\n\ndescribe('createN8nAuth', () => {\n  let originalEnv: typeof process.env;\n\n  beforeEach(() => {\n    originalEnv = { ...process.env };\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n  });\n\n  it('should create N8nAuthProvider instance', () => {\n    const provider = createN8nAuth();\n    expect(provider).toBeInstanceOf(N8nAuthProvider);\n  });\n\n  it('should handle environment variables', () => {\n    process.env.N8N_MCP_AUTH_REQUIRED = 'true';\n    process.env.N8N_BASE_URL = 'https://env.n8n.io';\n    process.env.N8N_API_KEY = 'env-api-key';\n\n    const provider = createN8nAuth();\n    expect(provider).toBeInstanceOf(N8nAuthProvider);\n  });\n});\n\ndescribe('defaultN8nAuth', () => {\n  it('should be an instance of N8nAuthProvider', () => {\n    expect(defaultN8nAuth).toBeInstanceOf(N8nAuthProvider);\n  });\n\n  it('should be a singleton instance', async () => {\n    // Import again to test singleton behavior\n    const module = await import('../../../src/auth/n8nAuth');\n    const secondInstance = module.defaultN8nAuth;\n    expect(defaultN8nAuth).toBe(secondInstance);\n  });\n});\n"],"version":3}