333b1da5e459c39815b0afbe3454a981
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserTools = createUserTools;
const zod_1 = require("zod");
const fastmcp_1 = require("fastmcp");
// Zod schemas for validation
const UserIdSchema = zod_1.z.object({
    userId: zod_1.z.string().min(1, 'User ID is required'),
});
const ListUsersSchema = zod_1.z.object({
    limit: zod_1.z.number().min(1).max(100).optional(),
    cursor: zod_1.z.string().optional(),
});
const CreateUserSchema = zod_1.z.object({
    email: zod_1.z.string().email('Valid email address is required'),
    firstName: zod_1.z.string().min(1, 'First name is required'),
    lastName: zod_1.z.string().min(1, 'Last name is required'),
    password: zod_1.z.string().min(8, 'Password must be at least 8 characters'),
    role: zod_1.z.enum(['admin', 'member', 'owner']).optional().default('member'),
});
const UpdateUserSchema = zod_1.z.object({
    userId: zod_1.z.string().min(1, 'User ID is required'),
    email: zod_1.z.string().email().optional(),
    firstName: zod_1.z.string().min(1).optional(),
    lastName: zod_1.z.string().min(1).optional(),
    role: zod_1.z.enum(['admin', 'member', 'owner']).optional(),
    disabled: zod_1.z.boolean().optional(),
});
// Tool registration function
function createUserTools(getClient, server) {
    // List users tool
    server.addTool({
        name: 'list-users',
        description: 'List all users in the n8n instance with pagination support',
        parameters: ListUsersSchema,
        annotations: {
            title: 'List n8n Users',
            readOnlyHint: true,
            destructiveHint: false,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const options = {};
                if (args.limit)
                    options.limit = args.limit;
                if (args.cursor)
                    options.cursor = args.cursor;
                const response = await client.getUsers(options);
                if (response.data.length === 0) {
                    return 'No users found in the n8n instance.';
                }
                let result = `Found ${response.data.length} user(s):\n\n`;
                response.data.forEach((user, index) => {
                    result += `${index + 1}. **${user.firstName} ${user.lastName}**\n`;
                    result += `   - ID: ${user.id}\n`;
                    result += `   - Email: ${user.email}\n`;
                    result += `   - Role: ${user.role}\n`;
                    result += `   - Status: ${user.disabled ? 'ðŸ”´ Disabled' : 'ðŸŸ¢ Active'}\n`;
                    if (user.createdAt) {
                        result += `   - Created: ${new Date(user.createdAt).toLocaleDateString()}\n`;
                    }
                    if (user.lastSeenAt) {
                        result += `   - Last Seen: ${new Date(user.lastSeenAt).toLocaleDateString()}\n`;
                    }
                    result += '\n';
                });
                if (response.nextCursor) {
                    result += `\nðŸ“„ Use cursor "${response.nextCursor}" to get the next page.`;
                }
                return result;
            }
            catch (error) {
                if (error instanceof Error) {
                    throw new fastmcp_1.UserError(`Failed to list users: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to list users with unknown error');
            }
        },
    });
    // Get user tool
    server.addTool({
        name: 'get-user',
        description: 'Get detailed information about a specific user by ID',
        parameters: UserIdSchema,
        annotations: {
            title: 'Get User Details',
            readOnlyHint: true,
            destructiveHint: false,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const user = await client.getUser(args.userId);
                let result = `# User: ${user.firstName} ${user.lastName}\n\n`;
                result += `**ID:** ${user.id}\n`;
                result += `**Email:** ${user.email}\n`;
                result += `**Role:** ${user.role}\n`;
                result += `**Status:** ${user.disabled ? 'ðŸ”´ Disabled' : 'ðŸŸ¢ Active'}\n`;
                if (user.createdAt) {
                    result += `**Created:** ${new Date(user.createdAt).toLocaleString()}\n`;
                }
                if (user.updatedAt) {
                    result += `**Updated:** ${new Date(user.updatedAt).toLocaleString()}\n`;
                }
                if (user.lastSeenAt) {
                    result += `**Last Seen:** ${new Date(user.lastSeenAt).toLocaleString()}\n`;
                }
                return result;
            }
            catch (error) {
                if (error instanceof Error) {
                    throw new fastmcp_1.UserError(`Failed to get user: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to get user with unknown error');
            }
        },
    });
    // Create user tool
    server.addTool({
        name: 'create-user',
        description: 'Create a new user in n8n with email, name, password, and role',
        parameters: CreateUserSchema,
        annotations: {
            title: 'Create New User',
            readOnlyHint: false,
            destructiveHint: false,
            idempotentHint: false,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const userData = {
                    email: args.email,
                    firstName: args.firstName,
                    lastName: args.lastName,
                    password: args.password,
                    role: args.role,
                };
                const user = await client.createUser(userData);
                return (`âœ… Successfully created user "${user.firstName} ${user.lastName}" with ID: ${user.id}\n` +
                    `Email: ${user.email}\n` +
                    `Role: ${user.role}`);
            }
            catch (error) {
                if (error instanceof Error) {
                    throw new fastmcp_1.UserError(`Failed to create user: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to create user with unknown error');
            }
        },
    });
    // Update user tool
    server.addTool({
        name: 'update-user',
        description: "Update a user's information including email, name, role, or status",
        parameters: UpdateUserSchema,
        annotations: {
            title: 'Update User',
            readOnlyHint: false,
            destructiveHint: false,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const { userId, ...updateData } = args;
                const userData = updateData;
                const user = await client.updateUser(userId, userData);
                return (`âœ… Successfully updated user "${user.firstName} ${user.lastName}" (ID: ${user.id})\n` +
                    `Email: ${user.email}\n` +
                    `Role: ${user.role}\n` +
                    `Status: ${user.disabled ? 'ðŸ”´ Disabled' : 'ðŸŸ¢ Active'}`);
            }
            catch (error) {
                if (error instanceof Error) {
                    throw new fastmcp_1.UserError(`Failed to update user: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to update user with unknown error');
            }
        },
    });
    // Delete user tool
    server.addTool({
        name: 'delete-user',
        description: 'Delete a user from n8n permanently. WARNING: This action cannot be undone',
        parameters: UserIdSchema,
        annotations: {
            title: 'Delete User',
            readOnlyHint: false,
            destructiveHint: true,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                await client.deleteUser(args.userId);
                return `âœ… Successfully deleted user with ID: ${args.userId}`;
            }
            catch (error) {
                if (error instanceof Error) {
                    throw new fastmcp_1.UserError(`Failed to delete user: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to delete user with unknown error');
            }
        },
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,