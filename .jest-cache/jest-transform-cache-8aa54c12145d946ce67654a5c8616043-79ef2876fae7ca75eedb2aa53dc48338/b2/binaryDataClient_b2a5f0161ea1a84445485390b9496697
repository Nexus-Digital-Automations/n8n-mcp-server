455afed5c15db3d52c91d5efc5691347
/* istanbul ignore next */
function cov_6v997b7f3() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/binaryDataClient.ts";
  var hash = "32c3c7936f6a63c10a90bf7bbc2957aabbc0580b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/binaryDataClient.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 29
        }
      },
      "1": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 31
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 29
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "4": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 55
        }
      },
      "5": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "7": {
        start: {
          line: 21,
          column: 29
        },
        end: {
          line: 24,
          column: 14
        }
      },
      "8": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "9": {
        start: {
          line: 26,
          column: 34
        },
        end: {
          line: 26,
          column: 55
        }
      },
      "10": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 73
        }
      },
      "11": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 74
        }
      },
      "12": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "13": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 47
        }
      },
      "14": {
        start: {
          line: 34,
          column: 17
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "15": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 49
        }
      },
      "16": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 47
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "18": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 68
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 65
        }
      },
      "20": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 55
        }
      },
      "21": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "22": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "23": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 62,
          column: 14
        }
      },
      "24": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "25": {
        start: {
          line: 64,
          column: 34
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "26": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 73
        }
      },
      "27": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 67,
          column: 74
        }
      },
      "28": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "29": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 47
        }
      },
      "30": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 47
        }
      },
      "31": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "32": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 78
        }
      },
      "33": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 75
        }
      },
      "34": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 58
        }
      },
      "35": {
        start: {
          line: 89,
          column: 25
        },
        end: {
          line: 89,
          column: 60
        }
      },
      "36": {
        start: {
          line: 90,
          column: 21
        },
        end: {
          line: 90,
          column: 35
        }
      },
      "37": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "38": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 96,
          column: 58
        }
      },
      "39": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 58
        }
      },
      "40": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 98,
          column: 60
        }
      },
      "41": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 60
        }
      },
      "42": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 100,
          column: 50
        }
      },
      "43": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 50
        }
      },
      "44": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 69
        }
      },
      "45": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 49
        }
      },
      "46": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 109,
          column: 65
        }
      },
      "47": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 65
        }
      },
      "48": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 111,
          column: 67
        }
      },
      "49": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 67
        }
      },
      "50": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 113,
          column: 57
        }
      },
      "51": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 57
        }
      },
      "52": {
        start: {
          line: 114,
          column: 22
        },
        end: {
          line: 114,
          column: 44
        }
      },
      "53": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 115,
          column: 104
        }
      },
      "54": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 42
        }
      },
      "55": {
        start: {
          line: 122,
          column: 25
        },
        end: {
          line: 122,
          column: 85
        }
      },
      "56": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 128,
          column: 10
        }
      },
      "57": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 73
        }
      },
      "58": {
        start: {
          line: 135,
          column: 25
        },
        end: {
          line: 135,
          column: 60
        }
      },
      "59": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 136,
          column: 35
        }
      },
      "60": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "61": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 46
        }
      },
      "62": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 38
        }
      },
      "63": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 50
        }
      },
      "64": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 79
        }
      },
      "65": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "66": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 158,
          column: 49
        }
      },
      "67": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "68": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "69": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 162,
          column: 67
        }
      },
      "70": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 67
        }
      },
      "71": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 164,
          column: 57
        }
      },
      "72": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 57
        }
      },
      "73": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 166,
          column: 66
        }
      },
      "74": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 66
        }
      },
      "75": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 168,
          column: 68
        }
      },
      "76": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 68
        }
      },
      "77": {
        start: {
          line: 169,
          column: 22
        },
        end: {
          line: 169,
          column: 44
        }
      },
      "78": {
        start: {
          line: 170,
          column: 25
        },
        end: {
          line: 170,
          column: 66
        }
      },
      "79": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 42
        }
      },
      "80": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 87
        }
      },
      "81": {
        start: {
          line: 183,
          column: 26
        },
        end: {
          line: 183,
          column: 58
        }
      },
      "82": {
        start: {
          line: 184,
          column: 26
        },
        end: {
          line: 184,
          column: 37
        }
      },
      "83": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 185,
          column: 92
        }
      },
      "84": {
        start: {
          line: 187,
          column: 25
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "85": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "86": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 44
        }
      },
      "87": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 43
        }
      },
      "88": {
        start: {
          line: 200,
          column: 29
        },
        end: {
          line: 200,
          column: 64
        }
      },
      "89": {
        start: {
          line: 201,
          column: 25
        },
        end: {
          line: 201,
          column: 39
        }
      },
      "90": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "91": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 207,
          column: 62
        }
      },
      "92": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 62
        }
      },
      "93": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 209,
          column: 64
        }
      },
      "94": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 64
        }
      },
      "95": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 211,
          column: 54
        }
      },
      "96": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 54
        }
      },
      "97": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 50
        }
      },
      "98": {
        start: {
          line: 213,
          column: 27
        },
        end: {
          line: 213,
          column: 86
        }
      },
      "99": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 42
        }
      },
      "100": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 50
        }
      },
      "101": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 43
        }
      },
      "102": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 60
        }
      },
      "103": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 43
        }
      },
      "104": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 26
        }
      },
      "105": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 39
        }
      },
      "106": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 86
        }
      },
      "107": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 60
        }
      },
      "108": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 43
        }
      },
      "109": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 41
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 46
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 64
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 36
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 85
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 38
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 106
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 109
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 121
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 104
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 134
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 35
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 149
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 39
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 157
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 40
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 176
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 66
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 182
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 13,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 42
          },
          end: {
            line: 13,
            column: 44
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 31
          }
        }, {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 37
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 32
          },
          end: {
            line: 30,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 32
          },
          end: {
            line: 30,
            column: 68
          }
        }, {
          start: {
            line: 30,
            column: 72
          },
          end: {
            line: 30,
            column: 74
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 40,
            column: 13
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: 38,
            column: 17
          },
          end: {
            line: 40,
            column: 13
          }
        }],
        line: 34
      },
      "6": {
        loc: {
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 69
          }
        }, {
          start: {
            line: 34,
            column: 73
          },
          end: {
            line: 34,
            column: 105
          }
        }, {
          start: {
            line: 34,
            column: 109
          },
          end: {
            line: 34,
            column: 141
          }
        }],
        line: 34
      },
      "7": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "8": {
        loc: {
          start: {
            line: 49,
            column: 50
          },
          end: {
            line: 49,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 49,
            column: 60
          },
          end: {
            line: 49,
            column: 62
          }
        }],
        line: 49
      },
      "9": {
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 31
          }
        }, {
          start: {
            line: 53,
            column: 35
          },
          end: {
            line: 53,
            column: 37
          }
        }],
        line: 53
      },
      "10": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "11": {
        loc: {
          start: {
            line: 67,
            column: 32
          },
          end: {
            line: 67,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 32
          },
          end: {
            line: 67,
            column: 68
          }
        }, {
          start: {
            line: 67,
            column: 72
          },
          end: {
            line: 67,
            column: 74
          }
        }],
        line: 67
      },
      "12": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: 71,
            column: 17
          },
          end: {
            line: 73,
            column: 13
          }
        }],
        line: 68
      },
      "13": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "14": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 96,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 96,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "15": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 98,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 98,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "16": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 100,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 100,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "17": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 109,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 109,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "18": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 111,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 111,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "19": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 113,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 113,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "20": {
        loc: {
          start: {
            line: 115,
            column: 78
          },
          end: {
            line: 115,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 86
          },
          end: {
            line: 115,
            column: 97
          }
        }, {
          start: {
            line: 115,
            column: 100
          },
          end: {
            line: 115,
            column: 102
          }
        }],
        line: 115
      },
      "21": {
        loc: {
          start: {
            line: 121,
            column: 54
          },
          end: {
            line: 121,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 121,
            column: 68
          },
          end: {
            line: 121,
            column: 69
          }
        }],
        line: 121
      },
      "22": {
        loc: {
          start: {
            line: 121,
            column: 71
          },
          end: {
            line: 121,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 121,
            column: 83
          },
          end: {
            line: 121,
            column: 84
          }
        }],
        line: 121
      },
      "23": {
        loc: {
          start: {
            line: 121,
            column: 86
          },
          end: {
            line: 121,
            column: 107
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 121,
            column: 101
          },
          end: {
            line: 121,
            column: 107
          }
        }],
        line: 121
      },
      "24": {
        loc: {
          start: {
            line: 134,
            column: 81
          },
          end: {
            line: 134,
            column: 102
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 134,
            column: 96
          },
          end: {
            line: 134,
            column: 102
          }
        }],
        line: 134
      },
      "25": {
        loc: {
          start: {
            line: 157,
            column: 25
          },
          end: {
            line: 157,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 157,
            column: 35
          },
          end: {
            line: 157,
            column: 37
          }
        }],
        line: 157
      },
      "26": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 160,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 160,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "27": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 162,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 162,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "28": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 164,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 164,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "29": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 166,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 166,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "30": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 168,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 168,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "31": {
        loc: {
          start: {
            line: 170,
            column: 40
          },
          end: {
            line: 170,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 48
          },
          end: {
            line: 170,
            column: 59
          }
        }, {
          start: {
            line: 170,
            column: 62
          },
          end: {
            line: 170,
            column: 64
          }
        }],
        line: 170
      },
      "32": {
        loc: {
          start: {
            line: 182,
            column: 52
          },
          end: {
            line: 182,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 182,
            column: 62
          },
          end: {
            line: 182,
            column: 64
          }
        }],
        line: 182
      },
      "33": {
        loc: {
          start: {
            line: 183,
            column: 26
          },
          end: {
            line: 183,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 26
          },
          end: {
            line: 183,
            column: 43
          }
        }, {
          start: {
            line: 183,
            column: 47
          },
          end: {
            line: 183,
            column: 58
          }
        }],
        line: 183
      },
      "34": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 207,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 207,
            column: 62
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "35": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 209,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 209,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "36": {
        loc: {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 211,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 211,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "37": {
        loc: {
          start: {
            line: 223,
            column: 29
          },
          end: {
            line: 223,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 54
          },
          end: {
            line: 223,
            column: 67
          }
        }, {
          start: {
            line: 223,
            column: 70
          },
          end: {
            line: 223,
            column: 85
          }
        }],
        line: 223
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0],
      "23": [0],
      "24": [0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/binaryDataClient.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/binaryDataClient.ts"],
      sourcesContent: ["import fetch from 'node-fetch';\nimport { N8nClient } from './n8nClient.js';\nimport {\n  BinaryData,\n  N8nBinaryDataResponse,\n  FileUploadRequest,\n  FileDownloadRequest,\n  StaticFileInfo,\n  FileTransferProgress,\n} from '../types/fileTypes.js';\n\nexport class BinaryDataClient {\n  constructor(private client: N8nClient, private baseUrl: string, private apiKey: string) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n  }\n\n  private async makeRequest<T>(\n    endpoint: string,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      'Content-Type': 'application/json',\n      ...((options.headers as Record<string, string>) || {}),\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      // Handle different response types\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else if (contentType.includes('application/octet-stream') || contentType.startsWith('image/') || contentType.startsWith('video/')) {\n        // Return buffer for binary data\n        return (await response.buffer()) as unknown as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Request failed: ${error.message}`);\n      }\n      throw new Error('Request failed with unknown error');\n    }\n  }\n\n  private async makeFormDataRequest<T>(\n    endpoint: string,\n    formData: any,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      ...((options.headers as Record<string, string>) || {}),\n      // Note: Don't set Content-Type for FormData - let fetch set it with boundary\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        ...options,\n        headers,\n        body: formData,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Form data request failed: ${error.message}`);\n      }\n      throw new Error('Form data request failed with unknown error');\n    }\n  }\n\n  /**\n   * Upload binary data to n8n\n   */\n  async uploadBinaryData(request: FileUploadRequest): Promise<StaticFileInfo> {\n    // Convert base64 to Buffer\n    const buffer = Buffer.from(request.data, 'base64');\n    \n    // Create FormData for multipart upload\n    const FormData = (await import('form-data')).default;\n    const form = new FormData();\n    \n    form.append('file', buffer, {\n      filename: request.fileName,\n      contentType: request.mimeType,\n    });\n    \n    if (request.workflowId) form.append('workflowId', request.workflowId);\n    if (request.executionId) form.append('executionId', request.executionId);\n    if (request.nodeId) form.append('nodeId', request.nodeId);\n\n    return this.makeFormDataRequest<StaticFileInfo>('/binary-data/upload', form);\n  }\n\n  /**\n   * Download binary data from n8n\n   */\n  async downloadBinaryData(request: FileDownloadRequest): Promise<N8nBinaryDataResponse> {\n    const queryParams = new URLSearchParams();\n    if (request.workflowId) queryParams.append('workflowId', request.workflowId);\n    if (request.executionId) queryParams.append('executionId', request.executionId);\n    if (request.nodeId) queryParams.append('nodeId', request.nodeId);\n    \n    const query = queryParams.toString();\n    const endpoint = `/binary-data/${encodeURIComponent(request.fileId)}${query ? `?${query}` : ''}`;\n    \n    return this.makeRequest<N8nBinaryDataResponse>(endpoint);\n  }\n\n  /**\n   * Get binary data from execution output\n   */\n  async getExecutionBinaryData(\n    executionId: string, \n    nodeId: string, \n    outputIndex: number = 0, \n    itemIndex: number = 0,\n    propertyName: string = 'data'\n  ): Promise<Buffer> {\n    const endpoint = `/executions/${encodeURIComponent(executionId)}/binary-data`;\n    const queryParams = new URLSearchParams({\n      nodeId,\n      outputIndex: outputIndex.toString(),\n      itemIndex: itemIndex.toString(),\n      propertyName,\n    });\n    \n    return this.makeRequest<Buffer>(`${endpoint}?${queryParams.toString()}`);\n  }\n\n  /**\n   * Upload binary data for workflow input\n   */\n  async uploadWorkflowBinaryData(\n    workflowId: string,\n    nodeId: string,\n    data: Buffer,\n    fileName: string,\n    mimeType: string,\n    propertyName: string = 'data'\n  ): Promise<StaticFileInfo> {\n    const FormData = (await import('form-data')).default;\n    const form = new FormData();\n    \n    form.append('file', data, {\n      filename: fileName,\n      contentType: mimeType,\n    });\n    form.append('workflowId', workflowId);\n    form.append('nodeId', nodeId);\n    form.append('propertyName', propertyName);\n\n    return this.makeFormDataRequest<StaticFileInfo>('/workflows/binary-data/upload', form);\n  }\n\n  /**\n   * Delete binary data\n   */\n  async deleteBinaryData(fileId: string): Promise<{ success: boolean; message: string }> {\n    return this.makeRequest<{ success: boolean; message: string }>(`/binary-data/${encodeURIComponent(fileId)}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * List binary data files\n   */\n  async listBinaryData(options: {\n    workflowId?: string;\n    executionId?: string;\n    nodeId?: string;\n    limit?: number;\n    offset?: number;\n  } = {}): Promise<StaticFileInfo[]> {\n    const queryParams = new URLSearchParams();\n    \n    if (options.workflowId) queryParams.append('workflowId', options.workflowId);\n    if (options.executionId) queryParams.append('executionId', options.executionId);\n    if (options.nodeId) queryParams.append('nodeId', options.nodeId);\n    if (options.limit) queryParams.append('limit', options.limit.toString());\n    if (options.offset) queryParams.append('offset', options.offset.toString());\n    \n    const query = queryParams.toString();\n    const endpoint = `/binary-data${query ? `?${query}` : ''}`;\n    \n    return this.makeRequest<StaticFileInfo[]>(endpoint);\n  }\n\n  /**\n   * Get binary data metadata\n   */\n  async getBinaryDataMetadata(fileId: string): Promise<StaticFileInfo> {\n    return this.makeRequest<StaticFileInfo>(`/binary-data/${encodeURIComponent(fileId)}/metadata`);\n  }\n\n  /**\n   * Stream large file upload with progress tracking\n   */\n  async uploadLargeFile(\n    data: Buffer,\n    fileName: string,\n    mimeType: string,\n    options: {\n      workflowId?: string;\n      executionId?: string;\n      nodeId?: string;\n      chunkSize?: number;\n      onProgress?: (progress: FileTransferProgress) => void;\n    } = {}\n  ): Promise<StaticFileInfo> {\n    const chunkSize = options.chunkSize || 1024 * 1024; // 1MB chunks\n    const totalSize = data.length;\n    const transferId = `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Initialize progress tracking\n    const progress: FileTransferProgress = {\n      transferId,\n      fileName,\n      totalBytes: totalSize,\n      transferredBytes: 0,\n      percentComplete: 0,\n      status: 'pending',\n      startedAt: new Date().toISOString(),\n    };\n\n    try {\n      progress.status = 'in-progress';\n      options.onProgress?.(progress);\n\n      // For now, upload as single chunk (can be enhanced for true chunked upload)\n      const FormData = (await import('form-data')).default;\n      const form = new FormData();\n      \n      form.append('file', data, {\n        filename: fileName,\n        contentType: mimeType,\n      });\n      \n      if (options.workflowId) form.append('workflowId', options.workflowId);\n      if (options.executionId) form.append('executionId', options.executionId);\n      if (options.nodeId) form.append('nodeId', options.nodeId);\n      form.append('transferId', transferId);\n\n      const result = await this.makeFormDataRequest<StaticFileInfo>('/binary-data/upload', form);\n      \n      progress.status = 'completed';\n      progress.transferredBytes = totalSize;\n      progress.percentComplete = 100;\n      progress.completedAt = new Date().toISOString();\n      options.onProgress?.(progress);\n\n      return result;\n    } catch (error) {\n      progress.status = 'failed';\n      progress.error = error instanceof Error ? error.message : 'Unknown error';\n      progress.completedAt = new Date().toISOString();\n      options.onProgress?.(progress);\n      throw error;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "32c3c7936f6a63c10a90bf7bbc2957aabbc0580b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6v997b7f3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6v997b7f3();
import fetch from 'node-fetch';
export class BinaryDataClient {
  client;
  baseUrl;
  apiKey;
  constructor(client, baseUrl, apiKey) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[0]++;
    cov_6v997b7f3().s[0]++;
    this.client = client;
    /* istanbul ignore next */
    cov_6v997b7f3().s[1]++;
    this.baseUrl = baseUrl;
    /* istanbul ignore next */
    cov_6v997b7f3().s[2]++;
    this.apiKey = apiKey;
    // Remove trailing slash if present
    /* istanbul ignore next */
    cov_6v997b7f3().s[3]++;
    this.baseUrl = baseUrl.replace(/\/$/, '');
  }
  async makeRequest(endpoint, options =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[1]++;
    const url =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[4]++, `${this.baseUrl}/api/v1${endpoint}`);
    const headers =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[5]++, {
      'X-N8N-API-KEY': this.apiKey,
      'Content-Type': 'application/json',
      ...(
      /* istanbul ignore next */
      (cov_6v997b7f3().b[1][0]++, options.headers) ||
      /* istanbul ignore next */
      (cov_6v997b7f3().b[1][1]++, {}))
    });
    /* istanbul ignore next */
    cov_6v997b7f3().s[6]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_6v997b7f3().s[7]++, await fetch(url, {
        ...options,
        headers
      }));
      /* istanbul ignore next */
      cov_6v997b7f3().s[8]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[2][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_6v997b7f3().s[9]++, await response.text());
        /* istanbul ignore next */
        cov_6v997b7f3().s[10]++;
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      } else
      /* istanbul ignore next */
      {
        cov_6v997b7f3().b[2][1]++;
      }
      // Handle different response types
      const contentType =
      /* istanbul ignore next */
      (cov_6v997b7f3().s[11]++,
      /* istanbul ignore next */
      (cov_6v997b7f3().b[3][0]++, response.headers.get('content-type')) ||
      /* istanbul ignore next */
      (cov_6v997b7f3().b[3][1]++, ''));
      /* istanbul ignore next */
      cov_6v997b7f3().s[12]++;
      if (contentType.includes('application/json')) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[4][0]++;
        cov_6v997b7f3().s[13]++;
        return await response.json();
      } else {
        /* istanbul ignore next */
        cov_6v997b7f3().b[4][1]++;
        cov_6v997b7f3().s[14]++;
        if (
        /* istanbul ignore next */
        (cov_6v997b7f3().b[6][0]++, contentType.includes('application/octet-stream')) ||
        /* istanbul ignore next */
        (cov_6v997b7f3().b[6][1]++, contentType.startsWith('image/')) ||
        /* istanbul ignore next */
        (cov_6v997b7f3().b[6][2]++, contentType.startsWith('video/'))) {
          /* istanbul ignore next */
          cov_6v997b7f3().b[5][0]++;
          cov_6v997b7f3().s[15]++;
          // Return buffer for binary data
          return await response.buffer();
        } else {
          /* istanbul ignore next */
          cov_6v997b7f3().b[5][1]++;
          cov_6v997b7f3().s[16]++;
          return await response.text();
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_6v997b7f3().s[17]++;
      if (error instanceof Error) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[7][0]++;
        cov_6v997b7f3().s[18]++;
        throw new Error(`Request failed: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_6v997b7f3().b[7][1]++;
      }
      cov_6v997b7f3().s[19]++;
      throw new Error('Request failed with unknown error');
    }
  }
  async makeFormDataRequest(endpoint, formData, options =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[2]++;
    const url =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[20]++, `${this.baseUrl}/api/v1${endpoint}`);
    const headers =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[21]++, {
      'X-N8N-API-KEY': this.apiKey,
      ...(
      /* istanbul ignore next */
      (cov_6v997b7f3().b[9][0]++, options.headers) ||
      /* istanbul ignore next */
      (cov_6v997b7f3().b[9][1]++, {}))
      // Note: Don't set Content-Type for FormData - let fetch set it with boundary
    });
    /* istanbul ignore next */
    cov_6v997b7f3().s[22]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_6v997b7f3().s[23]++, await fetch(url, {
        method: 'POST',
        ...options,
        headers,
        body: formData
      }));
      /* istanbul ignore next */
      cov_6v997b7f3().s[24]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[10][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_6v997b7f3().s[25]++, await response.text());
        /* istanbul ignore next */
        cov_6v997b7f3().s[26]++;
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      } else
      /* istanbul ignore next */
      {
        cov_6v997b7f3().b[10][1]++;
      }
      const contentType =
      /* istanbul ignore next */
      (cov_6v997b7f3().s[27]++,
      /* istanbul ignore next */
      (cov_6v997b7f3().b[11][0]++, response.headers.get('content-type')) ||
      /* istanbul ignore next */
      (cov_6v997b7f3().b[11][1]++, ''));
      /* istanbul ignore next */
      cov_6v997b7f3().s[28]++;
      if (contentType.includes('application/json')) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[12][0]++;
        cov_6v997b7f3().s[29]++;
        return await response.json();
      } else {
        /* istanbul ignore next */
        cov_6v997b7f3().b[12][1]++;
        cov_6v997b7f3().s[30]++;
        return await response.text();
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_6v997b7f3().s[31]++;
      if (error instanceof Error) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[13][0]++;
        cov_6v997b7f3().s[32]++;
        throw new Error(`Form data request failed: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_6v997b7f3().b[13][1]++;
      }
      cov_6v997b7f3().s[33]++;
      throw new Error('Form data request failed with unknown error');
    }
  }
  /**
   * Upload binary data to n8n
   */
  async uploadBinaryData(request) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[3]++;
    // Convert base64 to Buffer
    const buffer =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[34]++, Buffer.from(request.data, 'base64'));
    // Create FormData for multipart upload
    const FormData =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[35]++, (await import('form-data')).default);
    const form =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[36]++, new FormData());
    /* istanbul ignore next */
    cov_6v997b7f3().s[37]++;
    form.append('file', buffer, {
      filename: request.fileName,
      contentType: request.mimeType
    });
    /* istanbul ignore next */
    cov_6v997b7f3().s[38]++;
    if (request.workflowId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[14][0]++;
      cov_6v997b7f3().s[39]++;
      form.append('workflowId', request.workflowId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[14][1]++;
    }
    cov_6v997b7f3().s[40]++;
    if (request.executionId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[15][0]++;
      cov_6v997b7f3().s[41]++;
      form.append('executionId', request.executionId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[15][1]++;
    }
    cov_6v997b7f3().s[42]++;
    if (request.nodeId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[16][0]++;
      cov_6v997b7f3().s[43]++;
      form.append('nodeId', request.nodeId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[16][1]++;
    }
    cov_6v997b7f3().s[44]++;
    return this.makeFormDataRequest('/binary-data/upload', form);
  }
  /**
   * Download binary data from n8n
   */
  async downloadBinaryData(request) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[4]++;
    const queryParams =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[45]++, new URLSearchParams());
    /* istanbul ignore next */
    cov_6v997b7f3().s[46]++;
    if (request.workflowId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[17][0]++;
      cov_6v997b7f3().s[47]++;
      queryParams.append('workflowId', request.workflowId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[17][1]++;
    }
    cov_6v997b7f3().s[48]++;
    if (request.executionId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[18][0]++;
      cov_6v997b7f3().s[49]++;
      queryParams.append('executionId', request.executionId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[18][1]++;
    }
    cov_6v997b7f3().s[50]++;
    if (request.nodeId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[19][0]++;
      cov_6v997b7f3().s[51]++;
      queryParams.append('nodeId', request.nodeId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[19][1]++;
    }
    const query =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[52]++, queryParams.toString());
    const endpoint =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[53]++, `/binary-data/${encodeURIComponent(request.fileId)}${query ?
    /* istanbul ignore next */
    (cov_6v997b7f3().b[20][0]++, `?${query}`) :
    /* istanbul ignore next */
    (cov_6v997b7f3().b[20][1]++, '')}`);
    /* istanbul ignore next */
    cov_6v997b7f3().s[54]++;
    return this.makeRequest(endpoint);
  }
  /**
   * Get binary data from execution output
   */
  async getExecutionBinaryData(executionId, nodeId, outputIndex =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[21][0]++, 0), itemIndex =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[22][0]++, 0), propertyName =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[23][0]++, 'data')) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[5]++;
    const endpoint =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[55]++, `/executions/${encodeURIComponent(executionId)}/binary-data`);
    const queryParams =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[56]++, new URLSearchParams({
      nodeId,
      outputIndex: outputIndex.toString(),
      itemIndex: itemIndex.toString(),
      propertyName
    }));
    /* istanbul ignore next */
    cov_6v997b7f3().s[57]++;
    return this.makeRequest(`${endpoint}?${queryParams.toString()}`);
  }
  /**
   * Upload binary data for workflow input
   */
  async uploadWorkflowBinaryData(workflowId, nodeId, data, fileName, mimeType, propertyName =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[24][0]++, 'data')) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[6]++;
    const FormData =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[58]++, (await import('form-data')).default);
    const form =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[59]++, new FormData());
    /* istanbul ignore next */
    cov_6v997b7f3().s[60]++;
    form.append('file', data, {
      filename: fileName,
      contentType: mimeType
    });
    /* istanbul ignore next */
    cov_6v997b7f3().s[61]++;
    form.append('workflowId', workflowId);
    /* istanbul ignore next */
    cov_6v997b7f3().s[62]++;
    form.append('nodeId', nodeId);
    /* istanbul ignore next */
    cov_6v997b7f3().s[63]++;
    form.append('propertyName', propertyName);
    /* istanbul ignore next */
    cov_6v997b7f3().s[64]++;
    return this.makeFormDataRequest('/workflows/binary-data/upload', form);
  }
  /**
   * Delete binary data
   */
  async deleteBinaryData(fileId) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[7]++;
    cov_6v997b7f3().s[65]++;
    return this.makeRequest(`/binary-data/${encodeURIComponent(fileId)}`, {
      method: 'DELETE'
    });
  }
  /**
   * List binary data files
   */
  async listBinaryData(options =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[25][0]++, {})) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[8]++;
    const queryParams =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[66]++, new URLSearchParams());
    /* istanbul ignore next */
    cov_6v997b7f3().s[67]++;
    if (options.workflowId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[26][0]++;
      cov_6v997b7f3().s[68]++;
      queryParams.append('workflowId', options.workflowId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[26][1]++;
    }
    cov_6v997b7f3().s[69]++;
    if (options.executionId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[27][0]++;
      cov_6v997b7f3().s[70]++;
      queryParams.append('executionId', options.executionId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[27][1]++;
    }
    cov_6v997b7f3().s[71]++;
    if (options.nodeId) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[28][0]++;
      cov_6v997b7f3().s[72]++;
      queryParams.append('nodeId', options.nodeId);
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[28][1]++;
    }
    cov_6v997b7f3().s[73]++;
    if (options.limit) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[29][0]++;
      cov_6v997b7f3().s[74]++;
      queryParams.append('limit', options.limit.toString());
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[29][1]++;
    }
    cov_6v997b7f3().s[75]++;
    if (options.offset) {
      /* istanbul ignore next */
      cov_6v997b7f3().b[30][0]++;
      cov_6v997b7f3().s[76]++;
      queryParams.append('offset', options.offset.toString());
    } else
    /* istanbul ignore next */
    {
      cov_6v997b7f3().b[30][1]++;
    }
    const query =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[77]++, queryParams.toString());
    const endpoint =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[78]++, `/binary-data${query ?
    /* istanbul ignore next */
    (cov_6v997b7f3().b[31][0]++, `?${query}`) :
    /* istanbul ignore next */
    (cov_6v997b7f3().b[31][1]++, '')}`);
    /* istanbul ignore next */
    cov_6v997b7f3().s[79]++;
    return this.makeRequest(endpoint);
  }
  /**
   * Get binary data metadata
   */
  async getBinaryDataMetadata(fileId) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[9]++;
    cov_6v997b7f3().s[80]++;
    return this.makeRequest(`/binary-data/${encodeURIComponent(fileId)}/metadata`);
  }
  /**
   * Stream large file upload with progress tracking
   */
  async uploadLargeFile(data, fileName, mimeType, options =
  /* istanbul ignore next */
  (cov_6v997b7f3().b[32][0]++, {})) {
    /* istanbul ignore next */
    cov_6v997b7f3().f[10]++;
    const chunkSize =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[81]++,
    /* istanbul ignore next */
    (cov_6v997b7f3().b[33][0]++, options.chunkSize) ||
    /* istanbul ignore next */
    (cov_6v997b7f3().b[33][1]++, 1024 * 1024)); // 1MB chunks
    const totalSize =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[82]++, data.length);
    const transferId =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[83]++, `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    // Initialize progress tracking
    const progress =
    /* istanbul ignore next */
    (cov_6v997b7f3().s[84]++, {
      transferId,
      fileName,
      totalBytes: totalSize,
      transferredBytes: 0,
      percentComplete: 0,
      status: 'pending',
      startedAt: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_6v997b7f3().s[85]++;
    try {
      /* istanbul ignore next */
      cov_6v997b7f3().s[86]++;
      progress.status = 'in-progress';
      /* istanbul ignore next */
      cov_6v997b7f3().s[87]++;
      options.onProgress?.(progress);
      // For now, upload as single chunk (can be enhanced for true chunked upload)
      const FormData =
      /* istanbul ignore next */
      (cov_6v997b7f3().s[88]++, (await import('form-data')).default);
      const form =
      /* istanbul ignore next */
      (cov_6v997b7f3().s[89]++, new FormData());
      /* istanbul ignore next */
      cov_6v997b7f3().s[90]++;
      form.append('file', data, {
        filename: fileName,
        contentType: mimeType
      });
      /* istanbul ignore next */
      cov_6v997b7f3().s[91]++;
      if (options.workflowId) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[34][0]++;
        cov_6v997b7f3().s[92]++;
        form.append('workflowId', options.workflowId);
      } else
      /* istanbul ignore next */
      {
        cov_6v997b7f3().b[34][1]++;
      }
      cov_6v997b7f3().s[93]++;
      if (options.executionId) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[35][0]++;
        cov_6v997b7f3().s[94]++;
        form.append('executionId', options.executionId);
      } else
      /* istanbul ignore next */
      {
        cov_6v997b7f3().b[35][1]++;
      }
      cov_6v997b7f3().s[95]++;
      if (options.nodeId) {
        /* istanbul ignore next */
        cov_6v997b7f3().b[36][0]++;
        cov_6v997b7f3().s[96]++;
        form.append('nodeId', options.nodeId);
      } else
      /* istanbul ignore next */
      {
        cov_6v997b7f3().b[36][1]++;
      }
      cov_6v997b7f3().s[97]++;
      form.append('transferId', transferId);
      const result =
      /* istanbul ignore next */
      (cov_6v997b7f3().s[98]++, await this.makeFormDataRequest('/binary-data/upload', form));
      /* istanbul ignore next */
      cov_6v997b7f3().s[99]++;
      progress.status = 'completed';
      /* istanbul ignore next */
      cov_6v997b7f3().s[100]++;
      progress.transferredBytes = totalSize;
      /* istanbul ignore next */
      cov_6v997b7f3().s[101]++;
      progress.percentComplete = 100;
      /* istanbul ignore next */
      cov_6v997b7f3().s[102]++;
      progress.completedAt = new Date().toISOString();
      /* istanbul ignore next */
      cov_6v997b7f3().s[103]++;
      options.onProgress?.(progress);
      /* istanbul ignore next */
      cov_6v997b7f3().s[104]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_6v997b7f3().s[105]++;
      progress.status = 'failed';
      /* istanbul ignore next */
      cov_6v997b7f3().s[106]++;
      progress.error = error instanceof Error ?
      /* istanbul ignore next */
      (cov_6v997b7f3().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_6v997b7f3().b[37][1]++, 'Unknown error');
      /* istanbul ignore next */
      cov_6v997b7f3().s[107]++;
      progress.completedAt = new Date().toISOString();
      /* istanbul ignore next */
      cov_6v997b7f3().s[108]++;
      options.onProgress?.(progress);
      /* istanbul ignore next */
      cov_6v997b7f3().s[109]++;
      throw error;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,