{"version":3,"names":["cov_6v997b7f3","actualCoverage","fetch","BinaryDataClient","client","baseUrl","apiKey","constructor","f","s","replace","makeRequest","endpoint","options","b","url","headers","response","ok","errorText","text","Error","status","contentType","get","includes","json","startsWith","buffer","error","message","makeFormDataRequest","formData","method","body","uploadBinaryData","request","Buffer","from","data","FormData","default","form","append","filename","fileName","mimeType","workflowId","executionId","nodeId","downloadBinaryData","queryParams","URLSearchParams","query","toString","encodeURIComponent","fileId","getExecutionBinaryData","outputIndex","itemIndex","propertyName","uploadWorkflowBinaryData","deleteBinaryData","listBinaryData","limit","offset","getBinaryDataMetadata","uploadLargeFile","chunkSize","totalSize","length","transferId","Date","now","Math","random","substr","progress","totalBytes","transferredBytes","percentComplete","startedAt","toISOString","onProgress","result","completedAt"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/binaryDataClient.ts"],"sourcesContent":["import fetch from 'node-fetch';\nimport { N8nClient } from './n8nClient.js';\nimport {\n  BinaryData,\n  N8nBinaryDataResponse,\n  FileUploadRequest,\n  FileDownloadRequest,\n  StaticFileInfo,\n  FileTransferProgress,\n} from '../types/fileTypes.js';\n\nexport class BinaryDataClient {\n  constructor(private client: N8nClient, private baseUrl: string, private apiKey: string) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n  }\n\n  private async makeRequest<T>(\n    endpoint: string,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      'Content-Type': 'application/json',\n      ...((options.headers as Record<string, string>) || {}),\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      // Handle different response types\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else if (contentType.includes('application/octet-stream') || contentType.startsWith('image/') || contentType.startsWith('video/')) {\n        // Return buffer for binary data\n        return (await response.buffer()) as unknown as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Request failed: ${error.message}`);\n      }\n      throw new Error('Request failed with unknown error');\n    }\n  }\n\n  private async makeFormDataRequest<T>(\n    endpoint: string,\n    formData: any,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      ...((options.headers as Record<string, string>) || {}),\n      // Note: Don't set Content-Type for FormData - let fetch set it with boundary\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        ...options,\n        headers,\n        body: formData,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Form data request failed: ${error.message}`);\n      }\n      throw new Error('Form data request failed with unknown error');\n    }\n  }\n\n  /**\n   * Upload binary data to n8n\n   */\n  async uploadBinaryData(request: FileUploadRequest): Promise<StaticFileInfo> {\n    // Convert base64 to Buffer\n    const buffer = Buffer.from(request.data, 'base64');\n    \n    // Create FormData for multipart upload\n    const FormData = (await import('form-data')).default;\n    const form = new FormData();\n    \n    form.append('file', buffer, {\n      filename: request.fileName,\n      contentType: request.mimeType,\n    });\n    \n    if (request.workflowId) form.append('workflowId', request.workflowId);\n    if (request.executionId) form.append('executionId', request.executionId);\n    if (request.nodeId) form.append('nodeId', request.nodeId);\n\n    return this.makeFormDataRequest<StaticFileInfo>('/binary-data/upload', form);\n  }\n\n  /**\n   * Download binary data from n8n\n   */\n  async downloadBinaryData(request: FileDownloadRequest): Promise<N8nBinaryDataResponse> {\n    const queryParams = new URLSearchParams();\n    if (request.workflowId) queryParams.append('workflowId', request.workflowId);\n    if (request.executionId) queryParams.append('executionId', request.executionId);\n    if (request.nodeId) queryParams.append('nodeId', request.nodeId);\n    \n    const query = queryParams.toString();\n    const endpoint = `/binary-data/${encodeURIComponent(request.fileId)}${query ? `?${query}` : ''}`;\n    \n    return this.makeRequest<N8nBinaryDataResponse>(endpoint);\n  }\n\n  /**\n   * Get binary data from execution output\n   */\n  async getExecutionBinaryData(\n    executionId: string, \n    nodeId: string, \n    outputIndex: number = 0, \n    itemIndex: number = 0,\n    propertyName: string = 'data'\n  ): Promise<Buffer> {\n    const endpoint = `/executions/${encodeURIComponent(executionId)}/binary-data`;\n    const queryParams = new URLSearchParams({\n      nodeId,\n      outputIndex: outputIndex.toString(),\n      itemIndex: itemIndex.toString(),\n      propertyName,\n    });\n    \n    return this.makeRequest<Buffer>(`${endpoint}?${queryParams.toString()}`);\n  }\n\n  /**\n   * Upload binary data for workflow input\n   */\n  async uploadWorkflowBinaryData(\n    workflowId: string,\n    nodeId: string,\n    data: Buffer,\n    fileName: string,\n    mimeType: string,\n    propertyName: string = 'data'\n  ): Promise<StaticFileInfo> {\n    const FormData = (await import('form-data')).default;\n    const form = new FormData();\n    \n    form.append('file', data, {\n      filename: fileName,\n      contentType: mimeType,\n    });\n    form.append('workflowId', workflowId);\n    form.append('nodeId', nodeId);\n    form.append('propertyName', propertyName);\n\n    return this.makeFormDataRequest<StaticFileInfo>('/workflows/binary-data/upload', form);\n  }\n\n  /**\n   * Delete binary data\n   */\n  async deleteBinaryData(fileId: string): Promise<{ success: boolean; message: string }> {\n    return this.makeRequest<{ success: boolean; message: string }>(`/binary-data/${encodeURIComponent(fileId)}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * List binary data files\n   */\n  async listBinaryData(options: {\n    workflowId?: string;\n    executionId?: string;\n    nodeId?: string;\n    limit?: number;\n    offset?: number;\n  } = {}): Promise<StaticFileInfo[]> {\n    const queryParams = new URLSearchParams();\n    \n    if (options.workflowId) queryParams.append('workflowId', options.workflowId);\n    if (options.executionId) queryParams.append('executionId', options.executionId);\n    if (options.nodeId) queryParams.append('nodeId', options.nodeId);\n    if (options.limit) queryParams.append('limit', options.limit.toString());\n    if (options.offset) queryParams.append('offset', options.offset.toString());\n    \n    const query = queryParams.toString();\n    const endpoint = `/binary-data${query ? `?${query}` : ''}`;\n    \n    return this.makeRequest<StaticFileInfo[]>(endpoint);\n  }\n\n  /**\n   * Get binary data metadata\n   */\n  async getBinaryDataMetadata(fileId: string): Promise<StaticFileInfo> {\n    return this.makeRequest<StaticFileInfo>(`/binary-data/${encodeURIComponent(fileId)}/metadata`);\n  }\n\n  /**\n   * Stream large file upload with progress tracking\n   */\n  async uploadLargeFile(\n    data: Buffer,\n    fileName: string,\n    mimeType: string,\n    options: {\n      workflowId?: string;\n      executionId?: string;\n      nodeId?: string;\n      chunkSize?: number;\n      onProgress?: (progress: FileTransferProgress) => void;\n    } = {}\n  ): Promise<StaticFileInfo> {\n    const chunkSize = options.chunkSize || 1024 * 1024; // 1MB chunks\n    const totalSize = data.length;\n    const transferId = `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Initialize progress tracking\n    const progress: FileTransferProgress = {\n      transferId,\n      fileName,\n      totalBytes: totalSize,\n      transferredBytes: 0,\n      percentComplete: 0,\n      status: 'pending',\n      startedAt: new Date().toISOString(),\n    };\n\n    try {\n      progress.status = 'in-progress';\n      options.onProgress?.(progress);\n\n      // For now, upload as single chunk (can be enhanced for true chunked upload)\n      const FormData = (await import('form-data')).default;\n      const form = new FormData();\n      \n      form.append('file', data, {\n        filename: fileName,\n        contentType: mimeType,\n      });\n      \n      if (options.workflowId) form.append('workflowId', options.workflowId);\n      if (options.executionId) form.append('executionId', options.executionId);\n      if (options.nodeId) form.append('nodeId', options.nodeId);\n      form.append('transferId', transferId);\n\n      const result = await this.makeFormDataRequest<StaticFileInfo>('/binary-data/upload', form);\n      \n      progress.status = 'completed';\n      progress.transferredBytes = totalSize;\n      progress.percentComplete = 100;\n      progress.completedAt = new Date().toISOString();\n      options.onProgress?.(progress);\n\n      return result;\n    } catch (error) {\n      progress.status = 'failed';\n      progress.error = error instanceof Error ? error.message : 'Unknown error';\n      progress.completedAt = new Date().toISOString();\n      options.onProgress?.(progress);\n      throw error;\n    }\n  }\n}"],"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","ignoreList":[]}