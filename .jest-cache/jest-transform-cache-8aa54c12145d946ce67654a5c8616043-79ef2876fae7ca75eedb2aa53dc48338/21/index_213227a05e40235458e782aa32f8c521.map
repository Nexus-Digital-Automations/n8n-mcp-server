{"version":3,"names":["cov_1nezf8h6vx","actualCoverage","exports","startServer","index_js_1","s","require","stdio_js_1","types_js_1","node_fetch_1","__importDefault","N8nClient","baseUrl","apiKey","constructor","f","replace","makeRequest","endpoint","options","b","url","headers","Accept","response","default","ok","errorText","text","errorMessage","errorJson","JSON","parse","message","includes","Error","status","json","error","listWorkflows","getWorkflow","id","createWorkflow","name","nodes","connections","method","body","stringify","settings","saveManualExecutions","saveExecutionProgress","updateWorkflow","workflow","deleteWorkflow","activateWorkflow","deactivateWorkflow","listProjects","createProject","deleteProject","projectId","updateProject","listUsers","createUsers","users","getUser","idOrEmail","deleteUser","listVariables","createVariable","key","value","deleteVariable","getExecutions","params","URLSearchParams","includeData","undefined","append","String","workflowId","limit","toString","getExecution","deleteExecution","createTag","getTags","getTag","updateTag","deleteTag","getWorkflowTags","updateWorkflowTags","tagIds","generateAudit","additionalOptions","daysAbandonedWorkflow","categories","createCredential","type","data","deleteCredential","getCredentialSchema","credentialTypeName","server","Server","version","capabilities","tools","clients","Map","setRequestHandler","ListToolsRequestSchema","description","inputSchema","properties","required","clientId","active","items","email","role","enum","CallToolRequestSchema","request","arguments","args","client","Buffer","from","set","content","isError","get","workflows","formattedWorkflows","map","wf","created","createdAt","updated","updatedAt","tags","updatedWorkflow","projects","result","user","variables","credential","schema","executions","execution","tag","audit","transport","StdioServerTransport","connect","console","process","argv","env","NODE_ENV","catch","exit"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/index.ts"],"sourcesContent":["\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { ListToolsRequestSchema, CallToolRequestSchema } from '@modelcontextprotocol/sdk/types.js';\nimport fetch from 'node-fetch';\n\n// Type definitions for n8n API responses\ninterface N8nUser {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isPending: boolean;\n  role?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface N8nUserList {\n  data: N8nUser[];\n  nextCursor?: string;\n}\n\ninterface N8nWorkflow {\n  id: number;\n  name: string;\n  active: boolean;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n}\n\ninterface N8nWorkflowList {\n  data: N8nWorkflow[];\n  nextCursor?: string;\n}\n\ninterface N8nProject {\n  id: string;\n  name: string;\n  type?: string;\n}\n\ninterface N8nProjectList {\n  data: N8nProject[];\n  nextCursor?: string;\n}\n\ninterface N8nVariable {\n  id: string;\n  key: string;\n  value: string;\n  type?: string;\n}\n\ninterface N8nVariableList {\n  data: N8nVariable[];\n  nextCursor?: string;\n}\n\ninterface N8nExecution {\n  id: number;\n  data?: any;\n  finished: boolean;\n  mode: string;\n  retryOf?: number;\n  retrySuccessId?: number;\n  startedAt: string;\n  stoppedAt?: string;\n  workflowId: number;\n  waitTill?: string;\n}\n\ninterface N8nExecutionList {\n  data: N8nExecution[];\n  nextCursor?: string;\n}\n\ninterface N8nTag {\n  id: string;\n  name: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface N8nTagList {\n  data: N8nTag[];\n  nextCursor?: string;\n}\n\ninterface N8nAuditResult {\n  'Credentials Risk Report'?: any;\n  'Database Risk Report'?: any;\n  'Filesystem Risk Report'?: any;\n  'Nodes Risk Report'?: any;\n  'Instance Risk Report'?: any;\n}\n\nclass N8nClient {\n  constructor(\n    private baseUrl: string,\n    private apiKey: string\n  ) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n    // Ensure apiKey is properly assigned for ESLint\n    this.apiKey = apiKey;\n  }\n\n  private async makeRequest<T>(endpoint: string, options: any = {}): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...headers,\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage: string;\n        try {\n          const errorJson = JSON.parse(errorText);\n          // Check for license-related errors\n          if (errorJson.message && errorJson.message.includes('license')) {\n            errorMessage = `This operation requires an n8n Enterprise license with project management features enabled. Error: ${errorJson.message}`;\n          } else {\n            errorMessage = errorJson.message || errorText;\n          }\n        } catch {\n          errorMessage = errorText;\n        }\n        throw new Error(`N8N API error: ${errorMessage}`);\n      }\n\n      // Handle 204 No Content responses\n      if (response.status === 204) {\n        return {} as T;\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to connect to n8n: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  async listWorkflows(): Promise<N8nWorkflowList> {\n    return this.makeRequest<N8nWorkflowList>('/workflows');\n  }\n\n  async getWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`);\n  }\n\n  async createWorkflow(\n    name: string,\n    nodes: any[] = [],\n    connections: any = {}\n  ): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>('/workflows', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        nodes,\n        connections,\n        settings: {\n          saveManualExecutions: true,\n          saveExecutionProgress: true,\n        },\n      }),\n    });\n  }\n\n  async updateWorkflow(id: string, workflow: Partial<N8nWorkflow>): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(workflow),\n    });\n  }\n\n  async deleteWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async activateWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}/activate`, {\n      method: 'POST',\n    });\n  }\n\n  async deactivateWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}/deactivate`, {\n      method: 'POST',\n    });\n  }\n\n  // Project management methods (requires n8n Enterprise license)\n  async listProjects(): Promise<N8nProjectList> {\n    return this.makeRequest<N8nProjectList>('/projects');\n  }\n\n  async createProject(name: string): Promise<void> {\n    return this.makeRequest<void>('/projects', {\n      method: 'POST',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async deleteProject(projectId: string): Promise<void> {\n    return this.makeRequest<void>(`/projects/${projectId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async updateProject(projectId: string, name: string): Promise<void> {\n    return this.makeRequest<void>(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  // User management methods\n  async listUsers(): Promise<N8nUserList> {\n    return this.makeRequest<N8nUserList>('/users');\n  }\n\n  async createUsers(\n    users: Array<{ email: string; role?: 'global:admin' | 'global:member' }>\n  ): Promise<any> {\n    return this.makeRequest('/users', {\n      method: 'POST',\n      body: JSON.stringify(users),\n    });\n  }\n\n  async getUser(idOrEmail: string): Promise<N8nUser> {\n    return this.makeRequest<N8nUser>(`/users/${idOrEmail}`);\n  }\n\n  async deleteUser(idOrEmail: string): Promise<void> {\n    return this.makeRequest<void>(`/users/${idOrEmail}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Variable management methods\n  async listVariables(): Promise<N8nVariableList> {\n    return this.makeRequest<N8nVariableList>('/variables');\n  }\n\n  async createVariable(key: string, value: string): Promise<void> {\n    return this.makeRequest<void>('/variables', {\n      method: 'POST',\n      body: JSON.stringify({ key, value }),\n    });\n  }\n\n  async deleteVariable(id: string): Promise<void> {\n    return this.makeRequest<void>(`/variables/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Execution management methods\n  async getExecutions(\n    options: {\n      includeData?: boolean;\n      status?: 'error' | 'success' | 'waiting';\n      workflowId?: string;\n      limit?: number;\n    } = {}\n  ): Promise<N8nExecutionList> {\n    const params = new URLSearchParams();\n    if (options.includeData !== undefined)\n      params.append('includeData', String(options.includeData));\n    if (options.status) params.append('status', options.status);\n    if (options.workflowId) params.append('workflowId', options.workflowId);\n    if (options.limit) params.append('limit', String(options.limit));\n\n    return this.makeRequest<N8nExecutionList>(`/executions?${params.toString()}`);\n  }\n\n  async getExecution(id: number, includeData: boolean = false): Promise<N8nExecution> {\n    const params = new URLSearchParams();\n    if (includeData) params.append('includeData', 'true');\n\n    return this.makeRequest<N8nExecution>(`/executions/${id}?${params.toString()}`);\n  }\n\n  async deleteExecution(id: number): Promise<N8nExecution> {\n    return this.makeRequest<N8nExecution>(`/executions/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Tag management methods\n  async createTag(name: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>('/tags', {\n      method: 'POST',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async getTags(options: { limit?: number } = {}): Promise<N8nTagList> {\n    const params = new URLSearchParams();\n    if (options.limit) params.append('limit', String(options.limit));\n\n    return this.makeRequest<N8nTagList>(`/tags?${params.toString()}`);\n  }\n\n  async getTag(id: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`);\n  }\n\n  async updateTag(id: string, name: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async deleteTag(id: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getWorkflowTags(workflowId: string): Promise<N8nTag[]> {\n    return this.makeRequest<N8nTag[]>(`/workflows/${workflowId}/tags`);\n  }\n\n  async updateWorkflowTags(workflowId: string, tagIds: { id: string }[]): Promise<N8nTag[]> {\n    return this.makeRequest<N8nTag[]>(`/workflows/${workflowId}/tags`, {\n      method: 'PUT',\n      body: JSON.stringify(tagIds),\n    });\n  }\n\n  // Security audit method\n  async generateAudit(\n    options: {\n      daysAbandonedWorkflow?: number;\n      categories?: Array<'credentials' | 'database' | 'nodes' | 'filesystem' | 'instance'>;\n    } = {}\n  ): Promise<N8nAuditResult> {\n    return this.makeRequest<N8nAuditResult>('/audit', {\n      method: 'POST',\n      body: JSON.stringify({\n        additionalOptions: {\n          daysAbandonedWorkflow: options.daysAbandonedWorkflow,\n          categories: options.categories,\n        },\n      }),\n    });\n  }\n\n  // Credential management methods\n  async createCredential(name: string, type: string, data: Record<string, any>): Promise<any> {\n    return this.makeRequest('/credentials', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        type,\n        data,\n      }),\n    });\n  }\n\n  async deleteCredential(id: string): Promise<any> {\n    return this.makeRequest(`/credentials/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getCredentialSchema(credentialTypeName: string): Promise<any> {\n    return this.makeRequest(`/credentials/schema/${credentialTypeName}`);\n  }\n}\n\n// Create an MCP server\nconst server = new Server(\n  {\n    name: 'n8n-integration',\n    version: '1.0.0',\n  },\n  {\n    capabilities: {\n      tools: {},\n    },\n  }\n);\n\n// Store client instances\nconst clients = new Map<string, N8nClient>();\n\n// List tools handler\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: [\n      {\n        name: 'init-n8n',\n        description:\n          'Initialize connection to n8n instance. Use this tool whenever an n8n URL and API key are shared to establish the connection. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            url: { type: 'string' },\n            apiKey: { type: 'string' },\n          },\n          required: ['url', 'apiKey'],\n        },\n      },\n      {\n        name: 'list-workflows',\n        description:\n          'List all workflows from n8n. Use after init-n8n to see available workflows. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-workflow',\n        description:\n          'Retrieve a workflow by ID. Use after list-workflows to get detailed information about a specific workflow. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'create-workflow',\n        description:\n          \"Create a new workflow in n8n. Use to set up a new workflow with optional nodes and connections. IMPORTANT: 1) Arguments must be provided as compact, single-line JSON without whitespace or newlines. 2) Must provide full workflow structure including nodes and connections arrays, even if empty. The 'active' property should not be included as it is read-only.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n            nodes: { type: 'array' },\n            connections: { type: 'object' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'update-workflow',\n        description:\n          \"Update an existing workflow in n8n. Use after get-workflow to modify a workflow's properties, nodes, or connections. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n            workflow: {\n              type: 'object',\n              properties: {\n                name: { type: 'string' },\n                active: { type: 'boolean' },\n                nodes: { type: 'array' },\n                connections: { type: 'object' },\n                settings: { type: 'object' },\n              },\n            },\n          },\n          required: ['clientId', 'id', 'workflow'],\n        },\n      },\n      {\n        name: 'delete-workflow',\n        description:\n          'Delete a workflow by ID. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'activate-workflow',\n        description:\n          'Activate a workflow by ID. This will enable the workflow to run. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'deactivate-workflow',\n        description:\n          'Deactivate a workflow by ID. This will prevent the workflow from running. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'list-projects',\n        description:\n          'List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-project',\n        description:\n          'Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'delete-project',\n        description:\n          'Delete a project by ID. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            projectId: { type: 'string' },\n          },\n          required: ['clientId', 'projectId'],\n        },\n      },\n      {\n        name: 'update-project',\n        description:\n          \"Update a project's name. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            projectId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'projectId', 'name'],\n        },\n      },\n      {\n        name: 'list-users',\n        description:\n          'Retrieve all users from your instance. Only available for the instance owner.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-users',\n        description: 'Create one or more users in your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            users: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  email: { type: 'string' },\n                  role: {\n                    type: 'string',\n                    enum: ['global:admin', 'global:member'],\n                  },\n                },\n                required: ['email'],\n              },\n            },\n          },\n          required: ['clientId', 'users'],\n        },\n      },\n      {\n        name: 'get-user',\n        description: 'Get user by ID or email address.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            idOrEmail: { type: 'string' },\n          },\n          required: ['clientId', 'idOrEmail'],\n        },\n      },\n      {\n        name: 'delete-user',\n        description: 'Delete a user from your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            idOrEmail: { type: 'string' },\n          },\n          required: ['clientId', 'idOrEmail'],\n        },\n      },\n      {\n        name: 'list-variables',\n        description:\n          'List all variables from n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after init-n8n to see available variables. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-variable',\n        description:\n          'Create a new variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Variables can be used across workflows to store and share data. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            key: { type: 'string' },\n            value: { type: 'string' },\n          },\n          required: ['clientId', 'key', 'value'],\n        },\n      },\n      {\n        name: 'delete-variable',\n        description:\n          'Delete a variable by ID. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after list-variables to get the ID of the variable to delete. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'create-credential',\n        description:\n          \"Create a credential that can be used by nodes of the specified type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). Use get-credential-schema first to see what fields are required for the credential type you want to create.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n            type: { type: 'string' },\n            data: { type: 'object' },\n          },\n          required: ['clientId', 'name', 'type', 'data'],\n        },\n      },\n      {\n        name: 'delete-credential',\n        description: 'Delete a credential by ID. You must be the owner of the credentials.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'get-credential-schema',\n        description:\n          \"Show credential data schema for a specific credential type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). This will show you what fields are required for creating credentials of this type.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            credentialTypeName: { type: 'string' },\n          },\n          required: ['clientId', 'credentialTypeName'],\n        },\n      },\n      // Execution Management Tools\n      {\n        name: 'list-executions',\n        description: 'Retrieve all executions from your instance with optional filtering.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            includeData: { type: 'boolean' },\n            status: {\n              type: 'string',\n              enum: ['error', 'success', 'waiting'],\n            },\n            workflowId: { type: 'string' },\n            limit: { type: 'number' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-execution',\n        description: 'Retrieve a specific execution by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'number' },\n            includeData: { type: 'boolean' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'delete-execution',\n        description: 'Delete a specific execution by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'number' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      // Tag Management Tools\n      {\n        name: 'create-tag',\n        description: 'Create a new tag in your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'list-tags',\n        description: 'Retrieve all tags from your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            limit: { type: 'number' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-tag',\n        description: 'Retrieve a specific tag by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'update-tag',\n        description: \"Update a tag's name.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'id', 'name'],\n        },\n      },\n      {\n        name: 'delete-tag',\n        description: 'Delete a tag by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'get-workflow-tags',\n        description: 'Get tags associated with a workflow.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            workflowId: { type: 'string' },\n          },\n          required: ['clientId', 'workflowId'],\n        },\n      },\n      {\n        name: 'update-workflow-tags',\n        description: 'Update tags associated with a workflow.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            workflowId: { type: 'string' },\n            tagIds: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  id: { type: 'string' },\n                },\n                required: ['id'],\n              },\n            },\n          },\n          required: ['clientId', 'workflowId', 'tagIds'],\n        },\n      },\n      // Security Audit Tool\n      {\n        name: 'generate-audit',\n        description: 'Generate a security audit for your n8n instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            daysAbandonedWorkflow: { type: 'number' },\n            categories: {\n              type: 'array',\n              items: {\n                type: 'string',\n                enum: ['credentials', 'database', 'nodes', 'filesystem', 'instance'],\n              },\n            },\n          },\n          required: ['clientId'],\n        },\n      },\n    ],\n  };\n});\n\n// Tool execution handler\nserver.setRequestHandler(CallToolRequestSchema, async request => {\n  const { name, arguments: args } = request.params;\n\n  switch (name) {\n    case 'init-n8n': {\n      const { url, apiKey } = args as { url: string; apiKey: string };\n      try {\n        const client = new N8nClient(url, apiKey);\n\n        // Test connection by listing workflows\n        await client.listWorkflows();\n\n        // Generate a unique client ID\n        const clientId = Buffer.from(url).toString('base64');\n        clients.set(clientId, client);\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully connected to n8n at ${url}. Use this client ID for future operations: ${clientId}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-workflows': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflows = await client.listWorkflows();\n        const formattedWorkflows = workflows.data.map(wf => ({\n          id: wf.id,\n          name: wf.name,\n          active: wf.active,\n          created: wf.createdAt,\n          updated: wf.updatedAt,\n          tags: wf.tags,\n        }));\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(formattedWorkflows, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.getWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(workflow, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-workflow': {\n      const { clientId, id, workflow } = args as {\n        clientId: string;\n        id: string;\n        workflow: Partial<N8nWorkflow>;\n      };\n\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const updatedWorkflow = await client.updateWorkflow(id, workflow);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated workflow:\\n${JSON.stringify(updatedWorkflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-workflow': {\n      const {\n        clientId,\n        name,\n        nodes = [],\n        connections = {},\n      } = args as {\n        clientId: string;\n        name: string;\n        nodes?: any[];\n        connections?: Record<string, any>;\n      };\n\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.createWorkflow(name, nodes, connections);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.deleteWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'activate-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.activateWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully activated workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'deactivate-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.deactivateWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deactivated workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-projects': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const projects = await client.listProjects();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(projects.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-project': {\n      const { clientId, name } = args as { clientId: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.createProject(name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created project: ${name}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-project': {\n      const { clientId, projectId } = args as { clientId: string; projectId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteProject(projectId);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted project with ID: ${projectId}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-project': {\n      const { clientId, projectId, name } = args as {\n        clientId: string;\n        projectId: string;\n        name: string;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.updateProject(projectId, name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated project ${projectId} with new name: ${name}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-users': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const users = await client.listUsers();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(users.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-users': {\n      const { clientId, users } = args as {\n        clientId: string;\n        users: Array<{\n          email: string;\n          role?: 'global:admin' | 'global:member';\n        }>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const result = await client.createUsers(users);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(result, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-user': {\n      const { clientId, idOrEmail } = args as { clientId: string; idOrEmail: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const user = await client.getUser(idOrEmail);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(user, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-user': {\n      const { clientId, idOrEmail } = args as { clientId: string; idOrEmail: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteUser(idOrEmail);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted user: ${idOrEmail}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-variables': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const variables = await client.listVariables();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(variables.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-variable': {\n      const { clientId, key, value } = args as { clientId: string; key: string; value: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.createVariable(key, value);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created variable with key: ${key}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-variable': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteVariable(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted variable with ID: ${id}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-credential': {\n      const { clientId, name, type, data } = args as {\n        clientId: string;\n        name: string;\n        type: string;\n        data: Record<string, any>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const credential = await client.createCredential(name, type, data);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created credential:\\n${JSON.stringify(credential, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-credential': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const result = await client.deleteCredential(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted credential:\\n${JSON.stringify(result, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-credential-schema': {\n      const { clientId, credentialTypeName } = args as {\n        clientId: string;\n        credentialTypeName: string;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const schema = await client.getCredentialSchema(credentialTypeName);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(schema, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    // Execution Management Handlers\n    case 'list-executions': {\n      const { clientId, includeData, status, workflowId, limit } = args as {\n        clientId: string;\n        includeData?: boolean;\n        status?: 'error' | 'success' | 'waiting';\n        workflowId?: string;\n        limit?: number;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const executions = await client.getExecutions({ includeData, status, workflowId, limit });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(executions.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-execution': {\n      const { clientId, id, includeData } = args as {\n        clientId: string;\n        id: number;\n        includeData?: boolean;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const execution = await client.getExecution(id, includeData);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(execution, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-execution': {\n      const { clientId, id } = args as { clientId: string; id: number };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const execution = await client.deleteExecution(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted execution:\\n${JSON.stringify(execution, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    // Tag Management Handlers\n    case 'create-tag': {\n      const { clientId, name } = args as { clientId: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.createTag(name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-tags': {\n      const { clientId, limit } = args as { clientId: string; limit?: number };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.getTags({ limit });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tags.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-tag': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.getTag(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tag, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-tag': {\n      const { clientId, id, name } = args as { clientId: string; id: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.updateTag(id, name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-tag': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.deleteTag(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-workflow-tags': {\n      const { clientId, workflowId } = args as { clientId: string; workflowId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.getWorkflowTags(workflowId);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tags, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-workflow-tags': {\n      const { clientId, workflowId, tagIds } = args as {\n        clientId: string;\n        workflowId: string;\n        tagIds: { id: string }[];\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.updateWorkflowTags(workflowId, tagIds);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated workflow tags:\\n${JSON.stringify(tags, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'generate-audit': {\n      const { clientId, daysAbandonedWorkflow, categories } = args as {\n        clientId: string;\n        daysAbandonedWorkflow?: number;\n        categories?: Array<'credentials' | 'database' | 'nodes' | 'filesystem' | 'instance'>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const audit = await client.generateAudit({ daysAbandonedWorkflow, categories });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(audit, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    default:\n      return {\n        content: [\n          {\n            type: 'text',\n            text: `Unknown tool: ${name}`,\n          },\n        ],\n        isError: true,\n      };\n  }\n});\n\n// Export the server and initialization function for testing\nexport { server, clients, N8nClient };\n\n// Main function to start the server\nexport async function startServer() {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error('N8N MCP Server running on stdio');\n}\n\n// Start the server only if this module is run directly\n// Note: import.meta.url check is replaced with process.argv check for Jest compatibility\nif (\n  process.argv[1] &&\n  process.argv[1].includes('index.js') &&\n  !process.env.NODE_ENV?.includes('test')\n) {\n  startServer().catch(error => {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  });\n}\n"],"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","ignoreList":[]}