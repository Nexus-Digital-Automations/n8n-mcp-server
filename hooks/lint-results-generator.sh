#!/usr/bin/env bash
# lint-results-generator.sh - Generate lint results file for continuous monitoring
#
# This script creates a standardized lint results file that works without external dependencies

set +e

# Source common helpers
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/common-helpers.sh"

# Initialize paths
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
REPORTS_DIR="${PROJECT_ROOT}/development/reports"
LINT_RESULTS_FILE="${REPORTS_DIR}/lint-results.md"

# Ensure reports directory exists
mkdir -p "$REPORTS_DIR"

# Function to run safe lint checks (without external tools)
run_safe_lint_checks() {
    local project_type="$1"
    local errors=0
    local warnings=0
    
    echo "## Lint Check Results"
    echo ""
    echo "**Project Type:** $project_type"
    echo "**Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
    
    # Basic file structure checks
    echo "### File Structure Analysis"
    echo ""
    
    # Check for common issues in shell scripts
    if [[ -n "$(find . -name "*.sh" -type f | head -10)" ]]; then
        echo "#### Shell Scripts"
        local shell_files=$(find . -name "*.sh" -type f | grep -v -E "(\.git/|node_modules/)" | head -20)
        
        for file in $shell_files; do
            # Check for basic syntax issues
            if ! bash -n "$file" 2>/dev/null; then
                echo "❌ **Syntax Error:** $file"
                errors=$((errors + 1))
            else
                echo "✅ **Syntax OK:** $file"
            fi
        done
        echo ""
    fi
    
    # Check for Python files
    if [[ -n "$(find . -name "*.py" -type f | head -5)" ]]; then
        echo "#### Python Files"
        local py_files=$(find . -name "*.py" -type f | grep -v -E "(\.git/|__pycache__/|venv/)" | head -10)
        
        for file in $py_files; do
            # Check for basic syntax
            if python3 -m py_compile "$file" 2>/dev/null; then
                echo "✅ **Syntax OK:** $file"
            else
                echo "❌ **Syntax Error:** $file"
                errors=$((errors + 1))
            fi
        done
        echo ""
    fi
    
    # Check for JavaScript files
    if [[ -n "$(find . -name "*.js" -type f | head -5)" ]]; then
        echo "#### JavaScript Files"
        local js_files=$(find . -name "*.js" -type f | grep -v -E "(\.git/|node_modules/)" | head -10)
        
        for file in $js_files; do
            # Basic syntax check with node if available
            if command -v node >/dev/null 2>&1; then
                if node -c "$file" 2>/dev/null; then
                    echo "✅ **Syntax OK:** $file"
                else
                    echo "❌ **Syntax Error:** $file"
                    errors=$((errors + 1))
                fi
            else
                echo "ℹ️ **Not Checked:** $file (node not available)"
                warnings=$((warnings + 1))
            fi
        done
        echo ""
    fi
    
    # Check for Go files
    if [[ -n "$(find . -name "*.go" -type f | head -5)" ]]; then
        echo "#### Go Files"
        local go_files=$(find . -name "*.go" -type f | head -10)
        
        if command -v go >/dev/null 2>&1; then
            for file in $go_files; do
                if go fmt -l "$file" >/dev/null 2>&1; then
                    echo "✅ **Format OK:** $file"
                else
                    echo "⚠️ **Format Issue:** $file"
                    warnings=$((warnings + 1))
                fi
            done
        else
            echo "ℹ️ **Go compiler not available for checking**"
            warnings=$((warnings + 1))
        fi
        echo ""
    fi
    
    # Summary
    echo "### Summary"
    echo ""
    if [[ $errors -eq 0 ]]; then
        if [[ $warnings -eq 0 ]]; then
            echo "✅ **All checks passed successfully**"  
        else
            echo "⚠️ **$warnings warning(s) found, but no blocking errors**"
        fi
    else
        echo "❌ **$errors error(s) found that need attention**"
        if [[ $warnings -gt 0 ]]; then
            echo "⚠️ **$warnings warning(s) also found**"
        fi
    fi
    
    echo ""
    echo "---"
    echo "*Generated by continuous lint monitor at $(date '+%Y-%m-%d %H:%M:%S')*"
    
    return $errors
}

# Detect project type (simplified version)
detect_simple_project_type() {
    local types=()
    
    if [[ -f "go.mod" ]] || [[ -n "$(find . -maxdepth 2 -name "*.go" -type f -print -quit)" ]]; then
        types+=("go")
    fi
    
    if [[ -f "package.json" ]] || [[ -n "$(find . -maxdepth 2 -name "*.js" -type f -print -quit)" ]]; then
        types+=("javascript")
    fi
    
    if [[ -f "setup.py" ]] || [[ -f "pyproject.toml" ]] || [[ -n "$(find . -maxdepth 2 -name "*.py" -type f -print -quit)" ]]; then
        types+=("python")
    fi
    
    if [[ -n "$(find . -maxdepth 2 -name "*.sh" -type f -print -quit)" ]]; then
        types+=("shell")
    fi
    
    if [[ ${#types[@]} -eq 0 ]]; then
        echo "unknown"
    elif [[ ${#types[@]} -eq 1 ]]; then
        echo "${types[0]}"
    else
        echo "mixed:$(IFS=,; echo "${types[*]}")"
    fi
}

# Main execution
main() {
    cd "$PROJECT_ROOT"
    
    local project_type=$(detect_simple_project_type)
    
    # Generate lint results
    {
        echo "# Continuous Lint Monitor Results"
        echo ""
        run_safe_lint_checks "$project_type"
    } > "$LINT_RESULTS_FILE"
    
    echo "Lint results generated: $LINT_RESULTS_FILE"
}

# Run if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi